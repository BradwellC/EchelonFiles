{
  "version": 3,
  "sources": ["../node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.production.js", "../node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js", "../node_modules/use-sync-external-store/shim/index.js", "../src/search-projects.tsx", "../src/pages/lists/projects-list.tsx", "../src/utils/time.ts", "../src/pages/search-projects/team-switch-search-accessory.tsx", "../src/hooks/use-vercel-info.ts", "../src/vercel.ts", "../node_modules/swr/dist/index/index.mjs", "../node_modules/swr/dist/_internal/config-context-client-BoS53ST9.mjs", "../node_modules/swr/dist/_internal/events.mjs", "../node_modules/dequal/lite/index.mjs", "../node_modules/swr/dist/_internal/constants.mjs", "../node_modules/swr/dist/_internal/index.mjs", "../src/hooks/use-shared-state.ts", "../node_modules/@raycast/utils/dist/src/index.ts", "../node_modules/@raycast/utils/dist/src/usePromise.ts", "../node_modules/@raycast/utils/dist/src/useDeepMemo.ts", "../node_modules/@raycast/utils/dist/src/useLatest.ts", "../node_modules/@raycast/utils/dist/src/showFailureToast.ts", "../node_modules/@raycast/utils/dist/src/useCachedState.ts", "../node_modules/@raycast/utils/dist/src/helpers.ts", "../node_modules/@raycast/utils/dist/src/vendors/type-hasher.ts", "../node_modules/@raycast/utils/dist/src/useCachedPromise.ts", "../node_modules/@raycast/utils/dist/src/useFetch.ts", "../node_modules/@raycast/utils/dist/src/fetch-utils.ts", "../node_modules/@raycast/utils/dist/src/useExec.ts", "../node_modules/@raycast/utils/dist/src/exec-utils.ts", "../node_modules/@raycast/utils/dist/src/vendors/signal-exit.ts", "../node_modules/@raycast/utils/dist/src/useStreamJSON.ts", "../node_modules/@raycast/utils/dist/src/vendors/stream-chain.ts", "../node_modules/@raycast/utils/dist/src/vendors/stream-json.ts", "../node_modules/@raycast/utils/dist/src/useSQL.tsx", "../node_modules/@raycast/utils/dist/src/sql-utils.ts", "../node_modules/@raycast/utils/dist/src/useForm.tsx", "../node_modules/@raycast/utils/dist/src/useAI.ts", "../node_modules/@raycast/utils/dist/src/useFrecencySorting.ts", "../node_modules/@raycast/utils/dist/src/useLocalStorage.ts", "../node_modules/@raycast/utils/dist/src/icon/index.ts", "../node_modules/@raycast/utils/dist/src/icon/avatar.ts", "../node_modules/@raycast/utils/dist/src/icon/color.ts", "../node_modules/@raycast/utils/dist/src/icon/favicon.ts", "../node_modules/@raycast/utils/dist/src/icon/progress.ts", "../node_modules/@raycast/utils/dist/src/oauth/index.ts", "../node_modules/@raycast/utils/dist/src/oauth/OAuthService.ts", "../node_modules/@raycast/utils/dist/src/oauth/providers.ts", "../node_modules/@raycast/utils/dist/src/oauth/withAccessToken.tsx", "../node_modules/@raycast/utils/dist/src/createDeeplink.ts", "../node_modules/@raycast/utils/dist/src/executeSQL.ts", "../node_modules/@raycast/utils/dist/src/run-applescript.ts", "../node_modules/@raycast/utils/dist/src/run-powershell-script.ts", "../node_modules/@raycast/utils/dist/src/cache.ts", "../src/pages/inspect-deployment.tsx", "../src/markdown/get-deployment-markdown.tsx", "../src/pages/lists/deployments-list.tsx", "../src/pages/lists/environment-variables-list.tsx", "../src/pages/forms/edit-env-var.tsx", "../src/pages/forms/new-env-var.tsx", "../src/utils/is-valid-token.ts", "../src/pages/details/invalid-token-view.tsx", "../src/pages/with-valid-token.tsx"],
  "sourcesContent": ["/**\n * @license React\n * use-sync-external-store-shim.production.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\"use strict\";\nvar React = require(\"react\");\nfunction is(x, y) {\n  return (x === y && (0 !== x || 1 / x === 1 / y)) || (x !== x && y !== y);\n}\nvar objectIs = \"function\" === typeof Object.is ? Object.is : is,\n  useState = React.useState,\n  useEffect = React.useEffect,\n  useLayoutEffect = React.useLayoutEffect,\n  useDebugValue = React.useDebugValue;\nfunction useSyncExternalStore$2(subscribe, getSnapshot) {\n  var value = getSnapshot(),\n    _useState = useState({ inst: { value: value, getSnapshot: getSnapshot } }),\n    inst = _useState[0].inst,\n    forceUpdate = _useState[1];\n  useLayoutEffect(\n    function () {\n      inst.value = value;\n      inst.getSnapshot = getSnapshot;\n      checkIfSnapshotChanged(inst) && forceUpdate({ inst: inst });\n    },\n    [subscribe, value, getSnapshot]\n  );\n  useEffect(\n    function () {\n      checkIfSnapshotChanged(inst) && forceUpdate({ inst: inst });\n      return subscribe(function () {\n        checkIfSnapshotChanged(inst) && forceUpdate({ inst: inst });\n      });\n    },\n    [subscribe]\n  );\n  useDebugValue(value);\n  return value;\n}\nfunction checkIfSnapshotChanged(inst) {\n  var latestGetSnapshot = inst.getSnapshot;\n  inst = inst.value;\n  try {\n    var nextValue = latestGetSnapshot();\n    return !objectIs(inst, nextValue);\n  } catch (error) {\n    return !0;\n  }\n}\nfunction useSyncExternalStore$1(subscribe, getSnapshot) {\n  return getSnapshot();\n}\nvar shim =\n  \"undefined\" === typeof window ||\n  \"undefined\" === typeof window.document ||\n  \"undefined\" === typeof window.document.createElement\n    ? useSyncExternalStore$1\n    : useSyncExternalStore$2;\nexports.useSyncExternalStore =\n  void 0 !== React.useSyncExternalStore ? React.useSyncExternalStore : shim;\n", "/**\n * @license React\n * use-sync-external-store-shim.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\"use strict\";\n\"production\" !== process.env.NODE_ENV &&\n  (function () {\n    function is(x, y) {\n      return (x === y && (0 !== x || 1 / x === 1 / y)) || (x !== x && y !== y);\n    }\n    function useSyncExternalStore$2(subscribe, getSnapshot) {\n      didWarnOld18Alpha ||\n        void 0 === React.startTransition ||\n        ((didWarnOld18Alpha = !0),\n        console.error(\n          \"You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release.\"\n        ));\n      var value = getSnapshot();\n      if (!didWarnUncachedGetSnapshot) {\n        var cachedValue = getSnapshot();\n        objectIs(value, cachedValue) ||\n          (console.error(\n            \"The result of getSnapshot should be cached to avoid an infinite loop\"\n          ),\n          (didWarnUncachedGetSnapshot = !0));\n      }\n      cachedValue = useState({\n        inst: { value: value, getSnapshot: getSnapshot }\n      });\n      var inst = cachedValue[0].inst,\n        forceUpdate = cachedValue[1];\n      useLayoutEffect(\n        function () {\n          inst.value = value;\n          inst.getSnapshot = getSnapshot;\n          checkIfSnapshotChanged(inst) && forceUpdate({ inst: inst });\n        },\n        [subscribe, value, getSnapshot]\n      );\n      useEffect(\n        function () {\n          checkIfSnapshotChanged(inst) && forceUpdate({ inst: inst });\n          return subscribe(function () {\n            checkIfSnapshotChanged(inst) && forceUpdate({ inst: inst });\n          });\n        },\n        [subscribe]\n      );\n      useDebugValue(value);\n      return value;\n    }\n    function checkIfSnapshotChanged(inst) {\n      var latestGetSnapshot = inst.getSnapshot;\n      inst = inst.value;\n      try {\n        var nextValue = latestGetSnapshot();\n        return !objectIs(inst, nextValue);\n      } catch (error) {\n        return !0;\n      }\n    }\n    function useSyncExternalStore$1(subscribe, getSnapshot) {\n      return getSnapshot();\n    }\n    \"undefined\" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&\n      \"function\" ===\n        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart &&\n      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());\n    var React = require(\"react\"),\n      objectIs = \"function\" === typeof Object.is ? Object.is : is,\n      useState = React.useState,\n      useEffect = React.useEffect,\n      useLayoutEffect = React.useLayoutEffect,\n      useDebugValue = React.useDebugValue,\n      didWarnOld18Alpha = !1,\n      didWarnUncachedGetSnapshot = !1,\n      shim =\n        \"undefined\" === typeof window ||\n        \"undefined\" === typeof window.document ||\n        \"undefined\" === typeof window.document.createElement\n          ? useSyncExternalStore$1\n          : useSyncExternalStore$2;\n    exports.useSyncExternalStore =\n      void 0 !== React.useSyncExternalStore ? React.useSyncExternalStore : shim;\n    \"undefined\" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&\n      \"function\" ===\n        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&\n      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());\n  })();\n", "'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('../cjs/use-sync-external-store-shim.production.js');\n} else {\n  module.exports = require('../cjs/use-sync-external-store-shim.development.js');\n}\n", "import ProjectListSection from \"./pages/lists/projects-list\";\nimport WithValidToken from \"./pages/with-valid-token\";\n\nfunction Main() {\n  return (\n    <WithValidToken>\n      <ProjectListSection />\n    </WithValidToken>\n  );\n}\n\nexport default Main;\n", "import { ActionPanel, open, Icon, List, useNavigation, Action, showToast, Toast } from \"@raycast/api\";\nimport { Project, Team } from \"../../types\";\nimport fromNow from \"../../utils/time\";\nimport SearchBarAccessory from \"../search-projects/team-switch-search-accessory\";\nimport useVercel from \"../../hooks/use-vercel-info\";\nimport { getFetchProjectsURL } from \"../../vercel\";\nimport { useFetch } from \"@raycast/utils\";\nimport { FetchHeaders } from \"../../vercel\";\nimport InspectDeployment from \"../inspect-deployment\";\nimport DeploymentsList from \"./deployments-list\";\nimport EnvironmentVariables from \"./environment-variables-list\";\n\nconst ProjectListSection = () => {\n  const { selectedTeam, teams, user } = useVercel();\n  const url = getFetchProjectsURL(selectedTeam);\n\n  const {\n    isLoading,\n    data: projects,\n    revalidate,\n  } = useFetch(url, {\n    headers: FetchHeaders,\n    mapResult(result: { projects: Project[] }) {\n      return {\n        data: result.projects,\n      };\n    },\n    initialData: [],\n  });\n\n  const onTeamChange = () => {\n    revalidate();\n  };\n\n  const { push } = useNavigation();\n\n  return (\n    <List\n      searchBarPlaceholder=\"Search Projects...\"\n      navigationTitle=\"Results\"\n      isLoading={isLoading}\n      searchBarAccessory={<>{user && <SearchBarAccessory onTeamChange={onTeamChange} />}</>}\n    >\n      {projects.map((project) => (\n        <List.Item\n          key={project.id}\n          id={project.id}\n          title={project.name}\n          subtitle={project.framework ?? \"\"}\n          keywords={[project.framework || \"\"]}\n          actions={\n            <ActionPanel>\n              <Action.Push\n                title=\"Search Deployments\"\n                icon={Icon.MagnifyingGlass}\n                target={<DeploymentsList projectId={project.id} />}\n              />\n              <Action\n                title=\"Inspect Most Recent Deployment\"\n                icon={Icon.ArrowRight}\n                onAction={async () => {\n                  if (project.latestDeployments?.length) {\n                    push(\n                      <InspectDeployment\n                        username={user?.username}\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        deployment={project.latestDeployments[0] as any}\n                        selectedTeam={teams?.find((team: Team) => team.id === selectedTeam)}\n                      />,\n                    );\n                  } else {\n                    showToast({\n                      style: Toast.Style.Failure,\n                      title: \"No deployments found\",\n                    });\n                  }\n                }}\n              />\n              {!!project.latestDeployments?.length && (\n                <Action\n                  title=\"Visit Most Recent Deployment\"\n                  icon={Icon.Link}\n                  onAction={async () => {\n                    open(\"https://\" + project.latestDeployments?.[0].url || \"\");\n                  }}\n                />\n              )}\n              <Action\n                title=\"Inspect Environment Variables\"\n                icon={Icon.ArrowRight}\n                onAction={async () => {\n                  push(<EnvironmentVariables team={selectedTeam} project={project} />);\n                }}\n              />\n            </ActionPanel>\n          }\n          accessories={[\n            {\n              text:\n                project.latestDeployments?.length && project.latestDeployments[0].createdAt\n                  ? fromNow(project.latestDeployments[0].createdAt, new Date())\n                  : \"never\",\n              tooltip:\n                project.latestDeployments?.length && project.latestDeployments[0].createdAt\n                  ? new Date(project.latestDeployments[0].createdAt).toLocaleString()\n                  : \"\",\n            },\n          ]}\n        />\n      ))}\n    </List>\n  );\n};\n\nexport default ProjectListSection;\n", "// https://gist.github.com/brandonmcconnell/4a177fd6af7cffd4ca4808b3298b930c\n\nconst ordinalizeNumber = (n: number) => {\n  const rule = new Intl.PluralRules(\"en-US\", { type: \"ordinal\" }).select(n);\n  const suffix = (\n    {\n      one: \"st\",\n      two: \"nd\",\n      few: \"rd\",\n      other: \"th\",\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } as any\n  )[rule];\n  return `${n}${suffix}`;\n};\n\nconst getTimeSince = (\n  _fromDate: number | Date,\n  _toDate: number | Date,\n  dateStringCap: number | undefined = undefined,\n) => {\n  const throwError = () => {\n    throw new Error(\"getTimeSince requires 1-2 arguments, of type date or date-string\");\n  };\n  if (\n    typeof _fromDate === \"undefined\" ||\n    isNaN(Number(_fromDate)) ||\n    (typeof _toDate !== \"undefined\" && isNaN(Number(_toDate)))\n  )\n    throwError();\n  const toPresent = _toDate === undefined || Math.abs(Number(_toDate) - Number(new Date())) < 50;\n  const fromDate = Number(new Date(_fromDate));\n  const toDate = Number(_toDate === undefined ? new Date() : new Date(_toDate ?? null));\n  if (isNaN(fromDate) || isNaN(toDate)) throwError();\n\n  const formatTimeSince = new Intl.RelativeTimeFormat(\"en\", {\n    localeMatcher: \"best fit\",\n    style: \"long\",\n    numeric: \"auto\",\n  });\n\n  const diff = fromDate - toDate;\n\n  if (dateStringCap && !isNaN(dateStringCap) && Math.abs(diff) >= Number(dateStringCap)) {\n    const [weekday, month, dateNumStr, year] = new Date(fromDate)\n      .toLocaleString(\"en-us\", {\n        weekday: \"short\",\n        month: \"short\",\n        day: \"numeric\",\n        year: \"numeric\",\n      })\n      .replace(/,/g, \"\")\n      .split(\" \");\n\n    return `${weekday} ${month} ${ordinalizeNumber(Number(dateNumStr))}, ${year}`;\n  }\n\n  if (Math.abs(diff) < 1000) return toPresent ? \"now\" : \"simultaneously\";\n\n  for (const [unit, value] of [\n    [\"year\", 1000 * 60 * 60 * 24 * 365],\n    [\"month\", 1000 * 60 * 60 * 24 * 31],\n    [\"week\", 1000 * 60 * 60 * 24 * 7],\n    [\"day\", 1000 * 60 * 60 * 24],\n    [\"hour\", 1000 * 60 * 60],\n    [\"minute\", 1000 * 60],\n    [\"second\", 1000],\n  ] as const)\n    if (Math.abs(diff) >= value) {\n      const { sign, floor, ceil } = Math;\n      let result = formatTimeSince.format((sign(diff) === 1 ? floor : ceil)(diff / value), unit);\n      if (!toPresent)\n        result = Math.sign(diff) === 1 ? result.replace(\"in \", \"\") + \" later\" : result.replace(\"ago\", \"prior\");\n      return result;\n    }\n\n  return \"just now\";\n};\n\nexport default getTimeSince;\n", "import { List } from \"@raycast/api\";\nimport { Icon } from \"@raycast/api\";\nimport useVercel from \"../../hooks/use-vercel-info\";\nimport { Team } from \"../../types\";\n\nconst searchBarAccessory = ({ onTeamChange }: { onTeamChange: () => void }) => {\n  const { selectedTeam, teams, updateSelectedTeam } = useVercel();\n\n  const onChange = async (teamIdOrUsername: string) => {\n    if (!teamIdOrUsername) {\n      return;\n    }\n    await updateSelectedTeam(teamIdOrUsername);\n    onTeamChange();\n  };\n  const team = teams?.find((x: Team) => x.id === selectedTeam);\n  return (\n    <List.Dropdown value={selectedTeam} tooltip=\"Switch Team\" onChange={async (newValue) => await onChange(newValue)}>\n      {team && <List.Dropdown.Item title={team.name} value={team.id} icon={Icon.TwoPeople} />}\n      {teams?.length &&\n        teams\n          .filter((team: Team) => team.id !== selectedTeam)\n          .map((team: Team) => (\n            <List.Dropdown.Item key={team.id} title={team.name} value={team.id} icon={Icon.TwoPeople} />\n          ))}\n    </List.Dropdown>\n  );\n};\n\nexport default searchBarAccessory;\n", "import { useEffect } from \"react\";\nimport { LocalStorage } from \"@raycast/api\";\nimport { Team, User } from \"../types\";\nimport { fetchUser, fetchTeams } from \"../vercel\";\nimport useSharedState from \"./use-shared-state\";\n\nconst useVercel = () => {\n  /* Establishing state:\n   * user -- used for filtering deployments by user and displaying account information\n   * selectedTeam - used for filtering deployments by team\n   * teams -- used for filtering projects\n   */\n  const [user, setUser] = useSharedState<User>(\"user\");\n  const [teams, setTeams] = useSharedState<Team[]>(\"teams\");\n  const [selectedTeamId, setSelectedTeamId] = useSharedState<string>(\"selectedTeamId\");\n\n  /*\n   * Populate user, projects, and teams\n   */\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!user || !teams) {\n        const selectedTeamId = await LocalStorage.getItem<string>(\"selectedTeamId\");\n        if (selectedTeamId) {\n          setSelectedTeamId(selectedTeamId);\n        }\n        const [fetchedUser, fetchedTeams] = await Promise.all([fetchUser(), fetchTeams()]);\n\n        setUser(fetchedUser);\n        setTeams(fetchedTeams);\n\n        if (selectedTeamId) {\n          const selectedTeam = fetchedTeams.find((team) => team.id === selectedTeamId);\n          if (!selectedTeam) {\n            setSelectedTeamId(undefined);\n          }\n        }\n      }\n    };\n    fetchData();\n  }, []);\n\n  const updateSelectedTeam = async (teamIdOrUsername: string) => {\n    const teamIfExists = teams?.find((team: Team) => team.id === teamIdOrUsername);\n    if (teamIfExists) {\n      setSelectedTeamId(teamIfExists.id);\n      await LocalStorage.setItem(\"selectedTeamId\", teamIfExists.id);\n    } else {\n      setSelectedTeamId(undefined);\n      await LocalStorage.removeItem(\"selectedTeamId\");\n    }\n  };\n\n  return {\n    user,\n    selectedTeam: selectedTeamId,\n    teams,\n    updateSelectedTeam,\n  };\n};\n\nexport default useVercel;\n", "import { environment, getPreferenceValues, showToast, Toast } from \"@raycast/api\";\nimport type {\n  Team,\n  Deployment,\n  Project,\n  Environment,\n  User,\n  CreateEnvironmentVariableResponse,\n  Build,\n  Pagination,\n  CreateEnvironment,\n  Domain,\n} from \"./types\";\n\nexport const token = getPreferenceValues().accessToken;\nconst headers = {\n  Authorization: \"Bearer \" + token,\n};\n\nexport const FetchHeaders = Object.entries(headers);\n\nconst apiURL = \"https://api.vercel.com/\";\n\n// Fetch the username that belongs to the token given.\n// Use for filtering deployments by user and providing links later on\nexport async function fetchUser(): Promise<User> {\n  try {\n    const response = await fetch(apiURL + \"www/user\", {\n      method: \"get\",\n      headers: headers,\n    });\n\n    const json = (await response.json()) as { user: User };\n\n    return json.user;\n  } catch (err) {\n    console.error(err);\n    showToast({\n      style: Toast.Style.Failure,\n      title: \"Failed to fetch user info\",\n    });\n    throw new Error(\"Failed to fetch user info\");\n  }\n}\n\n/*\n * Fetch all teams for user\n */\nexport async function fetchTeams(): Promise<Team[]> {\n  const response = await fetch(apiURL + \"v1/teams\", {\n    method: \"get\",\n    headers: headers,\n  });\n  const json = (await response.json()) as { teams: Team[] };\n  const teams: Team[] = [];\n  for (const team of json.teams) {\n    teams.push(team);\n  }\n  return teams;\n}\n\nexport async function deleteProjectById(projectId: Project[\"id\"], teamId?: Team[\"id\"]) {\n  try {\n    const response = await fetch(apiURL + `v8/projects/${projectId}?teamId=${teamId ?? \"\"}`, {\n      method: \"delete\",\n      headers: headers,\n    });\n    const json = (await response.json()) as { project: Project };\n    return json.project;\n  } catch (e) {\n    console.error(e);\n    showToast({\n      style: Toast.Style.Failure,\n      title: \"Failed to delete project\",\n    });\n    throw new Error(\"Failed to delete project\");\n  }\n}\n\nexport async function deleteEnvironmentVariableById(\n  projectId: Project[\"id\"],\n  envId: Environment[\"id\"],\n): Promise<Environment> {\n  try {\n    const response = await fetch(apiURL + `v8/projects/${projectId}/env/${envId}`, {\n      method: \"delete\",\n      headers: headers,\n    });\n    const json = (await response.json()) as { environment: Environment };\n    return json.environment;\n  } catch (e) {\n    console.error(e);\n    showToast({\n      style: Toast.Style.Failure,\n      title: \"Failed to delete environment variable\",\n    });\n    throw new Error(\"Failed to delete environment variable\");\n  }\n}\n\nexport function getFetchDeploymentsURL(teamId?: string, projectId?: string, limit = 100) {\n  const url = apiURL + `v6/deployments`;\n\n  let query = `?limit=${limit}&teamId=${teamId ?? \"\"}`;\n  if (projectId) {\n    query += `&projectId=${projectId}`;\n  }\n\n  return url + query;\n}\n\nexport async function fetchDeployments(teamId?: string, limit = 100, maxToFetch = 300) {\n  try {\n    const fetchURL = getFetchDeploymentsURL(teamId, undefined, limit);\n    const response = await fetch(fetchURL, {\n      method: \"get\",\n      headers: headers,\n    });\n    const json = (await response.json()) as { deployments: Deployment[]; pagination: Pagination };\n\n    // eslint-disable-next-line prefer-const\n    let { deployments, pagination } = json;\n\n    while (pagination?.next && deployments.length < maxToFetch) {\n      const next = await fetch(fetchURL + \"&until=\" + pagination.next, {\n        method: \"get\",\n        headers: headers,\n      });\n      const nextJson = (await next.json()) as { deployments: Deployment[]; pagination: Pagination };\n      pagination = nextJson.pagination;\n      json.deployments.push(...nextJson.deployments);\n    }\n\n    return json.deployments;\n  } catch (err) {\n    console.error(err);\n    showToast({\n      style: Toast.Style.Failure,\n      title: \"Failed to fetch deployments\",\n    });\n    throw new Error(\"Failed to fetch deployments\");\n  }\n}\n\nexport function getFetchDeploymentBuildsURL(\n  deploymentId: Deployment[\"uid\"] | string,\n  teamId?: Team[\"id\"],\n  limit = 100,\n) {\n  return apiURL + `v11/deployments/${deploymentId}/builds?limit=${limit}&teamId=${teamId ?? \"\"}`;\n}\n\nexport async function fetchDeploymentBuildsByDeploymentId(deploymentId: string, teamId?: string, limit?: number) {\n  try {\n    const response = await fetch(getFetchDeploymentBuildsURL(deploymentId, teamId, limit), {\n      method: \"get\",\n      headers: headers,\n    });\n    const json = (await response.json()) as { builds: Build[] };\n    return json.builds;\n  } catch (err) {\n    console.error(err);\n    showToast({\n      style: Toast.Style.Failure,\n      title: \"Failed to fetch deployment builds\",\n    });\n    throw new Error(\"Failed to fetch deployment builds\");\n  }\n}\n\n// Fetch project environment variable\nexport async function fetchEnvironmentVariables(projectId: string, teamId?: string): Promise<Environment[]> {\n  const environmentVariables: Environment[] = [...(await _rawFetchProjectEnvironmentVariables(projectId, teamId))];\n  return environmentVariables.sort((a, b) => b.updatedAt - a.updatedAt);\n}\n\nexport function getFetchProjectsURL(teamId?: string, limit = 100) {\n  return apiURL + `v8/projects?teamId=${teamId ?? \"\"}&limit=${limit}`;\n}\n\nexport async function fetchProjects(teamId?: string, limit = 100): Promise<Project[]> {\n  const response = await fetch(getFetchProjectsURL(teamId, limit), {\n    method: \"get\",\n    headers: headers,\n  });\n  const json = (await response.json()) as { projects: Project[] };\n  return json.projects;\n}\n\n// Raw function for fetching project environment variable\nasync function _rawFetchProjectEnvironmentVariables(projectId: string, teamId?: string): Promise<Environment[]> {\n  try {\n    const response = await fetch(apiURL + `v8/projects/${projectId}/env?teamId=${teamId ?? \"\"}`, {\n      method: \"get\",\n      headers: headers,\n    });\n    const json = (await response.json()) as { envs: Environment[] };\n\n    return json.envs;\n  } catch (err) {\n    console.error(err);\n    showToast({\n      style: Toast.Style.Failure,\n      title: \"Failed to fetch environment variable\",\n    });\n    throw new Error(\"Failed to fetch environment variable\");\n  }\n}\n\n// Update project environment variable\nexport async function updateEnvironmentVariable(\n  projectId: Project[\"id\"],\n  envId: Environment[\"id\"],\n  envVar: Partial<Environment>,\n): Promise<Environment> {\n  const environmentVariable: Environment = await _rawUpdateProjectEnvironmentVariable(projectId, envId, envVar);\n  return environmentVariable;\n}\n\n// TODO: use Omit<>\nexport async function createEnvironmentVariable(\n  projectId: Project[\"id\"],\n  envVar: CreateEnvironment,\n  teamId?: Team[\"id\"],\n): Promise<CreateEnvironmentVariableResponse> {\n  envVar[\"type\"] = \"encrypted\";\n\n  try {\n    const response = await fetch(apiURL + `v9/projects/${projectId}/env?teamId=${teamId ? teamId : \"\"}`, {\n      method: \"post\",\n      headers: headers,\n      body: JSON.stringify(envVar),\n    });\n    const json = (await response.json()) as CreateEnvironmentVariableResponse;\n    return json;\n  } catch (e) {\n    console.error(e);\n    showToast({\n      style: Toast.Style.Failure,\n      title: \"Failed to create environment variable\",\n    });\n    throw new Error(\"Failed to create environment variable\");\n  }\n}\n\nasync function _rawUpdateProjectEnvironmentVariable(\n  projectId: Project[\"id\"],\n  envId: Environment[\"id\"],\n  envVar: Partial<Environment>,\n): Promise<Environment> {\n  try {\n    const response = await fetch(apiURL + `v8/projects/${projectId}/env/${envId}`, {\n      method: \"patch\",\n      headers: headers,\n      body: JSON.stringify(envVar),\n    });\n    const environmentVariable = (await response.json()) as Environment;\n    return environmentVariable;\n  } catch (err) {\n    console.error(err);\n    showToast({\n      style: Toast.Style.Failure,\n      title: \"Failed to fetch environment variable\",\n    });\n    throw new Error(\"Failed to fetch environment variable\");\n  }\n}\n\nfunction arrayBufferToBase64(buffer: ArrayBuffer) {\n  let binary = \"\";\n  const bytes = [].slice.call(new Uint8Array(buffer));\n\n  bytes.forEach((b) => (binary += String.fromCharCode(b)));\n\n  return btoa(binary);\n}\n\nexport async function getScreenshotImageURL(deploymentId: Deployment[\"uid\"], teamId?: string) {\n  try {\n    const theme = environment.appearance === \"light\" ? \"0\" : \"1\";\n    const response = await fetch(\n      `https://vercel.com/api/screenshot?dark=${theme}&deploymentId=${deploymentId}&withStatus=false&teamId=${teamId ?? \"\"}`,\n      {\n        method: \"get\",\n        headers: headers,\n      },\n    );\n\n    if (response.status !== 200) {\n      return null;\n    }\n\n    const arrayBuffer = await response.arrayBuffer();\n    const base64Flag = \"data:image/png;base64,\";\n    const imageStr = base64Flag + arrayBufferToBase64(arrayBuffer);\n    return imageStr;\n  } catch (e) {\n    console.error(e);\n    return null;\n  }\n}\n\nexport function getDeploymentURL(userOrTeamSlug: string, projectName: string, deploymentId: Deployment[\"uid\"]) {\n  if (deploymentId.startsWith(\"dpl_\")) {\n    deploymentId = deploymentId.substring(4);\n  }\n\n  return `https://vercel.com/${userOrTeamSlug}/${projectName}/${deploymentId}`;\n}\n\nexport function getFetchDomainsURL(teamId?: string, limit = 100) {\n  return apiURL + `v5/domains?teamId=${teamId ?? \"\"}&limit=${limit}`;\n}\n\nexport async function fetchDomains(teamId?: string, limit = 100) {\n  const response = await fetch(getFetchDomainsURL(teamId, limit), {\n    method: \"get\",\n    headers: headers,\n  });\n  const json = (await response.json()) as { domains: Domain[] };\n  return json.domains;\n}\n\nexport async function checkDomainAvailability(domain: string) {\n  const response = await fetch(apiURL + `v4/domains/status?name=${domain}`, {\n    method: \"get\",\n    headers: headers,\n  });\n  const json = (await response.json()) as { available: string; error?: { code: string; message: string } };\n  if (json.error) {\n    return \"Check domain availability failed. Please verify that the domain is valid or try again later.\";\n  }\n  return json.available;\n}\n", "import React, { useRef, useMemo, useCallback, useDebugValue } from 'react';\nimport { useSyncExternalStore } from 'use-sync-external-store/shim/index.js';\nimport { OBJECT as OBJECT$1, SWRConfig as SWRConfig$1, defaultConfig, withArgs, SWRGlobalState, serialize as serialize$1, createCacheHelper, isUndefined as isUndefined$1, UNDEFINED as UNDEFINED$1, isPromiseLike, getTimestamp, isFunction as isFunction$1, revalidateEvents, internalMutate, useIsomorphicLayoutEffect, subscribeCallback, IS_SERVER, rAF, IS_REACT_LEGACY, mergeObjects } from '../_internal/index.mjs';\nexport { mutate, preload, useSWRConfig } from '../_internal/index.mjs';\n\n// Shared state between server components and client components\nconst noop = ()=>{};\n// Using noop() as the undefined value as undefined can be replaced\n// by something else. Prettier ignore and extra parentheses are necessary here\n// to ensure that tsc doesn't remove the __NOINLINE__ comment.\n// prettier-ignore\nconst UNDEFINED = /*#__NOINLINE__*/ noop();\nconst OBJECT = Object;\nconst isUndefined = (v)=>v === UNDEFINED;\nconst isFunction = (v)=>typeof v == 'function';\n\n// use WeakMap to store the object->key mapping\n// so the objects can be garbage collected.\n// WeakMap uses a hashtable under the hood, so the lookup\n// complexity is almost O(1).\nconst table = new WeakMap();\nconst getTypeName = (value)=>OBJECT.prototype.toString.call(value);\nconst isObjectTypeName = (typeName, type)=>typeName === `[object ${type}]`;\n// counter of the key\nlet counter = 0;\n// A stable hash implementation that supports:\n// - Fast and ensures unique hash properties\n// - Handles unserializable values\n// - Handles object key ordering\n// - Generates short results\n//\n// This is not a serialization function, and the result is not guaranteed to be\n// parsable.\nconst stableHash = (arg)=>{\n    const type = typeof arg;\n    const typeName = getTypeName(arg);\n    const isDate = isObjectTypeName(typeName, 'Date');\n    const isRegex = isObjectTypeName(typeName, 'RegExp');\n    const isPlainObject = isObjectTypeName(typeName, 'Object');\n    let result;\n    let index;\n    if (OBJECT(arg) === arg && !isDate && !isRegex) {\n        // Object/function, not null/date/regexp. Use WeakMap to store the id first.\n        // If it's already hashed, directly return the result.\n        result = table.get(arg);\n        if (result) return result;\n        // Store the hash first for circular reference detection before entering the\n        // recursive `stableHash` calls.\n        // For other objects like set and map, we use this id directly as the hash.\n        result = ++counter + '~';\n        table.set(arg, result);\n        if (Array.isArray(arg)) {\n            // Array.\n            result = '@';\n            for(index = 0; index < arg.length; index++){\n                result += stableHash(arg[index]) + ',';\n            }\n            table.set(arg, result);\n        }\n        if (isPlainObject) {\n            // Object, sort keys.\n            result = '#';\n            const keys = OBJECT.keys(arg).sort();\n            while(!isUndefined(index = keys.pop())){\n                if (!isUndefined(arg[index])) {\n                    result += index + ':' + stableHash(arg[index]) + ',';\n                }\n            }\n            table.set(arg, result);\n        }\n    } else {\n        result = isDate ? arg.toJSON() : type == 'symbol' ? arg.toString() : type == 'string' ? JSON.stringify(arg) : '' + arg;\n    }\n    return result;\n};\n\nconst serialize = (key)=>{\n    if (isFunction(key)) {\n        try {\n            key = key();\n        } catch (err) {\n            // dependencies not ready\n            key = '';\n        }\n    }\n    // Use the original key as the argument of fetcher. This can be a string or an\n    // array of values.\n    const args = key;\n    // If key is not falsy, or not an empty array, hash it.\n    key = typeof key == 'string' ? key : (Array.isArray(key) ? key.length : key) ? stableHash(key) : '';\n    return [\n        key,\n        args\n    ];\n};\n\nconst unstable_serialize = (key)=>serialize(key)[0];\n\n/// <reference types=\"react/experimental\" />\nconst use = React.use || // This extra generic is to avoid TypeScript mixing up the generic and JSX sytax\n// and emitting an error.\n// We assume that this is only for the `use(thenable)` case, not `use(context)`.\n// https://github.com/facebook/react/blob/aed00dacfb79d17c53218404c52b1c7aa59c4a89/packages/react-server/src/ReactFizzThenable.js#L45\n((thenable)=>{\n    switch(thenable.status){\n        case 'pending':\n            throw thenable;\n        case 'fulfilled':\n            return thenable.value;\n        case 'rejected':\n            throw thenable.reason;\n        default:\n            thenable.status = 'pending';\n            thenable.then((v)=>{\n                thenable.status = 'fulfilled';\n                thenable.value = v;\n            }, (e)=>{\n                thenable.status = 'rejected';\n                thenable.reason = e;\n            });\n            throw thenable;\n    }\n});\nconst WITH_DEDUPE = {\n    dedupe: true\n};\nconst useSWRHandler = (_key, fetcher, config)=>{\n    const { cache, compare, suspense, fallbackData, revalidateOnMount, revalidateIfStale, refreshInterval, refreshWhenHidden, refreshWhenOffline, keepPreviousData } = config;\n    const [EVENT_REVALIDATORS, MUTATION, FETCH, PRELOAD] = SWRGlobalState.get(cache);\n    // `key` is the identifier of the SWR internal state,\n    // `fnArg` is the argument/arguments parsed from the key, which will be passed\n    // to the fetcher.\n    // All of them are derived from `_key`.\n    const [key, fnArg] = serialize$1(_key);\n    // If it's the initial render of this hook.\n    const initialMountedRef = useRef(false);\n    // If the hook is unmounted already. This will be used to prevent some effects\n    // to be called after unmounting.\n    const unmountedRef = useRef(false);\n    // Refs to keep the key and config.\n    const keyRef = useRef(key);\n    const fetcherRef = useRef(fetcher);\n    const configRef = useRef(config);\n    const getConfig = ()=>configRef.current;\n    const isActive = ()=>getConfig().isVisible() && getConfig().isOnline();\n    const [getCache, setCache, subscribeCache, getInitialCache] = createCacheHelper(cache, key);\n    const stateDependencies = useRef({}).current;\n    // Resolve the fallback data from either the inline option, or the global provider.\n    // If it's a promise, we simply let React suspend and resolve it for us.\n    const fallback = isUndefined$1(fallbackData) ? isUndefined$1(config.fallback) ? UNDEFINED$1 : config.fallback[key] : fallbackData;\n    const isEqual = (prev, current)=>{\n        for(const _ in stateDependencies){\n            const t = _;\n            if (t === 'data') {\n                if (!compare(prev[t], current[t])) {\n                    if (!isUndefined$1(prev[t])) {\n                        return false;\n                    }\n                    if (!compare(returnedData, current[t])) {\n                        return false;\n                    }\n                }\n            } else {\n                if (current[t] !== prev[t]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    };\n    const getSnapshot = useMemo(()=>{\n        const shouldStartRequest = (()=>{\n            if (!key) return false;\n            if (!fetcher) return false;\n            // If `revalidateOnMount` is set, we take the value directly.\n            if (!isUndefined$1(revalidateOnMount)) return revalidateOnMount;\n            // If it's paused, we skip revalidation.\n            if (getConfig().isPaused()) return false;\n            if (suspense) return false;\n            return revalidateIfStale !== false;\n        })();\n        // Get the cache and merge it with expected states.\n        const getSelectedCache = (state)=>{\n            // We only select the needed fields from the state.\n            const snapshot = mergeObjects(state);\n            delete snapshot._k;\n            if (!shouldStartRequest) {\n                return snapshot;\n            }\n            return {\n                isValidating: true,\n                isLoading: true,\n                ...snapshot\n            };\n        };\n        const cachedData = getCache();\n        const initialData = getInitialCache();\n        const clientSnapshot = getSelectedCache(cachedData);\n        const serverSnapshot = cachedData === initialData ? clientSnapshot : getSelectedCache(initialData);\n        // To make sure that we are returning the same object reference to avoid\n        // unnecessary re-renders, we keep the previous snapshot and use deep\n        // comparison to check if we need to return a new one.\n        let memorizedSnapshot = clientSnapshot;\n        return [\n            ()=>{\n                const newSnapshot = getSelectedCache(getCache());\n                const compareResult = isEqual(newSnapshot, memorizedSnapshot);\n                if (compareResult) {\n                    // Mentally, we should always return the `memorizedSnapshot` here\n                    // as there's no change between the new and old snapshots.\n                    // However, since the `isEqual` function only compares selected fields,\n                    // the values of the unselected fields might be changed. That's\n                    // simply because we didn't track them.\n                    // To support the case in https://github.com/vercel/swr/pull/2576,\n                    // we need to update these fields in the `memorizedSnapshot` too\n                    // with direct mutations to ensure the snapshot is always up-to-date\n                    // even for the unselected fields, but only trigger re-renders when\n                    // the selected fields are changed.\n                    memorizedSnapshot.data = newSnapshot.data;\n                    memorizedSnapshot.isLoading = newSnapshot.isLoading;\n                    memorizedSnapshot.isValidating = newSnapshot.isValidating;\n                    memorizedSnapshot.error = newSnapshot.error;\n                    return memorizedSnapshot;\n                } else {\n                    memorizedSnapshot = newSnapshot;\n                    return newSnapshot;\n                }\n            },\n            ()=>serverSnapshot\n        ];\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        cache,\n        key\n    ]);\n    // Get the current state that SWR should return.\n    const cached = useSyncExternalStore(useCallback((callback)=>subscribeCache(key, (current, prev)=>{\n            if (!isEqual(prev, current)) callback();\n        }), // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        cache,\n        key\n    ]), getSnapshot[0], getSnapshot[1]);\n    const isInitialMount = !initialMountedRef.current;\n    const hasRevalidator = EVENT_REVALIDATORS[key] && EVENT_REVALIDATORS[key].length > 0;\n    const cachedData = cached.data;\n    const data = isUndefined$1(cachedData) ? fallback && isPromiseLike(fallback) ? use(fallback) : fallback : cachedData;\n    const error = cached.error;\n    // Use a ref to store previously returned data. Use the initial data as its initial value.\n    const laggyDataRef = useRef(data);\n    const returnedData = keepPreviousData ? isUndefined$1(cachedData) ? isUndefined$1(laggyDataRef.current) ? data : laggyDataRef.current : cachedData : data;\n    // - Suspense mode and there's stale data for the initial render.\n    // - Not suspense mode and there is no fallback data and `revalidateIfStale` is enabled.\n    // - `revalidateIfStale` is enabled but `data` is not defined.\n    const shouldDoInitialRevalidation = (()=>{\n        // if a key already has revalidators and also has error, we should not trigger revalidation\n        if (hasRevalidator && !isUndefined$1(error)) return false;\n        // If `revalidateOnMount` is set, we take the value directly.\n        if (isInitialMount && !isUndefined$1(revalidateOnMount)) return revalidateOnMount;\n        // If it's paused, we skip revalidation.\n        if (getConfig().isPaused()) return false;\n        // Under suspense mode, it will always fetch on render if there is no\n        // stale data so no need to revalidate immediately mount it again.\n        // If data exists, only revalidate if `revalidateIfStale` is true.\n        if (suspense) return isUndefined$1(data) ? false : revalidateIfStale;\n        // If there is no stale data, we need to revalidate when mount;\n        // If `revalidateIfStale` is set to true, we will always revalidate.\n        return isUndefined$1(data) || revalidateIfStale;\n    })();\n    // Resolve the default validating state:\n    // If it's able to validate, and it should revalidate when mount, this will be true.\n    const defaultValidatingState = !!(key && fetcher && isInitialMount && shouldDoInitialRevalidation);\n    const isValidating = isUndefined$1(cached.isValidating) ? defaultValidatingState : cached.isValidating;\n    const isLoading = isUndefined$1(cached.isLoading) ? defaultValidatingState : cached.isLoading;\n    // The revalidation function is a carefully crafted wrapper of the original\n    // `fetcher`, to correctly handle the many edge cases.\n    const revalidate = useCallback(async (revalidateOpts)=>{\n        const currentFetcher = fetcherRef.current;\n        if (!key || !currentFetcher || unmountedRef.current || getConfig().isPaused()) {\n            return false;\n        }\n        let newData;\n        let startAt;\n        let loading = true;\n        const opts = revalidateOpts || {};\n        // If there is no ongoing concurrent request, or `dedupe` is not set, a\n        // new request should be initiated.\n        const shouldStartNewRequest = !FETCH[key] || !opts.dedupe;\n        /*\n         For React 17\n         Do unmount check for calls:\n         If key has changed during the revalidation, or the component has been\n         unmounted, old dispatch and old event callbacks should not take any\n         effect\n\n        For React 18\n        only check if key has changed\n        https://github.com/reactwg/react-18/discussions/82\n      */ const callbackSafeguard = ()=>{\n            if (IS_REACT_LEGACY) {\n                return !unmountedRef.current && key === keyRef.current && initialMountedRef.current;\n            }\n            return key === keyRef.current;\n        };\n        // The final state object when the request finishes.\n        const finalState = {\n            isValidating: false,\n            isLoading: false\n        };\n        const finishRequestAndUpdateState = ()=>{\n            setCache(finalState);\n        };\n        const cleanupState = ()=>{\n            // Check if it's still the same request before deleting it.\n            const requestInfo = FETCH[key];\n            if (requestInfo && requestInfo[1] === startAt) {\n                delete FETCH[key];\n            }\n        };\n        // Start fetching. Change the `isValidating` state, update the cache.\n        const initialState = {\n            isValidating: true\n        };\n        // It is in the `isLoading` state, if and only if there is no cached data.\n        // This bypasses fallback data and laggy data.\n        if (isUndefined$1(getCache().data)) {\n            initialState.isLoading = true;\n        }\n        try {\n            if (shouldStartNewRequest) {\n                setCache(initialState);\n                // If no cache is being rendered currently (it shows a blank page),\n                // we trigger the loading slow event.\n                if (config.loadingTimeout && isUndefined$1(getCache().data)) {\n                    setTimeout(()=>{\n                        if (loading && callbackSafeguard()) {\n                            getConfig().onLoadingSlow(key, config);\n                        }\n                    }, config.loadingTimeout);\n                }\n                // Start the request and save the timestamp.\n                // Key must be truthy if entering here.\n                FETCH[key] = [\n                    currentFetcher(fnArg),\n                    getTimestamp()\n                ];\n            }\n            // Wait until the ongoing request is done. Deduplication is also\n            // considered here.\n            ;\n            [newData, startAt] = FETCH[key];\n            newData = await newData;\n            if (shouldStartNewRequest) {\n                // If the request isn't interrupted, clean it up after the\n                // deduplication interval.\n                setTimeout(cleanupState, config.dedupingInterval);\n            }\n            // If there're other ongoing request(s), started after the current one,\n            // we need to ignore the current one to avoid possible race conditions:\n            //   req1------------------>res1        (current one)\n            //        req2---------------->res2\n            // the request that fired later will always be kept.\n            // The timestamp maybe be `undefined` or a number\n            if (!FETCH[key] || FETCH[key][1] !== startAt) {\n                if (shouldStartNewRequest) {\n                    if (callbackSafeguard()) {\n                        getConfig().onDiscarded(key);\n                    }\n                }\n                return false;\n            }\n            // Clear error.\n            finalState.error = UNDEFINED$1;\n            // If there're other mutations(s), that overlapped with the current revalidation:\n            // case 1:\n            //   req------------------>res\n            //       mutate------>end\n            // case 2:\n            //         req------------>res\n            //   mutate------>end\n            // case 3:\n            //   req------------------>res\n            //       mutate-------...---------->\n            // we have to ignore the revalidation result (res) because it's no longer fresh.\n            // meanwhile, a new revalidation should be triggered when the mutation ends.\n            const mutationInfo = MUTATION[key];\n            if (!isUndefined$1(mutationInfo) && // case 1\n            (startAt <= mutationInfo[0] || // case 2\n            startAt <= mutationInfo[1] || // case 3\n            mutationInfo[1] === 0)) {\n                finishRequestAndUpdateState();\n                if (shouldStartNewRequest) {\n                    if (callbackSafeguard()) {\n                        getConfig().onDiscarded(key);\n                    }\n                }\n                return false;\n            }\n            // Deep compare with the latest state to avoid extra re-renders.\n            // For local state, compare and assign.\n            const cacheData = getCache().data;\n            // Since the compare fn could be custom fn\n            // cacheData might be different from newData even when compare fn returns True\n            finalState.data = compare(cacheData, newData) ? cacheData : newData;\n            // Trigger the successful callback if it's the original request.\n            if (shouldStartNewRequest) {\n                if (callbackSafeguard()) {\n                    getConfig().onSuccess(newData, key, config);\n                }\n            }\n        } catch (err) {\n            cleanupState();\n            const currentConfig = getConfig();\n            const { shouldRetryOnError } = currentConfig;\n            // Not paused, we continue handling the error. Otherwise, discard it.\n            if (!currentConfig.isPaused()) {\n                // Get a new error, don't use deep comparison for errors.\n                finalState.error = err;\n                // Error event and retry logic. Only for the actual request, not\n                // deduped ones.\n                if (shouldStartNewRequest && callbackSafeguard()) {\n                    currentConfig.onError(err, key, currentConfig);\n                    if (shouldRetryOnError === true || isFunction$1(shouldRetryOnError) && shouldRetryOnError(err)) {\n                        if (!getConfig().revalidateOnFocus || !getConfig().revalidateOnReconnect || isActive()) {\n                            // If it's inactive, stop. It will auto-revalidate when\n                            // refocusing or reconnecting.\n                            // When retrying, deduplication is always enabled.\n                            currentConfig.onErrorRetry(err, key, currentConfig, (_opts)=>{\n                                const revalidators = EVENT_REVALIDATORS[key];\n                                if (revalidators && revalidators[0]) {\n                                    revalidators[0](revalidateEvents.ERROR_REVALIDATE_EVENT, _opts);\n                                }\n                            }, {\n                                retryCount: (opts.retryCount || 0) + 1,\n                                dedupe: true\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        // Mark loading as stopped.\n        loading = false;\n        // Update the current hook's state.\n        finishRequestAndUpdateState();\n        return true;\n    }, // `setState` is immutable, and `eventsCallback`, `fnArg`, and\n    // `keyValidating` are depending on `key`, so we can exclude them from\n    // the deps array.\n    //\n    // FIXME:\n    // `fn` and `config` might be changed during the lifecycle,\n    // but they might be changed every render like this.\n    // `useSWR('key', () => fetch('/api/'), { suspense: true })`\n    // So we omit the values from the deps array\n    // even though it might cause unexpected behaviors.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        key,\n        cache\n    ]);\n    // Similar to the global mutate but bound to the current cache and key.\n    // `cache` isn't allowed to change during the lifecycle.\n    const boundMutate = useCallback(// Use callback to make sure `keyRef.current` returns latest result every time\n    (...args)=>{\n        return internalMutate(cache, keyRef.current, ...args);\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\n    []);\n    // The logic for updating refs.\n    useIsomorphicLayoutEffect(()=>{\n        fetcherRef.current = fetcher;\n        configRef.current = config;\n        // Handle laggy data updates. If there's cached data of the current key,\n        // it'll be the correct reference.\n        if (!isUndefined$1(cachedData)) {\n            laggyDataRef.current = cachedData;\n        }\n    });\n    // After mounted or key changed.\n    useIsomorphicLayoutEffect(()=>{\n        if (!key) return;\n        const softRevalidate = revalidate.bind(UNDEFINED$1, WITH_DEDUPE);\n        let nextFocusRevalidatedAt = 0;\n        if (getConfig().revalidateOnFocus) {\n            const initNow = Date.now();\n            nextFocusRevalidatedAt = initNow + getConfig().focusThrottleInterval;\n        }\n        // Expose revalidators to global event listeners. So we can trigger\n        // revalidation from the outside.\n        const onRevalidate = (type, opts = {})=>{\n            if (type == revalidateEvents.FOCUS_EVENT) {\n                const now = Date.now();\n                if (getConfig().revalidateOnFocus && now > nextFocusRevalidatedAt && isActive()) {\n                    nextFocusRevalidatedAt = now + getConfig().focusThrottleInterval;\n                    softRevalidate();\n                }\n            } else if (type == revalidateEvents.RECONNECT_EVENT) {\n                if (getConfig().revalidateOnReconnect && isActive()) {\n                    softRevalidate();\n                }\n            } else if (type == revalidateEvents.MUTATE_EVENT) {\n                return revalidate();\n            } else if (type == revalidateEvents.ERROR_REVALIDATE_EVENT) {\n                return revalidate(opts);\n            }\n            return;\n        };\n        const unsubEvents = subscribeCallback(key, EVENT_REVALIDATORS, onRevalidate);\n        // Mark the component as mounted and update corresponding refs.\n        unmountedRef.current = false;\n        keyRef.current = key;\n        initialMountedRef.current = true;\n        // Keep the original key in the cache.\n        setCache({\n            _k: fnArg\n        });\n        // Trigger a revalidation\n        if (shouldDoInitialRevalidation) {\n            // Performance optimization: if a request is already in progress for this key,\n            // skip the revalidation to avoid redundant work\n            if (!FETCH[key]) {\n                if (isUndefined$1(data) || IS_SERVER) {\n                    // Revalidate immediately.\n                    softRevalidate();\n                } else {\n                    // Delay the revalidate if we have data to return so we won't block\n                    // rendering.\n                    rAF(softRevalidate);\n                }\n            }\n        }\n        return ()=>{\n            // Mark it as unmounted.\n            unmountedRef.current = true;\n            unsubEvents();\n        };\n    }, [\n        key\n    ]);\n    // Polling\n    useIsomorphicLayoutEffect(()=>{\n        let timer;\n        function next() {\n            // Use the passed interval\n            // ...or invoke the function with the updated data to get the interval\n            const interval = isFunction$1(refreshInterval) ? refreshInterval(getCache().data) : refreshInterval;\n            // We only start the next interval if `refreshInterval` is not 0, and:\n            // - `force` is true, which is the start of polling\n            // - or `timer` is not 0, which means the effect wasn't canceled\n            if (interval && timer !== -1) {\n                timer = setTimeout(execute, interval);\n            }\n        }\n        function execute() {\n            // Check if it's OK to execute:\n            // Only revalidate when the page is visible, online, and not errored.\n            if (!getCache().error && (refreshWhenHidden || getConfig().isVisible()) && (refreshWhenOffline || getConfig().isOnline())) {\n                revalidate(WITH_DEDUPE).then(next);\n            } else {\n                // Schedule the next interval to check again.\n                next();\n            }\n        }\n        next();\n        return ()=>{\n            if (timer) {\n                clearTimeout(timer);\n                timer = -1;\n            }\n        };\n    }, [\n        refreshInterval,\n        refreshWhenHidden,\n        refreshWhenOffline,\n        key\n    ]);\n    // Display debug info in React DevTools.\n    useDebugValue(returnedData);\n    // In Suspense mode, we can't return the empty `data` state.\n    // If there is an `error`, the `error` needs to be thrown to the error boundary.\n    // If there is no `error`, the `revalidation` promise needs to be thrown to\n    // the suspense boundary.\n    if (suspense && isUndefined$1(data) && key) {\n        // SWR should throw when trying to use Suspense on the server with React 18,\n        // without providing any fallback data. This causes hydration errors. See:\n        // https://github.com/vercel/swr/issues/1832\n        if (!IS_REACT_LEGACY && IS_SERVER) {\n            throw new Error('Fallback data is required when using Suspense in SSR.');\n        }\n        // Always update fetcher and config refs even with the Suspense mode.\n        fetcherRef.current = fetcher;\n        configRef.current = config;\n        unmountedRef.current = false;\n        const req = PRELOAD[key];\n        if (!isUndefined$1(req)) {\n            const promise = boundMutate(req);\n            use(promise);\n        }\n        if (isUndefined$1(error)) {\n            const promise = revalidate(WITH_DEDUPE);\n            if (!isUndefined$1(returnedData)) {\n                promise.status = 'fulfilled';\n                promise.value = true;\n            }\n            use(promise);\n        } else {\n            throw error;\n        }\n    }\n    const swrResponse = {\n        mutate: boundMutate,\n        get data () {\n            stateDependencies.data = true;\n            return returnedData;\n        },\n        get error () {\n            stateDependencies.error = true;\n            return error;\n        },\n        get isValidating () {\n            stateDependencies.isValidating = true;\n            return isValidating;\n        },\n        get isLoading () {\n            stateDependencies.isLoading = true;\n            return isLoading;\n        }\n    };\n    return swrResponse;\n};\nconst SWRConfig = OBJECT$1.defineProperty(SWRConfig$1, 'defaultValue', {\n    value: defaultConfig\n});\n/**\n * A hook to fetch data.\n *\n * @link https://swr.vercel.app\n * @example\n * ```jsx\n * import useSWR from 'swr'\n * function Profile() {\n *   const { data, error, isLoading } = useSWR('/api/user', fetcher)\n *   if (error) return <div>failed to load</div>\n *   if (isLoading) return <div>loading...</div>\n *   return <div>hello {data.name}!</div>\n * }\n * ```\n */ const useSWR = withArgs(useSWRHandler);\n\n// useSWR\n\nexport { SWRConfig, useSWR as default, unstable_serialize };\n", "'use client';\nimport React, { useEffect, useLayoutEffect, createContext, useContext, useMemo, useRef, createElement } from 'react';\nimport * as revalidateEvents from './events.mjs';\nimport { dequal } from 'dequal/lite';\n\n// Global state used to deduplicate requests and store listeners\nconst SWRGlobalState = new WeakMap();\n\n// Shared state between server components and client components\nconst noop = ()=>{};\n// Using noop() as the undefined value as undefined can be replaced\n// by something else. Prettier ignore and extra parentheses are necessary here\n// to ensure that tsc doesn't remove the __NOINLINE__ comment.\n// prettier-ignore\nconst UNDEFINED = /*#__NOINLINE__*/ noop();\nconst OBJECT = Object;\nconst isUndefined = (v)=>v === UNDEFINED;\nconst isFunction = (v)=>typeof v == 'function';\nconst mergeObjects = (a, b)=>({\n        ...a,\n        ...b\n    });\nconst isPromiseLike = (x)=>isFunction(x.then);\n\nconst EMPTY_CACHE = {};\nconst INITIAL_CACHE = {};\nconst STR_UNDEFINED = 'undefined';\n// NOTE: Use the function to guarantee it's re-evaluated between jsdom and node runtime for tests.\nconst isWindowDefined = typeof window != STR_UNDEFINED;\nconst isDocumentDefined = typeof document != STR_UNDEFINED;\nconst isLegacyDeno = isWindowDefined && 'Deno' in window;\nconst hasRequestAnimationFrame = ()=>isWindowDefined && typeof window['requestAnimationFrame'] != STR_UNDEFINED;\nconst createCacheHelper = (cache, key)=>{\n    const state = SWRGlobalState.get(cache);\n    return [\n        // Getter\n        ()=>!isUndefined(key) && cache.get(key) || EMPTY_CACHE,\n        // Setter\n        (info)=>{\n            if (!isUndefined(key)) {\n                const prev = cache.get(key);\n                // Before writing to the store, we keep the value in the initial cache\n                // if it's not there yet.\n                if (!(key in INITIAL_CACHE)) {\n                    INITIAL_CACHE[key] = prev;\n                }\n                state[5](key, mergeObjects(prev, info), prev || EMPTY_CACHE);\n            }\n        },\n        // Subscriber\n        state[6],\n        // Get server cache snapshot\n        ()=>{\n            if (!isUndefined(key)) {\n                // If the cache was updated on the client, we return the stored initial value.\n                if (key in INITIAL_CACHE) return INITIAL_CACHE[key];\n            }\n            // If we haven't done any client-side updates, we return the current value.\n            return !isUndefined(key) && cache.get(key) || EMPTY_CACHE;\n        }\n    ];\n} // export { UNDEFINED, OBJECT, isUndefined, isFunction, mergeObjects, isPromiseLike }\n;\n\n/**\n * Due to the bug https://bugs.chromium.org/p/chromium/issues/detail?id=678075,\n * it's not reliable to detect if the browser is currently online or offline\n * based on `navigator.onLine`.\n * As a workaround, we always assume it's online on the first load, and change\n * the status upon `online` or `offline` events.\n */ let online = true;\nconst isOnline = ()=>online;\n// For node and React Native, `add/removeEventListener` doesn't exist on window.\nconst [onWindowEvent, offWindowEvent] = isWindowDefined && window.addEventListener ? [\n    window.addEventListener.bind(window),\n    window.removeEventListener.bind(window)\n] : [\n    noop,\n    noop\n];\nconst isVisible = ()=>{\n    const visibilityState = isDocumentDefined && document.visibilityState;\n    return isUndefined(visibilityState) || visibilityState !== 'hidden';\n};\nconst initFocus = (callback)=>{\n    // focus revalidate\n    if (isDocumentDefined) {\n        document.addEventListener('visibilitychange', callback);\n    }\n    onWindowEvent('focus', callback);\n    return ()=>{\n        if (isDocumentDefined) {\n            document.removeEventListener('visibilitychange', callback);\n        }\n        offWindowEvent('focus', callback);\n    };\n};\nconst initReconnect = (callback)=>{\n    // revalidate on reconnected\n    const onOnline = ()=>{\n        online = true;\n        callback();\n    };\n    // nothing to revalidate, just update the status\n    const onOffline = ()=>{\n        online = false;\n    };\n    onWindowEvent('online', onOnline);\n    onWindowEvent('offline', onOffline);\n    return ()=>{\n        offWindowEvent('online', onOnline);\n        offWindowEvent('offline', onOffline);\n    };\n};\nconst preset = {\n    isOnline,\n    isVisible\n};\nconst defaultConfigOptions = {\n    initFocus,\n    initReconnect\n};\n\nconst IS_REACT_LEGACY = !React.useId;\nconst IS_SERVER = !isWindowDefined || isLegacyDeno;\n// Polyfill requestAnimationFrame\nconst rAF = (f)=>hasRequestAnimationFrame() ? window['requestAnimationFrame'](f) : setTimeout(f, 1);\n// React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser.\nconst useIsomorphicLayoutEffect = IS_SERVER ? useEffect : useLayoutEffect;\n// This assignment is to extend the Navigator type to use effectiveType.\nconst navigatorConnection = typeof navigator !== 'undefined' && navigator.connection;\n// Adjust the config based on slow connection status (<= 70Kbps).\nconst slowConnection = !IS_SERVER && navigatorConnection && ([\n    'slow-2g',\n    '2g'\n].includes(navigatorConnection.effectiveType) || navigatorConnection.saveData);\n\n// use WeakMap to store the object->key mapping\n// so the objects can be garbage collected.\n// WeakMap uses a hashtable under the hood, so the lookup\n// complexity is almost O(1).\nconst table = new WeakMap();\nconst getTypeName = (value)=>OBJECT.prototype.toString.call(value);\nconst isObjectTypeName = (typeName, type)=>typeName === `[object ${type}]`;\n// counter of the key\nlet counter = 0;\n// A stable hash implementation that supports:\n// - Fast and ensures unique hash properties\n// - Handles unserializable values\n// - Handles object key ordering\n// - Generates short results\n//\n// This is not a serialization function, and the result is not guaranteed to be\n// parsable.\nconst stableHash = (arg)=>{\n    const type = typeof arg;\n    const typeName = getTypeName(arg);\n    const isDate = isObjectTypeName(typeName, 'Date');\n    const isRegex = isObjectTypeName(typeName, 'RegExp');\n    const isPlainObject = isObjectTypeName(typeName, 'Object');\n    let result;\n    let index;\n    if (OBJECT(arg) === arg && !isDate && !isRegex) {\n        // Object/function, not null/date/regexp. Use WeakMap to store the id first.\n        // If it's already hashed, directly return the result.\n        result = table.get(arg);\n        if (result) return result;\n        // Store the hash first for circular reference detection before entering the\n        // recursive `stableHash` calls.\n        // For other objects like set and map, we use this id directly as the hash.\n        result = ++counter + '~';\n        table.set(arg, result);\n        if (Array.isArray(arg)) {\n            // Array.\n            result = '@';\n            for(index = 0; index < arg.length; index++){\n                result += stableHash(arg[index]) + ',';\n            }\n            table.set(arg, result);\n        }\n        if (isPlainObject) {\n            // Object, sort keys.\n            result = '#';\n            const keys = OBJECT.keys(arg).sort();\n            while(!isUndefined(index = keys.pop())){\n                if (!isUndefined(arg[index])) {\n                    result += index + ':' + stableHash(arg[index]) + ',';\n                }\n            }\n            table.set(arg, result);\n        }\n    } else {\n        result = isDate ? arg.toJSON() : type == 'symbol' ? arg.toString() : type == 'string' ? JSON.stringify(arg) : '' + arg;\n    }\n    return result;\n};\n\nconst serialize = (key)=>{\n    if (isFunction(key)) {\n        try {\n            key = key();\n        } catch (err) {\n            // dependencies not ready\n            key = '';\n        }\n    }\n    // Use the original key as the argument of fetcher. This can be a string or an\n    // array of values.\n    const args = key;\n    // If key is not falsy, or not an empty array, hash it.\n    key = typeof key == 'string' ? key : (Array.isArray(key) ? key.length : key) ? stableHash(key) : '';\n    return [\n        key,\n        args\n    ];\n};\n\n// Global timestamp.\nlet __timestamp = 0;\nconst getTimestamp = ()=>++__timestamp;\n\nasync function internalMutate(...args) {\n    const [cache, _key, _data, _opts] = args;\n    // When passing as a boolean, it's explicitly used to disable/enable\n    // revalidation.\n    const options = mergeObjects({\n        populateCache: true,\n        throwOnError: true\n    }, typeof _opts === 'boolean' ? {\n        revalidate: _opts\n    } : _opts || {});\n    let populateCache = options.populateCache;\n    const rollbackOnErrorOption = options.rollbackOnError;\n    let optimisticData = options.optimisticData;\n    const rollbackOnError = (error)=>{\n        return typeof rollbackOnErrorOption === 'function' ? rollbackOnErrorOption(error) : rollbackOnErrorOption !== false;\n    };\n    const throwOnError = options.throwOnError;\n    // If the second argument is a key filter, return the mutation results for all\n    // filtered keys.\n    if (isFunction(_key)) {\n        const keyFilter = _key;\n        const matchedKeys = [];\n        const it = cache.keys();\n        for (const key of it){\n            if (// Skip the special useSWRInfinite and useSWRSubscription keys.\n            !/^\\$(inf|sub)\\$/.test(key) && keyFilter(cache.get(key)._k)) {\n                matchedKeys.push(key);\n            }\n        }\n        return Promise.all(matchedKeys.map(mutateByKey));\n    }\n    return mutateByKey(_key);\n    async function mutateByKey(_k) {\n        // Serialize key\n        const [key] = serialize(_k);\n        if (!key) return;\n        const [get, set] = createCacheHelper(cache, key);\n        const [EVENT_REVALIDATORS, MUTATION, FETCH, PRELOAD] = SWRGlobalState.get(cache);\n        const startRevalidate = ()=>{\n            const revalidators = EVENT_REVALIDATORS[key];\n            const revalidate = isFunction(options.revalidate) ? options.revalidate(get().data, _k) : options.revalidate !== false;\n            if (revalidate) {\n                // Invalidate the key by deleting the concurrent request markers so new\n                // requests will not be deduped.\n                delete FETCH[key];\n                delete PRELOAD[key];\n                if (revalidators && revalidators[0]) {\n                    return revalidators[0](revalidateEvents.MUTATE_EVENT).then(()=>get().data);\n                }\n            }\n            return get().data;\n        };\n        // If there is no new data provided, revalidate the key with current state.\n        if (args.length < 3) {\n            // Revalidate and broadcast state.\n            return startRevalidate();\n        }\n        let data = _data;\n        let error;\n        let isError = false;\n        // Update global timestamps.\n        const beforeMutationTs = getTimestamp();\n        MUTATION[key] = [\n            beforeMutationTs,\n            0\n        ];\n        const hasOptimisticData = !isUndefined(optimisticData);\n        const state = get();\n        // `displayedData` is the current value on screen. It could be the optimistic value\n        // that is going to be overridden by a `committedData`, or get reverted back.\n        // `committedData` is the validated value that comes from a fetch or mutation.\n        const displayedData = state.data;\n        const currentData = state._c;\n        const committedData = isUndefined(currentData) ? displayedData : currentData;\n        // Do optimistic data update.\n        if (hasOptimisticData) {\n            optimisticData = isFunction(optimisticData) ? optimisticData(committedData, displayedData) : optimisticData;\n            // When we set optimistic data, backup the current committedData data in `_c`.\n            set({\n                data: optimisticData,\n                _c: committedData\n            });\n        }\n        if (isFunction(data)) {\n            // `data` is a function, call it passing current cache value.\n            try {\n                data = data(committedData);\n            } catch (err) {\n                // If it throws an error synchronously, we shouldn't update the cache.\n                error = err;\n                isError = true;\n            }\n        }\n        // `data` is a promise/thenable, resolve the final data first.\n        if (data && isPromiseLike(data)) {\n            // This means that the mutation is async, we need to check timestamps to\n            // avoid race conditions.\n            data = await data.catch((err)=>{\n                error = err;\n                isError = true;\n            });\n            // Check if other mutations have occurred since we've started this mutation.\n            // If there's a race we don't update cache or broadcast the change,\n            // just return the data.\n            if (beforeMutationTs !== MUTATION[key][0]) {\n                if (isError) throw error;\n                return data;\n            } else if (isError && hasOptimisticData && rollbackOnError(error)) {\n                // Rollback. Always populate the cache in this case but without\n                // transforming the data.\n                populateCache = true;\n                // Reset data to be the latest committed data, and clear the `_c` value.\n                set({\n                    data: committedData,\n                    _c: UNDEFINED\n                });\n            }\n        }\n        // If we should write back the cache after request.\n        if (populateCache) {\n            if (!isError) {\n                // Transform the result into data.\n                if (isFunction(populateCache)) {\n                    const populateCachedData = populateCache(data, committedData);\n                    set({\n                        data: populateCachedData,\n                        error: UNDEFINED,\n                        _c: UNDEFINED\n                    });\n                } else {\n                    // Only update cached data and reset the error if there's no error. Data can be `undefined` here.\n                    set({\n                        data,\n                        error: UNDEFINED,\n                        _c: UNDEFINED\n                    });\n                }\n            }\n        }\n        // Reset the timestamp to mark the mutation has ended.\n        MUTATION[key][1] = getTimestamp();\n        // Update existing SWR Hooks' internal states:\n        Promise.resolve(startRevalidate()).then(()=>{\n            // The mutation and revalidation are ended, we can clear it since the data is\n            // not an optimistic value anymore.\n            set({\n                _c: UNDEFINED\n            });\n        });\n        // Throw error or return data\n        if (isError) {\n            if (throwOnError) throw error;\n            return;\n        }\n        return data;\n    }\n}\n\nconst revalidateAllKeys = (revalidators, type)=>{\n    for(const key in revalidators){\n        if (revalidators[key][0]) revalidators[key][0](type);\n    }\n};\nconst initCache = (provider, options)=>{\n    // The global state for a specific provider will be used to deduplicate\n    // requests and store listeners. As well as a mutate function that is bound to\n    // the cache.\n    // The provider's global state might be already initialized. Let's try to get the\n    // global state associated with the provider first.\n    if (!SWRGlobalState.has(provider)) {\n        const opts = mergeObjects(defaultConfigOptions, options);\n        // If there's no global state bound to the provider, create a new one with the\n        // new mutate function.\n        const EVENT_REVALIDATORS = Object.create(null);\n        const mutate = internalMutate.bind(UNDEFINED, provider);\n        let unmount = noop;\n        const subscriptions = Object.create(null);\n        const subscribe = (key, callback)=>{\n            const subs = subscriptions[key] || [];\n            subscriptions[key] = subs;\n            subs.push(callback);\n            return ()=>subs.splice(subs.indexOf(callback), 1);\n        };\n        const setter = (key, value, prev)=>{\n            provider.set(key, value);\n            const subs = subscriptions[key];\n            if (subs) {\n                for (const fn of subs){\n                    fn(value, prev);\n                }\n            }\n        };\n        const initProvider = ()=>{\n            if (!SWRGlobalState.has(provider)) {\n                // Update the state if it's new, or if the provider has been extended.\n                SWRGlobalState.set(provider, [\n                    EVENT_REVALIDATORS,\n                    Object.create(null),\n                    Object.create(null),\n                    Object.create(null),\n                    mutate,\n                    setter,\n                    subscribe\n                ]);\n                if (!IS_SERVER) {\n                    // When listening to the native events for auto revalidations,\n                    // we intentionally put a delay (setTimeout) here to make sure they are\n                    // fired after immediate JavaScript executions, which can be\n                    // React's state updates.\n                    // This avoids some unnecessary revalidations such as\n                    // https://github.com/vercel/swr/issues/1680.\n                    const releaseFocus = opts.initFocus(setTimeout.bind(UNDEFINED, revalidateAllKeys.bind(UNDEFINED, EVENT_REVALIDATORS, revalidateEvents.FOCUS_EVENT)));\n                    const releaseReconnect = opts.initReconnect(setTimeout.bind(UNDEFINED, revalidateAllKeys.bind(UNDEFINED, EVENT_REVALIDATORS, revalidateEvents.RECONNECT_EVENT)));\n                    unmount = ()=>{\n                        releaseFocus && releaseFocus();\n                        releaseReconnect && releaseReconnect();\n                        // When un-mounting, we need to remove the cache provider from the state\n                        // storage too because it's a side-effect. Otherwise, when re-mounting we\n                        // will not re-register those event listeners.\n                        SWRGlobalState.delete(provider);\n                    };\n                }\n            }\n        };\n        initProvider();\n        // This is a new provider, we need to initialize it and setup DOM events\n        // listeners for `focus` and `reconnect` actions.\n        // We might want to inject an extra layer on top of `provider` in the future,\n        // such as key serialization, auto GC, etc.\n        // For now, it's just a `Map` interface without any modifications.\n        return [\n            provider,\n            mutate,\n            initProvider,\n            unmount\n        ];\n    }\n    return [\n        provider,\n        SWRGlobalState.get(provider)[4]\n    ];\n};\n\n// error retry\nconst onErrorRetry = (_, __, config, revalidate, opts)=>{\n    const maxRetryCount = config.errorRetryCount;\n    const currentRetryCount = opts.retryCount;\n    // Exponential backoff\n    const timeout = ~~((Math.random() + 0.5) * (1 << (currentRetryCount < 8 ? currentRetryCount : 8))) * config.errorRetryInterval;\n    if (!isUndefined(maxRetryCount) && currentRetryCount > maxRetryCount) {\n        return;\n    }\n    setTimeout(revalidate, timeout, opts);\n};\nconst compare = dequal;\n// Default cache provider\nconst [cache, mutate] = initCache(new Map());\n// Default config\nconst defaultConfig = mergeObjects({\n    // events\n    onLoadingSlow: noop,\n    onSuccess: noop,\n    onError: noop,\n    onErrorRetry,\n    onDiscarded: noop,\n    // switches\n    revalidateOnFocus: true,\n    revalidateOnReconnect: true,\n    revalidateIfStale: true,\n    shouldRetryOnError: true,\n    // timeouts\n    errorRetryInterval: slowConnection ? 10000 : 5000,\n    focusThrottleInterval: 5 * 1000,\n    dedupingInterval: 2 * 1000,\n    loadingTimeout: slowConnection ? 5000 : 3000,\n    // providers\n    compare,\n    isPaused: ()=>false,\n    cache,\n    mutate,\n    fallback: {}\n}, // use web preset by default\npreset);\n\nconst mergeConfigs = (a, b)=>{\n    // Need to create a new object to avoid mutating the original here.\n    const v = mergeObjects(a, b);\n    // If two configs are provided, merge their `use` and `fallback` options.\n    if (b) {\n        const { use: u1, fallback: f1 } = a;\n        const { use: u2, fallback: f2 } = b;\n        if (u1 && u2) {\n            v.use = u1.concat(u2);\n        }\n        if (f1 && f2) {\n            v.fallback = mergeObjects(f1, f2);\n        }\n    }\n    return v;\n};\n\nconst SWRConfigContext = createContext({});\nconst SWRConfig = (props)=>{\n    const { value } = props;\n    const parentConfig = useContext(SWRConfigContext);\n    const isFunctionalConfig = isFunction(value);\n    const config = useMemo(()=>isFunctionalConfig ? value(parentConfig) : value, [\n        isFunctionalConfig,\n        parentConfig,\n        value\n    ]);\n    // Extend parent context values and middleware.\n    const extendedConfig = useMemo(()=>isFunctionalConfig ? config : mergeConfigs(parentConfig, config), [\n        isFunctionalConfig,\n        parentConfig,\n        config\n    ]);\n    // Should not use the inherited provider.\n    const provider = config && config.provider;\n    // initialize the cache only on first access.\n    const cacheContextRef = useRef(UNDEFINED);\n    if (provider && !cacheContextRef.current) {\n        cacheContextRef.current = initCache(provider(extendedConfig.cache || cache), config);\n    }\n    const cacheContext = cacheContextRef.current;\n    // Override the cache if a new provider is given.\n    if (cacheContext) {\n        extendedConfig.cache = cacheContext[0];\n        extendedConfig.mutate = cacheContext[1];\n    }\n    // Unsubscribe events.\n    useIsomorphicLayoutEffect(()=>{\n        if (cacheContext) {\n            cacheContext[2] && cacheContext[2]();\n            return cacheContext[3];\n        }\n    }, []);\n    return createElement(SWRConfigContext.Provider, mergeObjects(props, {\n        value: extendedConfig\n    }));\n};\n\nexport { noop as A, isPromiseLike as B, IS_REACT_LEGACY as I, OBJECT as O, SWRConfigContext as S, UNDEFINED as U, isFunction as a, SWRGlobalState as b, cache as c, defaultConfig as d, isUndefined as e, mergeConfigs as f, SWRConfig as g, initCache as h, isWindowDefined as i, mutate as j, compare as k, stableHash as l, mergeObjects as m, internalMutate as n, getTimestamp as o, preset as p, defaultConfigOptions as q, IS_SERVER as r, serialize as s, rAF as t, useIsomorphicLayoutEffect as u, slowConnection as v, isDocumentDefined as w, isLegacyDeno as x, hasRequestAnimationFrame as y, createCacheHelper as z };\n", "const FOCUS_EVENT = 0;\nconst RECONNECT_EVENT = 1;\nconst MUTATE_EVENT = 2;\nconst ERROR_REVALIDATE_EVENT = 3;\n\nexport { ERROR_REVALIDATE_EVENT, FOCUS_EVENT, MUTATE_EVENT, RECONNECT_EVENT };\n", "var has = Object.prototype.hasOwnProperty;\n\nexport function dequal(foo, bar) {\n\tvar ctor, len;\n\tif (foo === bar) return true;\n\n\tif (foo && bar && (ctor=foo.constructor) === bar.constructor) {\n\t\tif (ctor === Date) return foo.getTime() === bar.getTime();\n\t\tif (ctor === RegExp) return foo.toString() === bar.toString();\n\n\t\tif (ctor === Array) {\n\t\t\tif ((len=foo.length) === bar.length) {\n\t\t\t\twhile (len-- && dequal(foo[len], bar[len]));\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (!ctor || typeof foo === 'object') {\n\t\t\tlen = 0;\n\t\t\tfor (ctor in foo) {\n\t\t\t\tif (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;\n\t\t\t\tif (!(ctor in bar) || !dequal(foo[ctor], bar[ctor])) return false;\n\t\t\t}\n\t\t\treturn Object.keys(bar).length === len;\n\t\t}\n\t}\n\n\treturn foo !== foo && bar !== bar;\n}\n", "const INFINITE_PREFIX = '$inf$';\n\nexport { INFINITE_PREFIX };\n", "import { i as isWindowDefined, a as isFunction, m as mergeObjects, S as SWRConfigContext, d as defaultConfig, s as serialize, b as SWRGlobalState, c as cache, e as isUndefined, f as mergeConfigs } from './config-context-client-BoS53ST9.mjs';\nexport { I as IS_REACT_LEGACY, r as IS_SERVER, O as OBJECT, g as SWRConfig, U as UNDEFINED, k as compare, z as createCacheHelper, q as defaultConfigOptions, o as getTimestamp, y as hasRequestAnimationFrame, h as initCache, n as internalMutate, w as isDocumentDefined, x as isLegacyDeno, B as isPromiseLike, j as mutate, A as noop, p as preset, t as rAF, v as slowConnection, l as stableHash, u as useIsomorphicLayoutEffect } from './config-context-client-BoS53ST9.mjs';\nimport * as revalidateEvents from './events.mjs';\nexport { revalidateEvents };\nimport { INFINITE_PREFIX } from './constants.mjs';\nexport { INFINITE_PREFIX } from './constants.mjs';\nimport React, { useContext } from 'react';\nexport * from './types.mjs';\n\n// @ts-expect-error\nconst enableDevtools = isWindowDefined && window.__SWR_DEVTOOLS_USE__;\nconst use = enableDevtools ? window.__SWR_DEVTOOLS_USE__ : [];\nconst setupDevTools = ()=>{\n    if (enableDevtools) {\n        // @ts-expect-error\n        window.__SWR_DEVTOOLS_REACT__ = React;\n    }\n};\n\nconst normalize = (args)=>{\n    return isFunction(args[1]) ? [\n        args[0],\n        args[1],\n        args[2] || {}\n    ] : [\n        args[0],\n        null,\n        (args[1] === null ? args[2] : args[1]) || {}\n    ];\n};\n\nconst useSWRConfig = ()=>{\n    return mergeObjects(defaultConfig, useContext(SWRConfigContext));\n};\n\nconst preload = (key_, fetcher)=>{\n    const [key, fnArg] = serialize(key_);\n    const [, , , PRELOAD] = SWRGlobalState.get(cache);\n    // Prevent preload to be called multiple times before used.\n    if (PRELOAD[key]) return PRELOAD[key];\n    const req = fetcher(fnArg);\n    PRELOAD[key] = req;\n    return req;\n};\nconst middleware = (useSWRNext)=>(key_, fetcher_, config)=>{\n        // fetcher might be a sync function, so this should not be an async function\n        const fetcher = fetcher_ && ((...args)=>{\n            const [key] = serialize(key_);\n            const [, , , PRELOAD] = SWRGlobalState.get(cache);\n            if (key.startsWith(INFINITE_PREFIX)) {\n                // we want the infinite fetcher to be called.\n                // handling of the PRELOAD cache happens there.\n                return fetcher_(...args);\n            }\n            const req = PRELOAD[key];\n            if (isUndefined(req)) return fetcher_(...args);\n            delete PRELOAD[key];\n            return req;\n        });\n        return useSWRNext(key_, fetcher, config);\n    };\n\nconst BUILT_IN_MIDDLEWARE = use.concat(middleware);\n\n// It's tricky to pass generic types as parameters, so we just directly override\n// the types here.\nconst withArgs = (hook)=>{\n    return function useSWRArgs(...args) {\n        // Get the default and inherited configuration.\n        const fallbackConfig = useSWRConfig();\n        // Normalize arguments.\n        const [key, fn, _config] = normalize(args);\n        // Merge configurations.\n        const config = mergeConfigs(fallbackConfig, _config);\n        // Apply middleware\n        let next = hook;\n        const { use } = config;\n        const middleware = (use || []).concat(BUILT_IN_MIDDLEWARE);\n        for(let i = middleware.length; i--;){\n            next = middleware[i](next);\n        }\n        return next(key, fn || config.fetcher || null, config);\n    };\n};\n\n// Add a callback function to a list of keyed callback functions and return\n// the unsubscribe function.\nconst subscribeCallback = (key, callbacks, callback)=>{\n    const keyedRevalidators = callbacks[key] || (callbacks[key] = []);\n    keyedRevalidators.push(callback);\n    return ()=>{\n        const index = keyedRevalidators.indexOf(callback);\n        if (index >= 0) {\n            // O(1): faster than splice\n            keyedRevalidators[index] = keyedRevalidators[keyedRevalidators.length - 1];\n            keyedRevalidators.pop();\n        }\n    };\n};\n\n// Create a custom hook with a middleware\nconst withMiddleware = (useSWR, middleware)=>{\n    return (...args)=>{\n        const [key, fn, config] = normalize(args);\n        const uses = (config.use || []).concat(middleware);\n        return useSWR(key, fn, {\n            ...config,\n            use: uses\n        });\n    };\n};\n\nsetupDevTools();\n\nexport { SWRGlobalState, cache, defaultConfig, isFunction, isUndefined, isWindowDefined, mergeConfigs, mergeObjects, normalize, preload, serialize, subscribeCallback, useSWRConfig, withArgs, withMiddleware };\n", "import useSWR from \"swr\";\n\n// https://2020.paco.me/blog/shared-hook-state-with-swr\nconst useSharedState = <T>(key: string, initial?: T) => {\n  const { data: state, mutate: setState } = useSWR(key, {\n    fallbackData: initial,\n  });\n  return [state, setState] as const;\n};\n\nexport default useSharedState;\n", "/// <reference types=\"node\" />\n\nexport { usePromise } from \"./usePromise\";\nexport { useCachedState } from \"./useCachedState\";\nexport { useCachedPromise } from \"./useCachedPromise\";\nexport { useFetch } from \"./useFetch\";\nexport { useExec } from \"./useExec\";\nexport { useStreamJSON } from \"./useStreamJSON\";\nexport { useSQL } from \"./useSQL\";\nexport { useForm, FormValidation } from \"./useForm\";\nexport { useAI } from \"./useAI\";\nexport { useFrecencySorting } from \"./useFrecencySorting\";\nexport { useLocalStorage } from \"./useLocalStorage\";\n\nexport { getAvatarIcon, getFavicon, getProgressIcon } from \"./icon\";\n\nexport { OAuthService, withAccessToken, getAccessToken } from \"./oauth\";\n\nexport { createDeeplink, createExtensionDeeplink, createScriptCommandDeeplink, DeeplinkType } from \"./createDeeplink\";\nexport { executeSQL } from \"./executeSQL\";\nexport { runAppleScript } from \"./run-applescript\";\nexport { runPowerShellScript } from \"./run-powershell-script\";\nexport { showFailureToast } from \"./showFailureToast\";\nexport { withCache } from \"./cache\";\n\nexport type { PromiseOptions } from \"./usePromise\";\nexport type { CachedPromiseOptions } from \"./useCachedPromise\";\nexport type {\n  OAuthServiceOptions,\n  OnAuthorizeParams,\n  WithAccessTokenComponentOrFn,\n  ProviderWithDefaultClientOptions,\n  ProviderOptions,\n} from \"./oauth\";\nexport type { AsyncState, MutatePromise } from \"./types\";\n", "import { useEffect, useCallback, RefObject, useRef, useState } from \"react\";\nimport { environment, LaunchType, Toast } from \"@raycast/api\";\nimport { useDeepMemo } from \"./useDeepMemo\";\nimport {\n  FunctionReturningPromise,\n  MutatePromise,\n  UsePromiseReturnType,\n  AsyncState,\n  FunctionReturningPaginatedPromise,\n  UnwrapReturn,\n  PaginationOptions,\n} from \"./types\";\nimport { useLatest } from \"./useLatest\";\nimport { showFailureToast } from \"./showFailureToast\";\n\nexport type PromiseOptions<T extends FunctionReturningPromise | FunctionReturningPaginatedPromise> = {\n  /**\n   * A reference to an `AbortController` to cancel a previous call when triggering a new one\n   */\n  abortable?: RefObject<AbortController | null | undefined>;\n  /**\n   * Whether to actually execute the function or not.\n   * This is useful for cases where one of the function's arguments depends on something that\n   * might not be available right away (for example, depends on some user inputs). Because React requires\n   * every hooks to be defined on the render, this flag enables you to define the hook right away but\n   * wait util you have all the arguments ready to execute the function.\n   */\n  execute?: boolean;\n  /**\n   * Options for the generic failure toast.\n   * It allows you to customize the title, message, and primary action of the failure toast.\n   */\n  failureToastOptions?: Partial<Pick<Toast.Options, \"title\" | \"primaryAction\" | \"message\">>;\n  /**\n   * Called when an execution fails. By default it will log the error and show\n   * a generic failure toast.\n   */\n  onError?: (error: Error) => void | Promise<void>;\n  /**\n   * Called when an execution succeeds.\n   */\n  onData?: (data: UnwrapReturn<T>, pagination?: PaginationOptions<UnwrapReturn<T>>) => void | Promise<void>;\n  /**\n   * Called when an execution will start\n   */\n  onWillExecute?: (parameters: Parameters<T>) => void;\n};\n\n/**\n * Wraps an asynchronous function or a function that returns a Promise in another function, and returns the {@link AsyncState} corresponding to the execution of the function.\n *\n * @remark This overload should be used when working with paginated data sources.\n *\n * @example\n * ```\n * import { setTimeout } from \"node:timers/promises\";\n * import { useState } from \"react\";\n * import { List } from \"@raycast/api\";\n * import { usePromise } from \"@raycast/utils\";\n *\n * export default function Command() {\n *   const [searchText, setSearchText] = useState(\"\");\n *\n *   const { isLoading, data, pagination } = usePromise(\n *     (searchText: string) => async (options: { page: number }) => {\n *       await setTimeout(200);\n *       const newData = Array.from({ length: 25 }, (_v, index) => ({\n *         index,\n *         page: options.page,\n *         text: searchText,\n *       }));\n *       return { data: newData, hasMore: options.page < 10 };\n *     },\n *     [searchText]\n *   );\n *\n *   return (\n *     <List isLoading={isLoading} onSearchTextChange={setSearchText} pagination={pagination}>\n *       {data?.map((item) => (\n *         <List.Item\n *           key={`${item.page} ${item.index} ${item.text}`}\n *           title={`Page ${item.page} Item ${item.index}`}\n *           subtitle={item.text}\n *         />\n *       ))}\n *     </List>\n *   );\n * };\n * ```\n */\nexport function usePromise<T extends FunctionReturningPaginatedPromise<[]>>(\n  fn: T,\n): UsePromiseReturnType<UnwrapReturn<T>>;\nexport function usePromise<T extends FunctionReturningPaginatedPromise>(\n  fn: T,\n  args: Parameters<T>,\n  options?: PromiseOptions<T>,\n): UsePromiseReturnType<UnwrapReturn<T>>;\n\n/**\n * Wraps an asynchronous function or a function that returns a Promise and returns the {@link AsyncState} corresponding to the execution of the function.\n *\n * @remark The function is assumed to be constant (eg. changing it won't trigger a revalidation).\n *\n * @example\n * ```\n * import { usePromise } from '@raycast/utils';\n *\n * export default function Command() {\n *   const abortable = useRef<AbortController>();\n *   const { isLoading, data, revalidate } = usePromise(async (url: string) => {\n *     const response = await fetch(url, { signal: abortable.current?.signal });\n *     const result = await response.text();\n *     return result\n *   },\n *   ['https://api.example'],\n *   {\n *     abortable\n *   });\n *\n *   return (\n *     <Detail\n *       isLoading={isLoading}\n *       markdown={data}\n *       actions={\n *         <ActionPanel>\n *           <Action title=\"Reload\" onAction={() => revalidate()} />\n *         </ActionPanel>\n *       }\n *     />\n *   );\n * };\n * ```\n */\nexport function usePromise<T extends FunctionReturningPromise<[]>>(fn: T): UsePromiseReturnType<UnwrapReturn<T>>;\nexport function usePromise<T extends FunctionReturningPromise>(\n  fn: T,\n  args: Parameters<T>,\n  options?: PromiseOptions<T>,\n): UsePromiseReturnType<UnwrapReturn<T>>;\n\nexport function usePromise<T extends FunctionReturningPromise | FunctionReturningPaginatedPromise>(\n  fn: T,\n  args?: Parameters<T>,\n  options?: PromiseOptions<T>,\n): UsePromiseReturnType<any> {\n  const lastCallId = useRef(0);\n  const [state, set] = useState<AsyncState<UnwrapReturn<T>>>({ isLoading: true });\n\n  const fnRef = useLatest(fn);\n  const latestAbortable = useLatest(options?.abortable);\n  const latestArgs = useLatest(args || []);\n  const latestOnError = useLatest(options?.onError);\n  const latestOnData = useLatest(options?.onData);\n  const latestOnWillExecute = useLatest(options?.onWillExecute);\n  const latestFailureToast = useLatest(options?.failureToastOptions);\n  const latestValue = useLatest(state.data);\n  const latestCallback = useRef<(...args: Parameters<T>) => Promise<UnwrapReturn<T>>>(null);\n\n  const paginationArgsRef = useRef<PaginationOptions>({ page: 0 });\n  const usePaginationRef = useRef(false);\n  const hasMoreRef = useRef(true);\n  const pageSizeRef = useRef(50);\n\n  const abort = useCallback(() => {\n    if (latestAbortable.current) {\n      latestAbortable.current.current?.abort();\n      latestAbortable.current.current = new AbortController();\n    }\n    return ++lastCallId.current;\n  }, [latestAbortable]);\n\n  const callback = useCallback(\n    (...args: Parameters<T>): Promise<UnwrapReturn<T>> => {\n      const callId = abort();\n\n      latestOnWillExecute.current?.(args);\n\n      set((prevState) => ({ ...prevState, isLoading: true }));\n\n      const promiseOrPaginatedPromise = bindPromiseIfNeeded(fnRef.current)(...args);\n\n      function handleError(error: any) {\n        if (error.name == \"AbortError\") {\n          return error;\n        }\n\n        if (callId === lastCallId.current) {\n          // handle errors\n          if (latestOnError.current) {\n            latestOnError.current(error);\n          } else {\n            if (environment.launchType !== LaunchType.Background) {\n              showFailureToast(error, {\n                title: \"Failed to fetch latest data\",\n                primaryAction: {\n                  title: \"Retry\",\n                  onAction(toast) {\n                    toast.hide();\n                    latestCallback.current?.(...((latestArgs.current || []) as Parameters<T>));\n                  },\n                },\n                ...latestFailureToast.current,\n              });\n            }\n          }\n          set({ error, isLoading: false });\n        }\n\n        return error;\n      }\n\n      if (typeof promiseOrPaginatedPromise === \"function\") {\n        usePaginationRef.current = true;\n        return promiseOrPaginatedPromise(paginationArgsRef.current).then(\n          // @ts-expect-error too complicated for TS\n          ({ data, hasMore, cursor }: { data: UnwrapReturn<T>; hasMore: boolean; cursor?: any }) => {\n            if (callId === lastCallId.current) {\n              if (paginationArgsRef.current) {\n                paginationArgsRef.current.cursor = cursor;\n                paginationArgsRef.current.lastItem = data?.[data.length - 1];\n              }\n\n              if (latestOnData.current) {\n                latestOnData.current(data, paginationArgsRef.current);\n              }\n\n              if (hasMore) {\n                pageSizeRef.current = data.length;\n              }\n              hasMoreRef.current = hasMore;\n\n              set((previousData) => {\n                if (paginationArgsRef.current.page === 0) {\n                  return { data, isLoading: false };\n                }\n                // @ts-expect-error we know it's an array here\n                return { data: (previousData.data || [])?.concat(data), isLoading: false };\n              });\n            }\n\n            return data;\n          },\n          (error: unknown) => {\n            hasMoreRef.current = false;\n            return handleError(error);\n          },\n        ) as Promise<UnwrapReturn<T>>;\n      }\n\n      usePaginationRef.current = false;\n      return promiseOrPaginatedPromise.then((data: UnwrapReturn<T>) => {\n        if (callId === lastCallId.current) {\n          if (latestOnData.current) {\n            latestOnData.current(data);\n          }\n          set({ data, isLoading: false });\n        }\n\n        return data;\n      }, handleError) as Promise<UnwrapReturn<T>>;\n    },\n    [\n      latestOnData,\n      latestOnError,\n      latestArgs,\n      fnRef,\n      set,\n      latestCallback,\n      latestOnWillExecute,\n      paginationArgsRef,\n      latestFailureToast,\n      abort,\n    ],\n  );\n\n  latestCallback.current = callback;\n\n  const revalidate = useCallback(() => {\n    // reset the pagination\n    paginationArgsRef.current = { page: 0 };\n\n    const args = (latestArgs.current || []) as Parameters<T>;\n    return callback(...args);\n  }, [callback, latestArgs]);\n\n  const mutate = useCallback<MutatePromise<Awaited<ReturnType<T>>, undefined>>(\n    async (asyncUpdate, options) => {\n      let dataBeforeOptimisticUpdate: Awaited<ReturnType<T>> | undefined;\n      try {\n        if (options?.optimisticUpdate) {\n          // cancel the in-flight request to make sure it won't overwrite the optimistic update\n          abort();\n\n          if (typeof options?.rollbackOnError !== \"function\" && options?.rollbackOnError !== false) {\n            // keep track of the data before the optimistic update,\n            // but only if we need it (eg. only when we want to automatically rollback after)\n            dataBeforeOptimisticUpdate = structuredClone(latestValue.current?.value);\n          }\n          const update = options.optimisticUpdate;\n          set((prevState) => ({ ...prevState, data: update(prevState.data) }));\n        }\n        return await asyncUpdate;\n      } catch (err) {\n        if (typeof options?.rollbackOnError === \"function\") {\n          const update = options.rollbackOnError;\n          set((prevState) => ({ ...prevState, data: update(prevState.data) }));\n        } else if (options?.optimisticUpdate && options?.rollbackOnError !== false) {\n          set((prevState) => ({ ...prevState, data: dataBeforeOptimisticUpdate }));\n        }\n        throw err;\n      } finally {\n        if (options?.shouldRevalidateAfter !== false) {\n          if (environment.launchType === LaunchType.Background || environment.commandMode === \"menu-bar\") {\n            // when in the background or in a menu bar, we are going to await the revalidation\n            // to make sure we get the right data at the end of the mutation\n            await revalidate();\n          } else {\n            revalidate();\n          }\n        }\n      }\n    },\n    [revalidate, latestValue, set, abort],\n  );\n\n  const onLoadMore = useCallback(() => {\n    paginationArgsRef.current.page += 1;\n    const args = (latestArgs.current || []) as Parameters<T>;\n    callback(...args);\n  }, [paginationArgsRef, latestArgs, callback]);\n\n  // revalidate when the args change\n  useEffect(() => {\n    // reset the pagination\n    paginationArgsRef.current = { page: 0 };\n\n    if (options?.execute !== false) {\n      callback(...((args || []) as Parameters<T>));\n    } else {\n      // cancel the previous request if we don't want to execute anymore\n      abort();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [useDeepMemo([args, options?.execute, callback]), latestAbortable, paginationArgsRef]);\n\n  // abort request when unmounting\n  useEffect(() => {\n    return () => {\n      abort();\n    };\n  }, [abort]);\n\n  // we only want to show the loading indicator if the promise is executing\n  const isLoading = options?.execute !== false ? state.isLoading : false;\n\n  // @ts-expect-error loading is has some fixed value in the enum which\n  const stateWithLoadingFixed: AsyncState<Awaited<ReturnType<T>>> = { ...state, isLoading };\n\n  const pagination = usePaginationRef.current\n    ? {\n        pageSize: pageSizeRef.current,\n        hasMore: hasMoreRef.current,\n        onLoadMore,\n      }\n    : undefined;\n\n  return { ...stateWithLoadingFixed, revalidate, mutate, pagination };\n}\n\n/** Bind the fn if it's a Promise method */\nfunction bindPromiseIfNeeded<T>(fn: T): T {\n  if (fn === (Promise.all as any)) {\n    // @ts-expect-error this is fine\n    return fn.bind(Promise);\n  }\n  if (fn === (Promise.race as any)) {\n    // @ts-expect-error this is fine\n    return fn.bind(Promise);\n  }\n  if (fn === (Promise.resolve as any)) {\n    // @ts-expect-error this is fine\n    return fn.bind(Promise as any);\n  }\n  if (fn === (Promise.reject as any)) {\n    // @ts-expect-error this is fine\n    return fn.bind(Promise);\n  }\n  return fn;\n}\n", "import { useRef, useMemo } from \"react\";\nimport { dequal } from \"dequal/lite\";\n\n/**\n * @param value the value to be memoized (usually a dependency list)\n * @returns a memoized version of the value as long as it remains deeply equal\n */\nexport function useDeepMemo<T>(value: T) {\n  const ref = useRef<T>(value);\n  const signalRef = useRef<number>(0);\n\n  if (!dequal(value, ref.current)) {\n    ref.current = value;\n    signalRef.current += 1;\n  }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useMemo(() => ref.current, [signalRef.current]);\n}\n", "import { useRef } from \"react\";\n\n/**\n * Returns the latest state.\n *\n * This is mostly useful to get access to the latest value of some props or state inside an asynchronous callback, instead of that value at the time the callback was created from.\n */\nexport function useLatest<T>(value: T): { readonly current: T } {\n  const ref = useRef(value);\n  ref.current = value;\n  return ref;\n}\n", "import * as fs from \"node:fs\";\nimport * as path from \"node:path\";\nimport { Clipboard, environment, open, Toast, showToast } from \"@raycast/api\";\n\n/**\n * Shows a failure Toast for a given Error.\n *\n * @example\n * ```typescript\n * import { showHUD } from \"@raycast/api\";\n * import { runAppleScript, showFailureToast } from \"@raycast/utils\";\n *\n * export default async function () {\n *   try {\n *     const res = await runAppleScript(\n *       `\n *       on run argv\n *         return \"hello, \" & item 1 of argv & \".\"\n *       end run\n *       `,\n *       [\"world\"]\n *     );\n *     await showHUD(res);\n *   } catch (error) {\n *     showFailureToast(error, { title: \"Could not run AppleScript\" });\n *   }\n * }\n * ```\n */\nexport function showFailureToast(\n  error: unknown,\n  options?: Partial<Pick<Toast.Options, \"title\" | \"primaryAction\" | \"message\">>,\n) {\n  const message = error instanceof Error ? error.message : String(error);\n  return showToast({\n    style: Toast.Style.Failure,\n    title: options?.title ?? \"Something went wrong\",\n    message: options?.message ?? message,\n    primaryAction: options?.primaryAction ?? handleErrorToastAction(error),\n    secondaryAction: options?.primaryAction ? handleErrorToastAction(error) : undefined,\n  });\n}\n\nconst handleErrorToastAction = (error: unknown): Toast.ActionOptions => {\n  let privateExtension = true;\n  let title = \"[Extension Name]...\";\n  let extensionURL = \"\";\n  try {\n    const packageJSON = JSON.parse(fs.readFileSync(path.join(environment.assetsPath, \"..\", \"package.json\"), \"utf8\"));\n    title = `[${packageJSON.title}]...`;\n    extensionURL = `https://raycast.com/${packageJSON.owner || packageJSON.author}/${packageJSON.name}`;\n    if (!packageJSON.owner || packageJSON.access === \"public\") {\n      privateExtension = false;\n    }\n  } catch (err) {\n    // no-op\n  }\n\n  // if it's a private extension, we can't construct the URL to report the error\n  // so we fallback to copying the error to the clipboard\n  const fallback = environment.isDevelopment || privateExtension;\n\n  const stack = error instanceof Error ? error?.stack || error?.message || \"\" : String(error);\n\n  return {\n    title: fallback ? \"Copy Logs\" : \"Report Error\",\n    onAction(toast) {\n      toast.hide();\n      if (fallback) {\n        Clipboard.copy(stack);\n      } else {\n        open(\n          `https://github.com/raycast/extensions/issues/new?&labels=extension%2Cbug&template=extension_bug_report.yml&title=${encodeURIComponent(\n            title,\n          )}&extension-url=${encodeURI(extensionURL)}&description=${encodeURIComponent(\n            `#### Error:\n\\`\\`\\`\n${stack}\n\\`\\`\\`\n`,\n          )}`,\n        );\n      }\n    },\n  };\n};\n", "import { useCallback, Dispatch, SetStateAction, useSyncExternalStore, useMemo } from \"react\";\nimport { Cache } from \"@raycast/api\";\nimport { useLatest } from \"./useLatest\";\nimport { replacer, reviver } from \"./helpers\";\n\nconst rootCache = /* #__PURE__ */ Symbol(\"cache without namespace\");\nconst cacheMap = /* #__PURE__ */ new Map<string | symbol, Cache>();\n\n/**\n * Returns a stateful value, and a function to update it. The value will be kept between command runs.\n *\n * @remark The value needs to be JSON serializable.\n *\n * @param key - The unique identifier of the state. This can be used to share the state across components and/or commands.\n * @param initialState - The initial value of the state if there aren't any in the Cache yet.\n */\nexport function useCachedState<T>(\n  key: string,\n  initialState: T,\n  config?: { cacheNamespace?: string },\n): [T, Dispatch<SetStateAction<T>>];\nexport function useCachedState<T = undefined>(key: string): [T | undefined, Dispatch<SetStateAction<T | undefined>>];\nexport function useCachedState<T>(\n  key: string,\n  initialState?: T,\n  config?: { cacheNamespace?: string },\n): [T, Dispatch<SetStateAction<T>>] {\n  const cacheKey = config?.cacheNamespace || rootCache;\n  const cache =\n    cacheMap.get(cacheKey) || cacheMap.set(cacheKey, new Cache({ namespace: config?.cacheNamespace })).get(cacheKey);\n\n  if (!cache) {\n    throw new Error(\"Missing cache\");\n  }\n\n  const keyRef = useLatest(key);\n  const initialValueRef = useLatest(initialState);\n\n  const cachedState = useSyncExternalStore(cache.subscribe, () => {\n    try {\n      return cache.get(keyRef.current);\n    } catch (error) {\n      console.error(\"Could not get Cache data:\", error);\n      return undefined;\n    }\n  });\n\n  const state = useMemo(() => {\n    if (typeof cachedState !== \"undefined\") {\n      if (cachedState === \"undefined\") {\n        return undefined;\n      }\n      try {\n        return JSON.parse(cachedState, reviver);\n      } catch (err) {\n        // the data got corrupted somehow\n        console.warn(\"The cached data is corrupted\", err);\n        return initialValueRef.current;\n      }\n    } else {\n      return initialValueRef.current;\n    }\n  }, [cachedState, initialValueRef]);\n\n  const stateRef = useLatest(state);\n\n  const setStateAndCache = useCallback(\n    (updater: SetStateAction<T>) => {\n      // @ts-expect-error TS struggles to infer the types as T could potentially be a function\n      const newValue = typeof updater === \"function\" ? updater(stateRef.current) : updater;\n      if (typeof newValue === \"undefined\") {\n        cache.set(keyRef.current, \"undefined\");\n      } else {\n        const stringifiedValue = JSON.stringify(newValue, replacer);\n        cache.set(keyRef.current, stringifiedValue);\n      }\n      return newValue;\n    },\n    [cache, keyRef, stateRef],\n  );\n\n  return [state, setStateAndCache];\n}\n", "import crypto from \"node:crypto\";\nimport { typeHasher } from \"./vendors/type-hasher\";\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function replacer(this: any, key: string, _value: unknown) {\n  const value = this[key];\n  if (value instanceof Date) {\n    return `__raycast_cached_date__${value.toString()}`;\n  }\n  if (Buffer.isBuffer(value)) {\n    return `__raycast_cached_buffer__${value.toString(\"base64\")}`;\n  }\n  return _value;\n}\n\nexport function reviver(_key: string, value: unknown) {\n  if (typeof value === \"string\" && value.startsWith(\"__raycast_cached_date__\")) {\n    return new Date(value.replace(\"__raycast_cached_date__\", \"\"));\n  }\n  if (typeof value === \"string\" && value.startsWith(\"__raycast_cached_buffer__\")) {\n    return Buffer.from(value.replace(\"__raycast_cached_buffer__\", \"\"), \"base64\");\n  }\n  return value;\n}\n\nexport function hash(object: any) {\n  const hashingStream = crypto.createHash(\"sha1\");\n  const hasher = typeHasher(hashingStream);\n  hasher.dispatch(object);\n\n  return hashingStream.digest(\"hex\");\n}\n", "/* eslint-disable @typescript-eslint/ban-ts-comment */\n/* eslint-disable @typescript-eslint/no-this-alias */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport crypto from \"node:crypto\";\n\n/** Check if the given function is a native function */\nfunction isNativeFunction(f: any) {\n  if (typeof f !== \"function\") {\n    return false;\n  }\n  const exp = /^function\\s+\\w*\\s*\\(\\s*\\)\\s*{\\s+\\[native code\\]\\s+}$/i;\n  return exp.exec(Function.prototype.toString.call(f)) !== null;\n}\n\nfunction hashReplacer(value: any): string {\n  if (value instanceof URLSearchParams) {\n    return value.toString();\n  }\n  return value;\n}\n\nexport function typeHasher(\n  writeTo:\n    | crypto.Hash\n    | {\n        buf: string;\n        write: (b: any) => void;\n        end: (b: any) => void;\n        read: () => string;\n      },\n  context: any[] = [],\n) {\n  function write(str: string) {\n    if (\"update\" in writeTo) {\n      return writeTo.update(str, \"utf8\");\n    } else {\n      return writeTo.write(str);\n    }\n  }\n\n  return {\n    dispatch: function (value: any) {\n      value = hashReplacer(value);\n\n      const type = typeof value;\n      if (value === null) {\n        this[\"_null\"]();\n      } else {\n        // @ts-ignore\n        this[\"_\" + type](value);\n      }\n    },\n    _object: function (object: any) {\n      const pattern = /\\[object (.*)\\]/i;\n      const objString = Object.prototype.toString.call(object);\n      let objType = pattern.exec(objString)?.[1] ?? \"unknown:[\" + objString + \"]\";\n      objType = objType.toLowerCase();\n\n      let objectNumber = null as any;\n\n      if ((objectNumber = context.indexOf(object)) >= 0) {\n        this.dispatch(\"[CIRCULAR:\" + objectNumber + \"]\");\n        return;\n      } else {\n        context.push(object);\n      }\n\n      if (Buffer.isBuffer(object)) {\n        write(\"buffer:\");\n        return write(object.toString(\"utf8\"));\n      }\n\n      if (objType !== \"object\" && objType !== \"function\" && objType !== \"asyncfunction\") {\n        // @ts-ignore\n        if (this[\"_\" + objType]) {\n          // @ts-ignore\n          this[\"_\" + objType](object);\n        } else {\n          throw new Error('Unknown object type \"' + objType + '\"');\n        }\n      } else {\n        let keys = Object.keys(object);\n        keys = keys.sort();\n        // Make sure to incorporate special properties, so\n        // Types with different prototypes will produce\n        // a different hash and objects derived from\n        // different functions (`new Foo`, `new Bar`) will\n        // produce different hashes.\n        // We never do this for native functions since some\n        // seem to break because of that.\n        if (!isNativeFunction(object)) {\n          keys.splice(0, 0, \"prototype\", \"__proto__\", \"constructor\");\n        }\n\n        write(\"object:\" + keys.length + \":\");\n        const self = this;\n        return keys.forEach(function (key) {\n          self.dispatch(key);\n          write(\":\");\n          self.dispatch(object[key]);\n          write(\",\");\n        });\n      }\n    },\n    _array: function (arr: any[], unordered: boolean) {\n      unordered = typeof unordered !== \"undefined\" ? unordered : false; // default to options.unorderedArrays\n\n      const self = this;\n      write(\"array:\" + arr.length + \":\");\n      if (!unordered || arr.length <= 1) {\n        arr.forEach(function (entry: any) {\n          self.dispatch(entry);\n        });\n        return;\n      }\n\n      // the unordered case is a little more complicated:\n      // since there is no canonical ordering on objects,\n      // i.e. {a:1} < {a:2} and {a:1} > {a:2} are both false,\n      // we first serialize each entry using a PassThrough stream\n      // before sorting.\n      // also: we can’t use the same context array for all entries\n      // since the order of hashing should *not* matter. instead,\n      // we keep track of the additions to a copy of the context array\n      // and add all of them to the global context array when we’re done\n      let contextAdditions: any[] = [];\n      const entries = arr.map(function (entry: any) {\n        const strm = PassThrough();\n        const localContext = context.slice(); // make copy\n        const hasher = typeHasher(strm, localContext);\n        hasher.dispatch(entry);\n        // take only what was added to localContext and append it to contextAdditions\n        contextAdditions = contextAdditions.concat(localContext.slice(context.length));\n        return strm.read().toString();\n      });\n      context = context.concat(contextAdditions);\n      entries.sort();\n      this._array(entries, false);\n    },\n    _date: function (date: Date) {\n      write(\"date:\" + date.toJSON());\n    },\n    _symbol: function (sym: symbol) {\n      write(\"symbol:\" + sym.toString());\n    },\n    _error: function (err: Error) {\n      write(\"error:\" + err.toString());\n    },\n    _boolean: function (bool: boolean) {\n      write(\"bool:\" + bool.toString());\n    },\n    _string: function (string: string) {\n      write(\"string:\" + string.length + \":\");\n      write(string.toString());\n    },\n    _function: function (fn: any) {\n      write(\"fn:\");\n      if (isNativeFunction(fn)) {\n        this.dispatch(\"[native]\");\n      } else {\n        this.dispatch(fn.toString());\n      }\n\n      // Make sure we can still distinguish native functions\n      // by their name, otherwise String and Function will\n      // have the same hash\n      this.dispatch(\"function-name:\" + String(fn.name));\n\n      this._object(fn);\n    },\n    _number: function (number: number) {\n      write(\"number:\" + number.toString());\n    },\n    _xml: function (xml: any) {\n      write(\"xml:\" + xml.toString());\n    },\n    _null: function () {\n      write(\"Null\");\n    },\n    _undefined: function () {\n      write(\"Undefined\");\n    },\n    _regexp: function (regex: RegExp) {\n      write(\"regex:\" + regex.toString());\n    },\n    _uint8array: function (arr: Uint8Array) {\n      write(\"uint8array:\");\n      this.dispatch(Array.prototype.slice.call(arr));\n    },\n    _uint8clampedarray: function (arr: Uint8ClampedArray) {\n      write(\"uint8clampedarray:\");\n      this.dispatch(Array.prototype.slice.call(arr));\n    },\n    _int8array: function (arr: Int8Array) {\n      write(\"int8array:\");\n      this.dispatch(Array.prototype.slice.call(arr));\n    },\n    _uint16array: function (arr: Uint16Array) {\n      write(\"uint16array:\");\n      this.dispatch(Array.prototype.slice.call(arr));\n    },\n    _int16array: function (arr: Int16Array) {\n      write(\"int16array:\");\n      this.dispatch(Array.prototype.slice.call(arr));\n    },\n    _uint32array: function (arr: Uint32Array) {\n      write(\"uint32array:\");\n      this.dispatch(Array.prototype.slice.call(arr));\n    },\n    _int32array: function (arr: Int32Array) {\n      write(\"int32array:\");\n      this.dispatch(Array.prototype.slice.call(arr));\n    },\n    _float32array: function (arr: Float32Array) {\n      write(\"float32array:\");\n      this.dispatch(Array.prototype.slice.call(arr));\n    },\n    _float64array: function (arr: Float64Array) {\n      write(\"float64array:\");\n      this.dispatch(Array.prototype.slice.call(arr));\n    },\n    _arraybuffer: function (arr: ArrayBuffer) {\n      write(\"arraybuffer:\");\n      this.dispatch(new Uint8Array(arr));\n    },\n    _url: function (url: URL) {\n      write(\"url:\" + url.toString());\n    },\n    _map: function (map: Map<any, any>) {\n      write(\"map:\");\n      const arr = Array.from(map);\n      this._array(arr, true);\n    },\n    _set: function (set: Set<any>) {\n      write(\"set:\");\n      const arr = Array.from(set);\n      this._array(arr, true);\n    },\n    _file: function (file: any) {\n      write(\"file:\");\n      this.dispatch([file.name, file.size, file.type, file.lastModified]);\n    },\n    _blob: function () {\n      throw Error(\n        \"Hashing Blob objects is currently not supported\\n\" +\n          \"(see https://github.com/puleos/object-hash/issues/26)\\n\" +\n          'Use \"options.replacer\" or \"options.ignoreUnknown\"\\n',\n      );\n    },\n    _domwindow: function () {\n      write(\"domwindow\");\n    },\n    _bigint: function (number: bigint) {\n      write(\"bigint:\" + number.toString());\n    },\n    /* Node.js standard native objects */\n    _process: function () {\n      write(\"process\");\n    },\n    _timer: function () {\n      write(\"timer\");\n    },\n    _pipe: function () {\n      write(\"pipe\");\n    },\n    _tcp: function () {\n      write(\"tcp\");\n    },\n    _udp: function () {\n      write(\"udp\");\n    },\n    _tty: function () {\n      write(\"tty\");\n    },\n    _statwatcher: function () {\n      write(\"statwatcher\");\n    },\n    _securecontext: function () {\n      write(\"securecontext\");\n    },\n    _connection: function () {\n      write(\"connection\");\n    },\n    _zlib: function () {\n      write(\"zlib\");\n    },\n    _context: function () {\n      write(\"context\");\n    },\n    _nodescript: function () {\n      write(\"nodescript\");\n    },\n    _httpparser: function () {\n      write(\"httpparser\");\n    },\n    _dataview: function () {\n      write(\"dataview\");\n    },\n    _signal: function () {\n      write(\"signal\");\n    },\n    _fsevent: function () {\n      write(\"fsevent\");\n    },\n    _tlswrap: function () {\n      write(\"tlswrap\");\n    },\n  };\n}\n\n// Mini-implementation of stream.PassThrough\n// We are far from having need for the full implementation, and we can\n// make assumptions like \"many writes, then only one final read\"\n// and we can ignore encoding specifics\nfunction PassThrough() {\n  return {\n    buf: \"\",\n\n    write: function (b: string) {\n      this.buf += b;\n    },\n\n    end: function (b: string) {\n      this.buf += b;\n    },\n\n    read: function () {\n      return this.buf;\n    },\n  };\n}\n", "import { useEffect, useRef, useCallback } from \"react\";\nimport {\n  FunctionReturningPromise,\n  UseCachedPromiseReturnType,\n  MutatePromise,\n  FunctionReturningPaginatedPromise,\n  UnwrapReturn,\n  PaginationOptions,\n} from \"./types\";\nimport { useCachedState } from \"./useCachedState\";\nimport { usePromise, PromiseOptions } from \"./usePromise\";\nimport { useLatest } from \"./useLatest\";\nimport { hash } from \"./helpers\";\n\n// Symbol to differentiate an empty cache from `undefined`\nconst emptyCache = /* #__PURE__ */ Symbol();\n\nexport type CachedPromiseOptions<\n  T extends FunctionReturningPromise | FunctionReturningPaginatedPromise,\n  U,\n> = PromiseOptions<T> & {\n  /**\n   * The initial data if there aren't any in the Cache yet.\n   */\n  initialData?: U;\n  /**\n   * Tells the hook to keep the previous results instead of returning the initial value\n   * if there aren't any in the cache for the new arguments.\n   * This is particularly useful when used for data for a List to avoid flickering.\n   */\n  keepPreviousData?: boolean;\n};\n\n/**\n * Wraps an asynchronous function or a function that returns a Promise in another function, and returns the {@link AsyncState} corresponding to the execution of the function. The last value will be kept between command runs.\n *\n * @remark This overload should be used when working with paginated data sources.\n * @remark When paginating, only the first page will be cached.\n *\n * @example\n * ```\n * import { setTimeout } from \"node:timers/promises\";\n * import { useState } from \"react\";\n * import { List } from \"@raycast/api\";\n * import { useCachedPromise } from \"@raycast/utils\";\n *\n * export default function Command() {\n *   const [searchText, setSearchText] = useState(\"\");\n *\n *   const { isLoading, data, pagination } = useCachedPromise(\n *     (searchText: string) => async (options: { page: number }) => {\n *       await setTimeout(200);\n *       const newData = Array.from({ length: 25 }, (_v, index) => ({\n *         index,\n *         page: options.page,\n *         text: searchText,\n *       }));\n *       return { data: newData, hasMore: options.page < 10 };\n *     },\n *     [searchText],\n *   );\n *\n *   return (\n *     <List isLoading={isLoading} onSearchTextChange={setSearchText} pagination={pagination}>\n *       {data?.map((item) => (\n *         <List.Item\n *           key={`${item.page} ${item.index} ${item.text}`}\n *           title={`Page ${item.page} Item ${item.index}`}\n *           subtitle={item.text}\n *         />\n *       ))}\n *     </List>\n *   );\n * }\n * ```\n */\nexport function useCachedPromise<T extends FunctionReturningPaginatedPromise<[]>>(\n  fn: T,\n): UseCachedPromiseReturnType<UnwrapReturn<T>, undefined>;\nexport function useCachedPromise<T extends FunctionReturningPaginatedPromise, U extends any[] = any[]>(\n  fn: T,\n  args: Parameters<T>,\n  options?: CachedPromiseOptions<T, U>,\n): UseCachedPromiseReturnType<UnwrapReturn<T>, U>;\n\n/**\n * Wraps an asynchronous function or a function that returns a Promise and returns the {@link AsyncState} corresponding to the execution of the function. The last value will be kept between command runs.\n *\n * @remark The value needs to be JSON serializable.\n * @remark The function is assumed to be constant (eg. changing it won't trigger a revalidation).\n *\n * @example\n * ```\n * import { useCachedPromise } from '@raycast/utils';\n *\n * export default function Command() {\n *   const abortable = useRef<AbortController>();\n *   const { isLoading, data, revalidate } = useCachedPromise(async (url: string) => {\n *     const response = await fetch(url, { signal: abortable.current?.signal });\n *     const result = await response.text();\n *     return result\n *   },\n *   ['https://api.example'],\n *   {\n *     abortable\n *   });\n *\n *   return (\n *     <Detail\n *       isLoading={isLoading}\n *       markdown={data}\n *       actions={\n *         <ActionPanel>\n *           <Action title=\"Reload\" onAction={() => revalidate()} />\n *         </ActionPanel>\n *       }\n *     />\n *   );\n * };\n * ```\n */\nexport function useCachedPromise<T extends FunctionReturningPromise<[]>>(\n  fn: T,\n): UseCachedPromiseReturnType<UnwrapReturn<T>, undefined>;\nexport function useCachedPromise<T extends FunctionReturningPromise, U = undefined>(\n  fn: T,\n  args: Parameters<T>,\n  options?: CachedPromiseOptions<T, U>,\n): UseCachedPromiseReturnType<UnwrapReturn<T>, U>;\n\nexport function useCachedPromise<\n  T extends FunctionReturningPromise | FunctionReturningPaginatedPromise,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  U extends any[] | undefined = undefined,\n>(fn: T, args?: Parameters<T>, options?: CachedPromiseOptions<T, U>) {\n  /**\n   * The hook generates a cache key from the promise it receives & its arguments.\n   * Sometimes that's not enough to guarantee uniqueness, so hooks that build on top of `useCachedPromise` can\n   * use an `internal_cacheKeySuffix` to help it.\n   *\n   * @remark For internal use only.\n   */\n  const {\n    initialData,\n    keepPreviousData,\n    internal_cacheKeySuffix,\n    ...usePromiseOptions\n  }: CachedPromiseOptions<T, U> & { internal_cacheKeySuffix?: string } = options || {};\n  const lastUpdateFrom = useRef<\"cache\" | \"promise\">(null);\n\n  const [cachedData, mutateCache] = useCachedState<typeof emptyCache | (UnwrapReturn<T> | U)>(\n    hash(args || []) + internal_cacheKeySuffix,\n    emptyCache,\n    {\n      cacheNamespace: hash(fn),\n    },\n  );\n\n  // Use a ref to store previous returned data. Use the inital data as its inital value from the cache.\n  const laggyDataRef = useRef<Awaited<ReturnType<T>> | U>(cachedData !== emptyCache ? cachedData : (initialData as U));\n  const paginationArgsRef = useRef<PaginationOptions<UnwrapReturn<T> | U> | undefined>(undefined);\n\n  const {\n    mutate: _mutate,\n    revalidate,\n    ...state\n    // @ts-expect-error fn has the same signature in both usePromise and useCachedPromise\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } = usePromise(fn, args || ([] as any as Parameters<T>), {\n    ...usePromiseOptions,\n    onData(data, pagination) {\n      paginationArgsRef.current = pagination;\n      if (usePromiseOptions.onData) {\n        usePromiseOptions.onData(data, pagination);\n      }\n      if (pagination && pagination.page > 0) {\n        // don't cache beyond the first page\n        return;\n      }\n      lastUpdateFrom.current = \"promise\";\n      laggyDataRef.current = data;\n      mutateCache(data);\n    },\n  });\n\n  let returnedData: U | Awaited<ReturnType<T>> | UnwrapReturn<T>;\n  const pagination = state.pagination;\n  // when paginating, only the first page gets cached, so we return the data we get from `usePromise`, because\n  // it will be accumulated.\n  if (paginationArgsRef.current && paginationArgsRef.current.page > 0 && state.data) {\n    returnedData = state.data as UnwrapReturn<T>;\n    // if the latest update if from the Promise, we keep it\n  } else if (lastUpdateFrom.current === \"promise\") {\n    returnedData = laggyDataRef.current;\n  } else if (keepPreviousData && cachedData !== emptyCache) {\n    // if we want to keep the latest data, we pick the cache but only if it's not empty\n    returnedData = cachedData;\n    if (pagination) {\n      pagination.hasMore = true;\n      pagination.pageSize = cachedData.length;\n    }\n  } else if (keepPreviousData && cachedData === emptyCache) {\n    // if the cache is empty, we will return the previous data\n    returnedData = laggyDataRef.current;\n    // there are no special cases, so either return the cache or initial data\n  } else if (cachedData !== emptyCache) {\n    returnedData = cachedData;\n    if (pagination) {\n      pagination.hasMore = true;\n      pagination.pageSize = cachedData.length;\n    }\n  } else {\n    returnedData = initialData as U;\n  }\n\n  const latestData = useLatest(returnedData);\n\n  // we rewrite the mutate function to update the cache instead\n  const mutate = useCallback<MutatePromise<Awaited<ReturnType<T>> | U>>(\n    async (asyncUpdate, options) => {\n      let dataBeforeOptimisticUpdate;\n      try {\n        if (options?.optimisticUpdate) {\n          if (typeof options?.rollbackOnError !== \"function\" && options?.rollbackOnError !== false) {\n            // keep track of the data before the optimistic update,\n            // but only if we need it (eg. only when we want to automatically rollback after)\n            dataBeforeOptimisticUpdate = structuredClone(latestData.current);\n          }\n          const data = options.optimisticUpdate(latestData.current);\n          lastUpdateFrom.current = \"cache\";\n          laggyDataRef.current = data;\n          mutateCache(data);\n        }\n        return await _mutate(asyncUpdate, { shouldRevalidateAfter: options?.shouldRevalidateAfter });\n      } catch (err) {\n        if (typeof options?.rollbackOnError === \"function\") {\n          const data = options.rollbackOnError(latestData.current);\n          lastUpdateFrom.current = \"cache\";\n          laggyDataRef.current = data;\n          mutateCache(data);\n        } else if (options?.optimisticUpdate && options?.rollbackOnError !== false) {\n          lastUpdateFrom.current = \"cache\";\n          // @ts-expect-error when undefined, it's expected\n          laggyDataRef.current = dataBeforeOptimisticUpdate;\n          // @ts-expect-error when undefined, it's expected\n          mutateCache(dataBeforeOptimisticUpdate);\n        }\n        throw err;\n      }\n    },\n    [mutateCache, _mutate, latestData, laggyDataRef, lastUpdateFrom],\n  );\n\n  useEffect(() => {\n    if (cachedData !== emptyCache) {\n      lastUpdateFrom.current = \"cache\";\n      laggyDataRef.current = cachedData;\n    }\n  }, [cachedData]);\n\n  return {\n    data: returnedData,\n    isLoading: state.isLoading,\n    error: state.error,\n    mutate: paginationArgsRef.current && paginationArgsRef.current.page > 0 ? _mutate : mutate,\n    pagination,\n    revalidate,\n  };\n}\n", "import { useCallback, useMemo, useRef } from \"react\";\nimport { useCachedPromise, CachedPromiseOptions } from \"./useCachedPromise\";\nimport { useLatest } from \"./useLatest\";\nimport { FunctionReturningPaginatedPromise, FunctionReturningPromise, UseCachedPromiseReturnType } from \"./types\";\nimport { isJSON } from \"./fetch-utils\";\nimport { hash } from \"./helpers\";\n\nasync function defaultParsing(response: Response) {\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  }\n\n  const contentTypeHeader = response.headers.get(\"content-type\");\n\n  if (contentTypeHeader && isJSON(contentTypeHeader)) {\n    return await response.json();\n  }\n  return await response.text();\n}\n\nfunction defaultMapping<V, T extends unknown[]>(result: V): { data: T; hasMore?: boolean; cursor?: any } {\n  return { data: result as unknown as T, hasMore: false };\n}\n\ntype RequestInfo = string | URL | globalThis.Request;\ntype PaginatedRequestInfo = (pagination: { page: number; lastItem?: any; cursor?: any }) => RequestInfo;\n\n/**\n * Fetches the paginatedURL and returns the {@link AsyncState} corresponding to the execution of the fetch. The last value will be kept between command runs.\n *\n * @remark This overload should be used when working with paginated data sources.\n * @remark When paginating, only the first page will be cached.\n *\n * @example\n * ```\n * import { Icon, Image, List } from \"@raycast/api\";\n * import { useFetch } from \"@raycast/utils\";\n * import { useState } from \"react\";\n *\n * type SearchResult = { companies: Company[]; page: number; totalPages: number };\n * type Company = { id: number; name: string; smallLogoUrl?: string };\n * export default function Command() {\n *   const [searchText, setSearchText] = useState(\"\");\n *   const { isLoading, data, pagination } = useFetch(\n *     (options) =>\n *       \"https://api.ycombinator.com/v0.1/companies?\" +\n *       new URLSearchParams({ page: String(options.page + 1), q: searchText }).toString(),\n *     {\n *       mapResult(result: SearchResult) {\n *         return {\n *           data: result.companies,\n *           hasMore: result.page < result.totalPages,\n *         };\n *       },\n *       keepPreviousData: true,\n *       initialData: [],\n *     },\n *   );\n *\n *   return (\n *     <List isLoading={isLoading} pagination={pagination} onSearchTextChange={setSearchText}>\n *       {data.map((company) => (\n *         <List.Item\n *           key={company.id}\n *           icon={{ source: company.smallLogoUrl ?? Icon.MinusCircle, mask: Image.Mask.RoundedRectangle }}\n *           title={company.name}\n *         />\n *       ))}\n *     </List>\n *   );\n * }\n * ```\n */\nexport function useFetch<V = unknown, U = undefined, T extends unknown[] = unknown[]>(\n  url: PaginatedRequestInfo,\n  options: RequestInit & {\n    mapResult: (result: V) => { data: T; hasMore?: boolean; cursor?: any };\n    parseResponse?: (response: Response) => Promise<V>;\n  } & Omit<CachedPromiseOptions<(url: RequestInfo, options?: RequestInit) => Promise<T>, U>, \"abortable\">,\n): UseCachedPromiseReturnType<T, U>;\n/**\n * Fetch the URL and returns the {@link AsyncState} corresponding to the execution of the fetch. The last value will be kept between command runs.\n *\n * @example\n * ```\n * import { useFetch } from '@raycast/utils';\n *\n * export default function Command() {\n *   const { isLoading, data, revalidate } = useFetch('https://api.example');\n *\n *   return (\n *     <Detail\n *       isLoading={isLoading}\n *       markdown={data}\n *       actions={\n *         <ActionPanel>\n *           <Action title=\"Reload\" onAction={() => revalidate()} />\n *         </ActionPanel>\n *       }\n *     />\n *   );\n * };\n * ```\n */\nexport function useFetch<V = unknown, U = undefined, T = V>(\n  url: RequestInfo,\n  options?: RequestInit & {\n    mapResult?: (result: V) => { data: T; hasMore?: boolean; cursor?: any };\n    parseResponse?: (response: Response) => Promise<V>;\n  } & Omit<CachedPromiseOptions<(url: RequestInfo, options?: RequestInit) => Promise<T>, U>, \"abortable\">,\n): UseCachedPromiseReturnType<T, U> & { pagination: undefined };\n\nexport function useFetch<V = unknown, U = undefined, T extends unknown[] = unknown[]>(\n  url: RequestInfo | PaginatedRequestInfo,\n  options?: RequestInit & {\n    mapResult?: (result: V) => { data: T; hasMore?: boolean; cursor?: any };\n    parseResponse?: (response: Response) => Promise<V>;\n  } & Omit<CachedPromiseOptions<(url: RequestInfo, options?: RequestInit) => Promise<T>, U>, \"abortable\">,\n): UseCachedPromiseReturnType<T, U> {\n  const {\n    parseResponse,\n    mapResult,\n    initialData,\n    execute,\n    keepPreviousData,\n    onError,\n    onData,\n    onWillExecute,\n    failureToastOptions,\n    ...fetchOptions\n  } = options || {};\n\n  const useCachedPromiseOptions: CachedPromiseOptions<(url: RequestInfo, options?: RequestInit) => Promise<T>, U> = {\n    initialData,\n    execute,\n    keepPreviousData,\n    onError,\n    onData,\n    onWillExecute,\n    failureToastOptions,\n  };\n\n  const parseResponseRef = useLatest(parseResponse || defaultParsing);\n  const mapResultRef = useLatest(mapResult || defaultMapping);\n  const urlRef = useRef<RequestInfo | PaginatedRequestInfo>(null);\n  const firstPageUrlRef = useRef<RequestInfo | undefined>(null);\n  const firstPageUrl = typeof url === \"function\" ? url({ page: 0 }) : undefined;\n  /**\n   * When paginating, `url` is a `PaginatedRequestInfo`, so we only want to update the ref when the `firstPageUrl` changes.\n   * When not paginating, `url` is a `RequestInfo`, so we want to update the ref whenever `url` changes.\n   */\n  if (!urlRef.current || typeof firstPageUrlRef.current === \"undefined\" || firstPageUrlRef.current !== firstPageUrl) {\n    urlRef.current = url;\n  }\n  firstPageUrlRef.current = firstPageUrl;\n  const abortable = useRef<AbortController>(null);\n\n  const paginatedFn: FunctionReturningPaginatedPromise<[PaginatedRequestInfo, typeof fetchOptions], T> = useCallback(\n    (url: PaginatedRequestInfo, options?: RequestInit) => async (pagination: { page: number }) => {\n      const res = await fetch(url(pagination), { signal: abortable.current?.signal, ...options });\n      const parsed = (await parseResponseRef.current(res)) as V;\n      return mapResultRef.current?.(parsed);\n    },\n    [parseResponseRef, mapResultRef],\n  );\n  const fn: FunctionReturningPromise<[RequestInfo, RequestInit?], T> = useCallback(\n    async (url: RequestInfo, options?: RequestInit) => {\n      const res = await fetch(url, { signal: abortable.current?.signal, ...options });\n      const parsed = (await parseResponseRef.current(res)) as V;\n      const mapped = mapResultRef.current(parsed);\n      return mapped?.data as unknown as T;\n    },\n    [parseResponseRef, mapResultRef],\n  );\n\n  const promise = useMemo(() => {\n    if (firstPageUrlRef.current) {\n      return paginatedFn;\n    }\n    return fn;\n  }, [firstPageUrlRef, fn, paginatedFn]);\n\n  // @ts-expect-error lastItem can't be inferred properly\n  return useCachedPromise(promise, [urlRef.current as PaginatedRequestInfo, fetchOptions], {\n    ...useCachedPromiseOptions,\n    internal_cacheKeySuffix: firstPageUrlRef.current + hash(mapResultRef.current) + hash(parseResponseRef.current),\n    abortable,\n  });\n}\n", "export function isJSON(contentTypeHeader: string | null | undefined): boolean {\n  if (contentTypeHeader) {\n    const mediaType = parseContentType(contentTypeHeader);\n\n    if (!mediaType) {\n      return false;\n    }\n\n    if (mediaType.subtype === \"json\") {\n      return true;\n    }\n\n    if (mediaType.suffix === \"json\") {\n      return true;\n    }\n\n    if (mediaType.suffix && /\\bjson\\b/i.test(mediaType.suffix)) {\n      return true;\n    }\n\n    if (mediaType.subtype && /\\bjson\\b/i.test(mediaType.subtype)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * RegExp to match type in RFC 6838 with an optional trailing `;` because some Apple APIs returns one...\n *\n * type-name = restricted-name\n * subtype-name = restricted-name\n * restricted-name = restricted-name-first *126restricted-name-chars\n * restricted-name-first  = ALPHA / DIGIT\n * restricted-name-chars  = ALPHA / DIGIT / \"!\" / \"#\" /\n *                          \"$\" / \"&\" / \"-\" / \"^\" / \"_\"\n * restricted-name-chars =/ \".\" ; Characters before first dot always\n *                              ; specify a facet name\n * restricted-name-chars =/ \"+\" ; Characters after last plus always\n *                              ; specify a structured syntax suffix\n * ALPHA =  %x41-5A / %x61-7A   ; A-Z / a-z\n * DIGIT =  %x30-39             ; 0-9\n */\nconst MEDIA_TYPE_REGEXP = /^([A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126})\\/([A-Za-z0-9][A-Za-z0-9!#$&^_.+-]{0,126});?$/;\n\nfunction parseContentType(header: string) {\n  const headerDelimitationindex = header.indexOf(\";\");\n  const contentType = headerDelimitationindex !== -1 ? header.slice(0, headerDelimitationindex).trim() : header.trim();\n\n  const match = MEDIA_TYPE_REGEXP.exec(contentType.toLowerCase().toLowerCase());\n\n  if (!match) {\n    return;\n  }\n\n  const type = match[1];\n  let subtype = match[2];\n  let suffix;\n\n  // suffix after last +\n  const index = subtype.lastIndexOf(\"+\");\n  if (index !== -1) {\n    suffix = subtype.substring(index + 1);\n    subtype = subtype.substring(0, index);\n  }\n\n  return { type, subtype, suffix };\n}\n", "/*\n * Inspired by Execa\n */\n\nimport childProcess from \"node:child_process\";\nimport { useCallback, useRef } from \"react\";\n\nimport { useCachedPromise, CachedPromiseOptions } from \"./useCachedPromise\";\nimport { useLatest } from \"./useLatest\";\nimport { UseCachedPromiseReturnType } from \"./types\";\nimport {\n  getSpawnedPromise,\n  getSpawnedResult,\n  handleOutput,\n  defaultParsing,\n  ParseExecOutputHandler,\n} from \"./exec-utils\";\n\ntype ExecOptions = {\n  /**\n   * If `true`, runs the command inside of a shell. Uses `/bin/sh`. A different shell can be specified as a string. The shell should understand the `-c` switch.\n   *\n   * We recommend against using this option since it is:\n   * - not cross-platform, encouraging shell-specific syntax.\n   * - slower, because of the additional shell interpretation.\n   * - unsafe, potentially allowing command injection.\n   *\n   * @default false\n   */\n  shell?: boolean | string;\n  /**\n   * Strip the final newline character from the output.\n   * @default true\n   */\n  stripFinalNewline?: boolean;\n  /**\n   * Current working directory of the child process.\n   * @default process.cwd()\n   */\n  cwd?: string;\n  /**\n   * Environment key-value pairs. Extends automatically from `process.env`.\n   * @default process.env\n   */\n  env?: NodeJS.ProcessEnv;\n  /**\n   * Specify the character encoding used to decode the stdout and stderr output. If set to `\"buffer\"`, then stdout and stderr will be a Buffer instead of a string.\n   *\n   * @default \"utf8\"\n   */\n  encoding?: BufferEncoding | \"buffer\";\n  /**\n   * Write some input to the `stdin` of your binary.\n   */\n  input?: string | Buffer;\n  /** If timeout is greater than `0`, the parent will send the signal `SIGTERM` if the child runs longer than timeout milliseconds.\n   *\n   * @default 10000\n   */\n  timeout?: number;\n};\n\nconst SPACES_REGEXP = / +/g;\nfunction parseCommand(command: string, args?: string[]) {\n  if (args) {\n    return [command, ...args];\n  }\n  const tokens: string[] = [];\n  for (const token of command.trim().split(SPACES_REGEXP)) {\n    // Allow spaces to be escaped by a backslash if not meant as a delimiter\n    const previousToken = tokens[tokens.length - 1];\n    if (previousToken && previousToken.endsWith(\"\\\\\")) {\n      // Merge previous token with current one\n      tokens[tokens.length - 1] = `${previousToken.slice(0, -1)} ${token}`;\n    } else {\n      tokens.push(token);\n    }\n  }\n\n  return tokens;\n}\n\ntype ExecCachedPromiseOptions<T, U> = Omit<\n  CachedPromiseOptions<\n    (_command: string, _args: string[], _options?: ExecOptions, input?: string | Buffer) => Promise<T>,\n    U\n  >,\n  \"abortable\"\n>;\n\n/**\n * Executes a command and returns the {@link AsyncState} corresponding to the execution of the command. The last value will be kept between command runs.\n *\n * @remark When specifying the arguments via the `command` string, if the file or an argument of the command contains spaces, they must be escaped with backslashes. This matters especially if `command` is not a constant but a variable, for example with `__dirname` or `process.cwd()`. Except for spaces, no escaping/quoting is needed.\n *\n * The `shell` option must be used if the command uses shell-specific features (for example, `&&` or `||`), as opposed to being a simple file followed by its arguments.\n *\n * @example\n * ```\n * import { useExec } from '@raycast/utils';\n *\n * export default function Command() {\n *   const { isLoading, data, revalidate } = useExec(\"brew\", [\"info\", \"--json=v2\", \"--installed\"]);\n *   const results = useMemo<{}[]>(() => JSON.parse(data || \"[]\"), [data]);\n *\n *   return (\n *     <List isLoading={isLoading}>\n *      {(data || []).map((item) => (\n *        <List.Item key={item.id} title={item.name} />\n *      ))}\n *    </List>\n *   );\n * };\n * ```\n */\nexport function useExec<T = Buffer, U = undefined>(\n  command: string,\n  options: {\n    parseOutput?: ParseExecOutputHandler<T, Buffer, ExecOptions>;\n  } & ExecOptions & {\n      encoding: \"buffer\";\n    } & ExecCachedPromiseOptions<T, U>,\n): UseCachedPromiseReturnType<T, U>;\nexport function useExec<T = string, U = undefined>(\n  command: string,\n  options?: {\n    parseOutput?: ParseExecOutputHandler<T, string, ExecOptions>;\n  } & ExecOptions & {\n      encoding?: BufferEncoding;\n    } & ExecCachedPromiseOptions<T, U>,\n): UseCachedPromiseReturnType<T, U>;\nexport function useExec<T = Buffer, U = undefined>(\n  file: string,\n  /**\n   * The arguments to pass to the file. No escaping/quoting is needed.\n   *\n   * If defined, the commands needs to be a file to execute. If undefined, the arguments will be parsed from the command.\n   */\n  args: string[],\n  options: {\n    parseOutput?: ParseExecOutputHandler<T, Buffer, ExecOptions>;\n  } & ExecOptions & {\n      encoding: \"buffer\";\n    } & ExecCachedPromiseOptions<T, U>,\n): UseCachedPromiseReturnType<T, U>;\nexport function useExec<T = string, U = undefined>(\n  file: string,\n  /**\n   * The arguments to pass to the file. No escaping/quoting is needed.\n   *\n   * If defined, the commands needs to be a file to execute. If undefined, the arguments will be parsed from the command.\n   */\n  args: string[],\n  options?: {\n    parseOutput?: ParseExecOutputHandler<T, string, ExecOptions>;\n  } & ExecOptions & {\n      encoding?: BufferEncoding;\n    } & ExecCachedPromiseOptions<T, U>,\n): UseCachedPromiseReturnType<T, U>;\nexport function useExec<T, U = undefined>(\n  command: string,\n  optionsOrArgs?:\n    | string[]\n    | ({\n        parseOutput?: ParseExecOutputHandler<T, Buffer, ExecOptions> | ParseExecOutputHandler<T, string, ExecOptions>;\n      } & ExecOptions &\n        ExecCachedPromiseOptions<T, U>),\n  options?: {\n    parseOutput?: ParseExecOutputHandler<T, Buffer, ExecOptions> | ParseExecOutputHandler<T, string, ExecOptions>;\n  } & ExecOptions &\n    ExecCachedPromiseOptions<T, U>,\n): UseCachedPromiseReturnType<T, U> {\n  const {\n    parseOutput,\n    input,\n    onData,\n    onWillExecute,\n    initialData,\n    execute,\n    keepPreviousData,\n    onError,\n    failureToastOptions,\n    ...execOptions\n  } = Array.isArray(optionsOrArgs) ? options || {} : optionsOrArgs || {};\n\n  const useCachedPromiseOptions: ExecCachedPromiseOptions<T, U> = {\n    initialData,\n    execute,\n    keepPreviousData,\n    onError,\n    onData,\n    onWillExecute,\n    failureToastOptions,\n  };\n\n  const abortable = useRef<AbortController>(null);\n  const parseOutputRef = useLatest(parseOutput || defaultParsing);\n\n  const fn = useCallback(\n    async (_command: string, _args: string[], _options?: ExecOptions, input?: string | Buffer) => {\n      const [file, ...args] = parseCommand(_command, _args);\n      const command = [file, ...args].join(\" \");\n\n      const options = {\n        stripFinalNewline: true,\n        ..._options,\n        timeout: _options?.timeout || 10000,\n        signal: abortable.current?.signal,\n        encoding: _options?.encoding === null ? \"buffer\" : _options?.encoding || \"utf8\",\n        env: { PATH: \"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\", ...process.env, ..._options?.env },\n      };\n\n      const spawned = childProcess.spawn(file, args, options);\n      const spawnedPromise = getSpawnedPromise(spawned, options);\n\n      if (input) {\n        spawned.stdin.end(input);\n      }\n\n      const [{ error, exitCode, signal, timedOut }, stdoutResult, stderrResult] = await getSpawnedResult(\n        spawned,\n        options,\n        spawnedPromise,\n      );\n      const stdout = handleOutput(options, stdoutResult);\n      const stderr = handleOutput(options, stderrResult);\n\n      return parseOutputRef.current({\n        // @ts-expect-error too many generics, I give up\n        stdout,\n        // @ts-expect-error too many generics, I give up\n        stderr,\n        error,\n        exitCode,\n        signal,\n        timedOut,\n        command,\n        options,\n        parentError: new Error(),\n      }) as T;\n    },\n    [parseOutputRef],\n  );\n\n  // @ts-expect-error T can't be a Promise so it's actually the same\n  return useCachedPromise(fn, [command, Array.isArray(optionsOrArgs) ? optionsOrArgs : [], execOptions, input], {\n    ...useCachedPromiseOptions,\n    abortable,\n  });\n}\n", "import childProcess from \"node:child_process\";\nimport { constants as BufferConstants } from \"node:buffer\";\nimport Stream from \"node:stream\";\nimport { promisify } from \"node:util\";\nimport { onExit } from \"./vendors/signal-exit\";\n\nexport type SpawnedPromise = Promise<{\n  exitCode: number | null;\n  error?: Error;\n  signal: NodeJS.Signals | null;\n  timedOut: boolean;\n}>;\n\nexport function getSpawnedPromise(\n  spawned: childProcess.ChildProcessWithoutNullStreams,\n  { timeout }: { timeout?: number } = {},\n): SpawnedPromise {\n  const spawnedPromise: SpawnedPromise = new Promise((resolve, reject) => {\n    spawned.on(\"exit\", (exitCode, signal) => {\n      resolve({ exitCode, signal, timedOut: false });\n    });\n\n    spawned.on(\"error\", (error) => {\n      reject(error);\n    });\n\n    if (spawned.stdin) {\n      spawned.stdin.on(\"error\", (error) => {\n        reject(error);\n      });\n    }\n  });\n\n  const removeExitHandler = onExit(() => {\n    spawned.kill();\n  });\n\n  if (timeout === 0 || timeout === undefined) {\n    return spawnedPromise.finally(() => removeExitHandler());\n  }\n\n  let timeoutId: NodeJS.Timeout;\n  const timeoutPromise: SpawnedPromise = new Promise((_resolve, reject) => {\n    timeoutId = setTimeout(() => {\n      spawned.kill(\"SIGTERM\");\n      reject(Object.assign(new Error(\"Timed out\"), { timedOut: true, signal: \"SIGTERM\" }));\n    }, timeout);\n  });\n\n  const safeSpawnedPromise = spawnedPromise.finally(() => {\n    clearTimeout(timeoutId);\n  });\n\n  return Promise.race([timeoutPromise, safeSpawnedPromise]).finally(() => removeExitHandler());\n}\n\nclass MaxBufferError extends Error {\n  constructor() {\n    super(\"The output is too big\");\n    this.name = \"MaxBufferError\";\n  }\n}\n\nfunction bufferStream<T extends string | Buffer>(options: { encoding: BufferEncoding | \"buffer\" }) {\n  const { encoding } = options;\n  const isBuffer = encoding === \"buffer\";\n\n  // @ts-expect-error missing the methods we are adding below\n  const stream: Stream.PassThrough & { getBufferedValue: () => T; getBufferedLength: () => number } =\n    new Stream.PassThrough({ objectMode: false });\n\n  if (encoding && encoding !== \"buffer\") {\n    stream.setEncoding(encoding);\n  }\n\n  let length = 0;\n  const chunks: any[] = [];\n\n  stream.on(\"data\", (chunk) => {\n    chunks.push(chunk);\n\n    length += chunk.length;\n  });\n\n  stream.getBufferedValue = () => {\n    return (isBuffer ? Buffer.concat(chunks, length) : chunks.join(\"\")) as T;\n  };\n\n  stream.getBufferedLength = () => length;\n\n  return stream;\n}\n\nasync function getStream<T extends string | Buffer>(\n  inputStream: Stream.Readable,\n  options: { encoding: BufferEncoding | \"buffer\" },\n) {\n  const stream = bufferStream<T>(options);\n\n  await new Promise<void>((resolve, reject) => {\n    const rejectPromise = (error: Error & { bufferedData?: T }) => {\n      // Don't retrieve an oversized buffer.\n      if (error && stream.getBufferedLength() <= BufferConstants.MAX_LENGTH) {\n        error.bufferedData = stream.getBufferedValue();\n      }\n\n      reject(error);\n    };\n\n    (async () => {\n      try {\n        await promisify(Stream.pipeline)(inputStream, stream);\n        resolve();\n      } catch (error) {\n        rejectPromise(error as any);\n      }\n    })();\n\n    stream.on(\"data\", () => {\n      // 80mb\n      if (stream.getBufferedLength() > 1000 * 1000 * 80) {\n        rejectPromise(new MaxBufferError());\n      }\n    });\n  });\n\n  return stream.getBufferedValue();\n}\n\n// On failure, `result.stdout|stderr` should contain the currently buffered stream\nasync function getBufferedData<T extends string | Buffer>(stream: Stream.Readable, streamPromise: Promise<T>) {\n  stream.destroy();\n\n  try {\n    return await streamPromise;\n  } catch (error) {\n    return (error as any as { bufferedData: T }).bufferedData;\n  }\n}\n\nexport async function getSpawnedResult<T extends string | Buffer>(\n  { stdout, stderr }: childProcess.ChildProcessWithoutNullStreams,\n  { encoding }: { encoding: BufferEncoding | \"buffer\" },\n  processDone: SpawnedPromise,\n) {\n  const stdoutPromise = getStream<T>(stdout, { encoding });\n  const stderrPromise = getStream<T>(stderr, { encoding });\n\n  try {\n    return await Promise.all([processDone, stdoutPromise, stderrPromise]);\n  } catch (error: any) {\n    return Promise.all([\n      {\n        error: error as Error,\n        exitCode: null,\n        signal: error.signal as NodeJS.Signals | null,\n        timedOut: (error.timedOut as boolean) || false,\n      },\n      getBufferedData(stdout, stdoutPromise),\n      getBufferedData(stderr, stderrPromise),\n    ]);\n  }\n}\n\nfunction stripFinalNewline<T extends string | Buffer>(input: T) {\n  const LF = typeof input === \"string\" ? \"\\n\" : \"\\n\".charCodeAt(0);\n  const CR = typeof input === \"string\" ? \"\\r\" : \"\\r\".charCodeAt(0);\n\n  if (input[input.length - 1] === LF) {\n    // @ts-expect-error we are doing some nasty stuff here\n    input = input.slice(0, -1);\n  }\n\n  if (input[input.length - 1] === CR) {\n    // @ts-expect-error we are doing some nasty stuff here\n    input = input.slice(0, -1);\n  }\n\n  return input;\n}\n\nexport function handleOutput<T extends string | Buffer>(options: { stripFinalNewline?: boolean }, value: T) {\n  if (options.stripFinalNewline) {\n    return stripFinalNewline(value);\n  }\n\n  return value;\n}\n\nfunction getErrorPrefix({\n  timedOut,\n  timeout,\n  signal,\n  exitCode,\n}: {\n  exitCode: number | null;\n  signal: NodeJS.Signals | null;\n  timedOut: boolean;\n  timeout?: number;\n}) {\n  if (timedOut) {\n    return `timed out after ${timeout} milliseconds`;\n  }\n\n  if (signal !== undefined && signal !== null) {\n    return `was killed with ${signal}`;\n  }\n\n  if (exitCode !== undefined && exitCode !== null) {\n    return `failed with exit code ${exitCode}`;\n  }\n\n  return \"failed\";\n}\n\nfunction makeError({\n  stdout,\n  stderr,\n  error,\n  signal,\n  exitCode,\n  command,\n  timedOut,\n  options,\n  parentError,\n}: {\n  stdout: string | Buffer;\n  stderr: string | Buffer;\n  error?: Error;\n  exitCode: number | null;\n  signal: NodeJS.Signals | null;\n  timedOut: boolean;\n  command: string;\n  options?: { timeout?: number };\n  parentError: Error;\n}) {\n  const prefix = getErrorPrefix({ timedOut, timeout: options?.timeout, signal, exitCode });\n  const execaMessage = `Command ${prefix}: ${command}`;\n  const shortMessage = error ? `${execaMessage}\\n${error.message}` : execaMessage;\n  const message = [shortMessage, stderr, stdout].filter(Boolean).join(\"\\n\");\n\n  if (error) {\n    // @ts-expect-error not on Error\n    error.originalMessage = error.message;\n  } else {\n    error = parentError;\n  }\n\n  error.message = message;\n\n  // @ts-expect-error not on Error\n  error.shortMessage = shortMessage;\n  // @ts-expect-error not on Error\n  error.command = command;\n  // @ts-expect-error not on Error\n  error.exitCode = exitCode;\n  // @ts-expect-error not on Error\n  error.signal = signal;\n  // @ts-expect-error not on Error\n  error.stdout = stdout;\n  // @ts-expect-error not on Error\n  error.stderr = stderr;\n\n  if (\"bufferedData\" in error) {\n    delete error[\"bufferedData\"];\n  }\n\n  return error;\n}\n\nexport type ParseExecOutputHandler<\n  T,\n  DecodedOutput extends string | Buffer = string | Buffer,\n  Options = unknown,\n> = (args: {\n  /** The output of the process on stdout. */\n  stdout: DecodedOutput;\n  /** The output of the process on stderr. */\n  stderr: DecodedOutput;\n  error?: Error;\n  /** The numeric exit code of the process that was run. */\n  exitCode: number | null;\n  /**\n   * The name of the signal that was used to terminate the process. For example, SIGFPE.\n   *\n   * If a signal terminated the process, this property is defined. Otherwise it is null.\n   */\n  signal: NodeJS.Signals | null;\n  /** Whether the process timed out. */\n  timedOut: boolean;\n  /** The command that was run, for logging purposes. */\n  command: string;\n  options?: Options;\n}) => T;\n\nexport function defaultParsing<T extends string | Buffer>({\n  stdout,\n  stderr,\n  error,\n  exitCode,\n  signal,\n  timedOut,\n  command,\n  options,\n  parentError,\n}: {\n  stdout: T;\n  stderr: T;\n  error?: Error;\n  exitCode: number | null;\n  signal: NodeJS.Signals | null;\n  timedOut: boolean;\n  command: string;\n  options?: { timeout?: number };\n  parentError: Error;\n}) {\n  if (error || exitCode !== 0 || signal !== null) {\n    const returnedError = makeError({\n      error,\n      exitCode,\n      signal,\n      stdout,\n      stderr,\n      command,\n      timedOut,\n      options,\n      parentError,\n    });\n\n    throw returnedError;\n  }\n\n  return stdout;\n}\n", "/* eslint-disable @typescript-eslint/ban-ts-comment */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n// Note: since nyc uses this module to output coverage, any lines\n// that are in the direct sync flow of nyc's outputCoverage are\n// ignored, since we can never get coverage for them.\n// grab a reference to node's real process object right away\n\nconst processOk = (process: any) =>\n  !!process &&\n  typeof process === \"object\" &&\n  typeof process.removeListener === \"function\" &&\n  typeof process.emit === \"function\" &&\n  typeof process.reallyExit === \"function\" &&\n  typeof process.listeners === \"function\" &&\n  typeof process.kill === \"function\" &&\n  typeof process.pid === \"number\" &&\n  typeof process.on === \"function\";\nconst kExitEmitter = /* #__PURE__ */ Symbol.for(\"signal-exit emitter\");\n// teeny special purpose ee\nclass Emitter {\n  emitted = {\n    afterExit: false,\n    exit: false,\n  };\n  listeners = {\n    afterExit: [],\n    exit: [],\n  };\n  count = 0;\n  id = Math.random();\n  constructor() {\n    // @ts-ignore\n    if (global[kExitEmitter]) {\n      // @ts-ignore\n      return global[kExitEmitter];\n    }\n    Object.defineProperty(global, kExitEmitter, {\n      value: this,\n      writable: false,\n      enumerable: false,\n      configurable: false,\n    });\n  }\n  on(ev: any, fn: any) {\n    // @ts-ignore\n    this.listeners[ev].push(fn);\n  }\n  removeListener(ev: any, fn: any) {\n    // @ts-ignore\n    const list = this.listeners[ev];\n    const i = list.indexOf(fn);\n    /* c8 ignore start */\n    if (i === -1) {\n      return;\n    }\n    /* c8 ignore stop */\n    if (i === 0 && list.length === 1) {\n      list.length = 0;\n    } else {\n      list.splice(i, 1);\n    }\n  }\n  emit(ev: any, code: any, signal: any): any {\n    // @ts-ignore\n    if (this.emitted[ev]) {\n      return false;\n    }\n    // @ts-ignore\n    this.emitted[ev] = true;\n    let ret = false;\n    // @ts-ignore\n    for (const fn of this.listeners[ev]) {\n      ret = fn(code, signal) === true || ret;\n    }\n    if (ev === \"exit\") {\n      ret = this.emit(\"afterExit\", code, signal) || ret;\n    }\n    return ret;\n  }\n}\n\nclass SignalExitFallback {\n  onExit() {\n    return () => {};\n  }\n  load() {}\n  unload() {}\n}\nclass SignalExit {\n  // \"SIGHUP\" throws an `ENOSYS` error on Windows,\n  // so use a supported signal instead\n  /* c8 ignore start */\n  // @ts-ignore\n  #hupSig = process.platform === \"win32\" ? \"SIGINT\" : \"SIGHUP\";\n  /* c8 ignore stop */\n  #emitter = new Emitter();\n  #process: any;\n  #originalProcessEmit: any;\n  #originalProcessReallyExit: any;\n  #sigListeners = {};\n  #loaded = false;\n  #signals: string[] = [];\n  constructor(process: any) {\n    /**\n     * This is not the set of all possible signals.\n     *\n     * It IS, however, the set of all signals that trigger\n     * an exit on either Linux or BSD systems.  Linux is a\n     * superset of the signal names supported on BSD, and\n     * the unknown signals just fail to register, so we can\n     * catch that easily enough.\n     *\n     * Windows signals are a different set, since there are\n     * signals that terminate Windows processes, but don't\n     * terminate (or don't even exist) on Posix systems.\n     *\n     * Don't bother with SIGKILL.  It's uncatchable, which\n     * means that we can't fire any callbacks anyway.\n     *\n     * If a user does happen to register a handler on a non-\n     * fatal signal like SIGWINCH or something, and then\n     * exit, it'll end up firing `process.emit('exit')`, so\n     * the handler will be fired anyway.\n     *\n     * SIGBUS, SIGFPE, SIGSEGV and SIGILL, when not raised\n     * artificially, inherently leave the process in a\n     * state from which it is not safe to try and enter JS\n     * listeners.\n     */\n    this.#signals.push(\"SIGHUP\", \"SIGINT\", \"SIGTERM\");\n    if (globalThis.process.platform !== \"win32\") {\n      this.#signals.push(\n        \"SIGALRM\",\n        \"SIGABRT\",\n        \"SIGVTALRM\",\n        \"SIGXCPU\",\n        \"SIGXFSZ\",\n        \"SIGUSR2\",\n        \"SIGTRAP\",\n        \"SIGSYS\",\n        \"SIGQUIT\",\n        \"SIGIOT\",\n        // should detect profiler and enable/disable accordingly.\n        // see #21\n        // 'SIGPROF'\n      );\n    }\n    if (globalThis.process.platform === \"linux\") {\n      this.#signals.push(\"SIGIO\", \"SIGPOLL\", \"SIGPWR\", \"SIGSTKFLT\");\n    }\n    this.#process = process;\n    // { <signal>: <listener fn>, ... }\n    this.#sigListeners = {};\n    for (const sig of this.#signals) {\n      // @ts-ignore\n      this.#sigListeners[sig] = () => {\n        // If there are no other listeners, an exit is coming!\n        // Simplest way: remove us and then re-send the signal.\n        // We know that this will kill the process, so we can\n        // safely emit now.\n        const listeners = this.#process.listeners(sig);\n        let { count } = this.#emitter;\n        // This is a workaround for the fact that signal-exit v3 and signal\n        // exit v4 are not aware of each other, and each will attempt to let\n        // the other handle it, so neither of them do. To correct this, we\n        // detect if we're the only handler *except* for previous versions\n        // of signal-exit, and increment by the count of listeners it has\n        // created.\n        /* c8 ignore start */\n        const p = process;\n        if (typeof p.__signal_exit_emitter__ === \"object\" && typeof p.__signal_exit_emitter__.count === \"number\") {\n          count += p.__signal_exit_emitter__.count;\n        }\n        /* c8 ignore stop */\n        if (listeners.length === count) {\n          this.unload();\n          const ret = this.#emitter.emit(\"exit\", null, sig);\n          /* c8 ignore start */\n          const s = sig === \"SIGHUP\" ? this.#hupSig : sig;\n          if (!ret) process.kill(process.pid, s);\n          /* c8 ignore stop */\n        }\n      };\n    }\n    this.#originalProcessReallyExit = process.reallyExit;\n    this.#originalProcessEmit = process.emit;\n  }\n  onExit(cb: any, opts: any) {\n    /* c8 ignore start */\n    if (!processOk(this.#process)) {\n      return () => {};\n    }\n    /* c8 ignore stop */\n    if (this.#loaded === false) {\n      this.load();\n    }\n    const ev = opts?.alwaysLast ? \"afterExit\" : \"exit\";\n    this.#emitter.on(ev, cb);\n    return () => {\n      this.#emitter.removeListener(ev, cb);\n      if (this.#emitter.listeners[\"exit\"].length === 0 && this.#emitter.listeners[\"afterExit\"].length === 0) {\n        this.unload();\n      }\n    };\n  }\n  load() {\n    if (this.#loaded) {\n      return;\n    }\n    this.#loaded = true;\n    // This is the number of onSignalExit's that are in play.\n    // It's important so that we can count the correct number of\n    // listeners on signals, and don't wait for the other one to\n    // handle it instead of us.\n    this.#emitter.count += 1;\n    for (const sig of this.#signals) {\n      try {\n        // @ts-ignore\n        const fn = this.#sigListeners[sig];\n        if (fn) this.#process.on(sig, fn);\n      } catch (_) {\n        // no-op\n      }\n    }\n    this.#process.emit = (ev: any, ...a: any) => {\n      return this.#processEmit(ev, ...a);\n    };\n    this.#process.reallyExit = (code: any) => {\n      return this.#processReallyExit(code);\n    };\n  }\n  unload() {\n    if (!this.#loaded) {\n      return;\n    }\n    this.#loaded = false;\n    this.#signals.forEach((sig) => {\n      // @ts-ignore\n      const listener = this.#sigListeners[sig];\n      /* c8 ignore start */\n      if (!listener) {\n        throw new Error(\"Listener not defined for signal: \" + sig);\n      }\n      /* c8 ignore stop */\n      try {\n        this.#process.removeListener(sig, listener);\n        /* c8 ignore start */\n      } catch (_) {\n        // no-op\n      }\n      /* c8 ignore stop */\n    });\n    this.#process.emit = this.#originalProcessEmit;\n    this.#process.reallyExit = this.#originalProcessReallyExit;\n    this.#emitter.count -= 1;\n  }\n  #processReallyExit(code: any) {\n    /* c8 ignore start */\n    if (!processOk(this.#process)) {\n      return 0;\n    }\n    this.#process.exitCode = code || 0;\n    /* c8 ignore stop */\n    this.#emitter.emit(\"exit\", this.#process.exitCode, null);\n    return this.#originalProcessReallyExit.call(this.#process, this.#process.exitCode);\n  }\n  #processEmit(ev: any, ...args: any) {\n    const og = this.#originalProcessEmit;\n    if (ev === \"exit\" && processOk(this.#process)) {\n      if (typeof args[0] === \"number\") {\n        this.#process.exitCode = args[0];\n        /* c8 ignore start */\n      }\n      /* c8 ignore start */\n      const ret = og.call(this.#process, ev, ...args);\n      /* c8 ignore start */\n      this.#emitter.emit(\"exit\", this.#process.exitCode, null);\n      /* c8 ignore stop */\n      return ret;\n    } else {\n      return og.call(this.#process, ev, ...args);\n    }\n  }\n}\n\nlet signalExit: SignalExit | SignalExitFallback | null = null;\n\nexport const onExit = (\n  cb: any,\n  opts?: {\n    alwaysLast?: boolean | undefined;\n  },\n) => {\n  if (!signalExit) {\n    signalExit = processOk(process) ? new SignalExit(process) : new SignalExitFallback();\n  }\n  return signalExit.onExit(cb, opts);\n};\n", "import { environment } from \"@raycast/api\";\nimport { createReadStream, createWriteStream, mkdirSync, Stats } from \"node:fs\";\nimport { stat } from \"node:fs/promises\";\nimport { join, normalize } from \"node:path\";\nimport { pipeline } from \"node:stream/promises\";\nimport { useRef } from \"react\";\nimport Chain from \"./vendors/stream-chain\";\nimport { parser, PickParser, StreamArray } from \"./vendors/stream-json\";\nimport { isJSON } from \"./fetch-utils\";\nimport { Flatten, FunctionReturningPaginatedPromise, UseCachedPromiseReturnType } from \"./types\";\nimport { CachedPromiseOptions, useCachedPromise } from \"./useCachedPromise\";\nimport { hash } from \"./helpers\";\n\ntype RequestInfo = string | URL | globalThis.Request;\n\nasync function cache(url: RequestInfo, destination: string, fetchOptions?: RequestInit) {\n  if (typeof url === \"object\" || url.startsWith(\"http://\") || url.startsWith(\"https://\")) {\n    return await cacheURL(url, destination, fetchOptions);\n  } else if (url.startsWith(\"file://\")) {\n    return await cacheFile(\n      normalize(decodeURIComponent(new URL(url).pathname)),\n      destination,\n      fetchOptions?.signal ? fetchOptions.signal : undefined,\n    );\n  } else {\n    throw new Error(\"Only HTTP(S) or file URLs are supported\");\n  }\n}\n\nasync function cacheURL(url: RequestInfo, destination: string, fetchOptions?: RequestInit) {\n  const response = await fetch(url, fetchOptions);\n\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch URL\");\n  }\n\n  if (!isJSON(response.headers.get(\"content-type\"))) {\n    throw new Error(\"URL does not return JSON\");\n  }\n  if (!response.body) {\n    throw new Error(\"Failed to retrieve expected JSON content: Response body is missing or inaccessible.\");\n  }\n  await pipeline(\n    response.body as unknown as NodeJS.ReadableStream,\n    createWriteStream(destination),\n    fetchOptions?.signal ? { signal: fetchOptions.signal } : undefined,\n  );\n}\n\nasync function cacheFile(source: string, destination: string, abortSignal?: AbortSignal) {\n  await pipeline(\n    createReadStream(source),\n    createWriteStream(destination),\n    abortSignal ? { signal: abortSignal } : undefined,\n  );\n}\n\nasync function cacheURLIfNecessary(\n  url: RequestInfo,\n  folder: string,\n  fileName: string,\n  forceUpdate: boolean,\n  fetchOptions?: RequestInit,\n) {\n  const destination = join(folder, fileName);\n\n  try {\n    await stat(folder);\n  } catch (e) {\n    mkdirSync(folder, { recursive: true });\n    await cache(url, destination, fetchOptions);\n    return;\n  }\n  if (forceUpdate) {\n    await cache(url, destination, fetchOptions);\n    return;\n  }\n\n  let stats: Stats | undefined = undefined;\n  try {\n    stats = await stat(destination);\n  } catch (e) {\n    await cache(url, destination, fetchOptions);\n    return;\n  }\n\n  if (typeof url === \"object\" || url.startsWith(\"http://\") || url.startsWith(\"https://\")) {\n    const headResponse = await fetch(url, { ...fetchOptions, method: \"HEAD\" });\n    if (!headResponse.ok) {\n      throw new Error(\"Could not fetch URL\");\n    }\n\n    if (!isJSON(headResponse.headers.get(\"content-type\"))) {\n      throw new Error(\"URL does not return JSON\");\n    }\n\n    const lastModified = Date.parse(headResponse.headers.get(\"last-modified\") ?? \"\");\n    if (stats.size === 0 || Number.isNaN(lastModified) || lastModified > stats.mtimeMs) {\n      await cache(url, destination, fetchOptions);\n      return;\n    }\n  } else if (url.startsWith(\"file://\")) {\n    try {\n      const sourceStats = await stat(normalize(decodeURIComponent(new URL(url).pathname)));\n      if (sourceStats.mtimeMs > stats.mtimeMs) {\n        await cache(url, destination, fetchOptions);\n      }\n    } catch (e) {\n      throw new Error(\"Source file could not be read\");\n    }\n  } else {\n    throw new Error(\"Only HTTP(S) or file URLs are supported\");\n  }\n}\n\nasync function* streamJsonFile<T>(\n  filePath: string,\n  pageSize: number,\n  abortSignal?: AbortSignal,\n  dataPath?: string | RegExp,\n  filterFn?: (item: Flatten<T>) => boolean,\n  transformFn?: (item: any) => T,\n): AsyncGenerator<T extends unknown[] ? T : T[]> {\n  let page: T extends unknown[] ? T : T[] = [] as T extends unknown[] ? T : T[];\n\n  const pipeline = Chain([\n    createReadStream(filePath),\n    dataPath ? PickParser({ filter: dataPath }) : parser(),\n    StreamArray(),\n    (data: any) => transformFn?.(data.value) ?? data.value,\n  ]);\n\n  abortSignal?.addEventListener(\"abort\", () => {\n    pipeline.destroy();\n  });\n\n  try {\n    for await (const data of pipeline) {\n      if (abortSignal?.aborted) {\n        return [];\n      }\n      if (!filterFn || filterFn(data)) {\n        page.push(data);\n      }\n      if (page.length >= pageSize) {\n        yield page;\n        page = [] as T extends unknown[] ? T : T[];\n      }\n    }\n  } catch (e) {\n    pipeline.destroy();\n    throw e;\n  }\n\n  if (page.length > 0) {\n    yield page;\n  }\n\n  return [];\n}\n\ntype Options<T> = {\n  /**\n   * The hook expects to iterate through an array of data, so by default, it assumes the JSON it receives itself represents an array. However, sometimes the array of data is wrapped in an object,\n   * i.e. `{ \"success\": true, \"data\": […] }`, or even `{ \"success\": true, \"results\": { \"data\": […] } }`. In those cases, you can use `dataPath` to specify where the data array can be found.\n   *\n   * @remark If your JSON object has multiple arrays that you want to stream data from, you can pass a regular expression to stream through all of them.\n   *\n   * @example For `{ \"success\": true, \"data\": […] }`, dataPath would be `data`\n   * @example For `{ \"success\": true, \"results\": { \"data\": […] } }`, dataPath would be `results.data`\n   * @example For `{ \"success\": true, \"results\": { \"first_list\": […], \"second_list\": […], \"third_list\": […] } }`, dataPath would be `/^results\\.(first_list|second_list|third_list)$\n/`.\n   */\n  dataPath?: string | RegExp;\n  /**\n   * A function to decide whether a particular item should be kept or not.\n   * Defaults to `undefined`, keeping any encountered item.\n   *\n   * @remark The hook will revalidate every time the filter function changes, so you need to use [useCallback](https://react.dev/reference/react/useCallback) to make sure it only changes when it needs to.\n   */\n  filter?: (item: Flatten<T>) => boolean;\n  /**\n   * A function to apply to each item as it is encountered. Useful for a couple of things:\n   * 1. ensuring that all items have the expected properties, and, as on optimization, for getting rid of the properties that you don't care about.\n   * 2. when top-level objects actually represent nested data, which should be flattened. In this case, `transform` can return an array of items, and the hook will stream through each one of those items,\n   * passing them to `filter` etc.\n   *\n   * Defaults to a passthrough function if not provided.\n   *\n   * @remark The hook will revalidate every time the transform function changes, so it is important to use [useCallback](https://react.dev/reference/react/useCallback) to ensure it only changes when necessary to prevent unnecessary re-renders or computations.\n   *\n   * @example\n   * ```\n   * // For data: `{ \"data\": [ { \"type\": \"folder\", \"name\": \"item 1\", \"children\": [ { \"type\": \"item\", \"name\": \"item 2\" }, { \"type\": \"item\", \"name\": \"item 3\" } ] }, { \"type\": \"folder\", \"name\": \"item 4\", children: [] } ] }`\n   *\n   * type Item = {\n   *  type: \"item\";\n   *  name: string;\n   * };\n   *\n   * type Folder = {\n   *   type: \"folder\";\n   *   name: string;\n   *   children: (Item | Folder)[];\n   * };\n   *\n   * function flatten(item: Item | Folder): { name: string }[] {\n   *   const flattened: { name: string }[] = [];\n   *   if (item.type === \"folder\") {\n   *     flattened.push(...item.children.map(flatten).flat());\n   *   }\n   *   if (item.type === \"item\") {\n   *     flattened.push({ name: item.name });\n   *   }\n   *   return flattened;\n   * }\n   *\n   * const transform = useCallback(flatten, []);\n   * const filter = useCallback((item: { name: string }) => {\n   *   …\n   * })\n   * ```\n   */\n  transform?: (item: any) => T;\n  /**\n   * The amount of items to return for each page.\n   * Defaults to `20`.\n   */\n  pageSize?: number;\n};\n\n/**\n * Takes a `http://`, `https://` or `file:///` URL pointing to a JSON resource, caches it to the command's support\n * folder, and streams through its content. Useful when dealing with large JSON arrays which would be too big to fit\n * in the command's memory.\n *\n * @remark The JSON resource needs to consist of an array of objects\n *\n * @example\n * ```\n * import { List } from \"@raycast/api\";\n * import { useStreamJSON } from \"@raycast/utils\";\n *\n * type Formula = { name: string; desc?: string };\n *\n * export default function Main(): React.JSX.Element {\n *   const { data, isLoading, pagination } = useStreamJSON<Formula>(\"https://formulae.brew.sh/api/formula.json\");\n *\n *   return (\n *     <List isLoading={isLoading} pagination={pagination}>\n *       <List.Section title=\"Formulae\">\n *         {data?.map((d) => <List.Item key={d.name} title={d.name} subtitle={d.desc} />)}\n *       </List.Section>\n *     </List>\n *   );\n * }\n * ```\n *\n * @example\n * ```\n * import { List } from \"@raycast/api\";\n * import { useStreamJSON } from \"@raycast/utils\";\n * import { homedir } from \"os\";\n * import { join } from \"path\";\n *\n * type Formula = { name: string; desc?: string };\n *\n * export default function Main(): React.JSX.Element {\n *   const { data, isLoading, pagination } = useStreamJSON<Formula>(`file:///${join(homedir(), \"Downloads\", \"formulae.json\")}`);\n *\n *   return (\n *     <List isLoading={isLoading} pagination={pagination}>\n *       <List.Section title=\"Formulae\">\n *         {data?.map((d) => <List.Item key={d.name} title={d.name} subtitle={d.desc} />)}\n *       </List.Section>\n *     </List>\n *   );\n * }\n * ```\n */\nexport function useStreamJSON<T, U = unknown>(url: RequestInfo): UseCachedPromiseReturnType<T, U>;\n\n/**\n * Takes a `http://`, `https://` or `file:///` URL pointing to a JSON resource, caches it to the command's support\n * folder, and streams through its content. Useful when dealing with large JSON arrays which would be too big to fit\n * in the command's memory.\n *\n * @remark The JSON resource needs to consist of an array of objects\n *\n * @example\n * ```\n * import { List, environment } from \"@raycast/api\";\n * import { useStreamJSON } from \"@raycast/utils\";\n * import { join } from 'path';\n * import { useCallback, useState } from \"react\";\n *\n * type Formula = { name: string; desc?: string };\n *\n * export default function Main(): React.JSX.Element {\n *   const [searchText, setSearchText] = useState(\"\");\n *\n *   const formulaFilter = useCallback(\n *     (item: Formula) => {\n *       if (!searchText) return true;\n *       return item.name.toLocaleLowerCase().includes(searchText);\n *     },\n *     [searchText],\n *   );\n *\n *   const formulaTransform = useCallback((item: any): Formula => {\n *     return { name: item.name, desc: item.desc };\n *   }, []);\n *\n *   const { data, isLoading, pagination } = useStreamJSON(\"https://formulae.brew.sh/api/formula.json\", {\n *     initialData: [] as Formula[],\n *     pageSize: 20,\n *     filter: formulaFilter,\n *     transform: formulaTransform,\n *   });\n *\n *   return (\n *     <List isLoading={isLoading} pagination={pagination} onSearchTextChange={setSearchText}>\n *       <List.Section title=\"Formulae\">\n *         {data.map((d) => (\n *           <List.Item key={d.name} title={d.name} subtitle={d.desc} />\n *         ))}\n *       </List.Section>\n *     </List>\n *   );\n * }\n * ``` support folder, and streams through its content.\n *\n * @example\n * ```\n * import { List, environment } from \"@raycast/api\";\n * import { useStreamJSON } from \"@raycast/utils\";\n * import { join } from \"path\";\n * import { homedir } from \"os\";\n * import { useCallback, useState } from \"react\";\n *\n * type Formula = { name: string; desc?: string };\n *\n * export default function Main(): React.JSX.Element {\n *   const [searchText, setSearchText] = useState(\"\");\n *\n *   const formulaFilter = useCallback(\n *     (item: Formula) => {\n *       if (!searchText) return true;\n *       return item.name.toLocaleLowerCase().includes(searchText);\n *     },\n *     [searchText],\n *   );\n *\n *   const formulaTransform = useCallback((item: any): Formula => {\n *     return { name: item.name, desc: item.desc };\n *   }, []);\n *\n *   const { data, isLoading, pagination } = useStreamJSON(`file:///${join(homedir(), \"Downloads\", \"formulae.json\")}`, {\n *     initialData: [] as Formula[],\n *     pageSize: 20,\n *     filter: formulaFilter,\n *     transform: formulaTransform,\n *   });\n *\n *   return (\n *     <List isLoading={isLoading} pagination={pagination} onSearchTextChange={setSearchText}>\n *       <List.Section title=\"Formulae\">\n *         {data.map((d) => (\n *           <List.Item key={d.name} title={d.name} subtitle={d.desc} />\n *         ))}\n *       </List.Section>\n *     </List>\n *   );\n * }\n * ```\n */\nexport function useStreamJSON<T, U extends any[] = any[]>(\n  url: RequestInfo,\n  options: Options<T> & RequestInit & Omit<CachedPromiseOptions<FunctionReturningPaginatedPromise, U>, \"abortable\">,\n): UseCachedPromiseReturnType<T extends unknown[] ? T : T[], U>;\n\nexport function useStreamJSON<T, U extends any[] = any[]>(\n  url: RequestInfo,\n  options?: Options<T> & RequestInit & Omit<CachedPromiseOptions<FunctionReturningPaginatedPromise, U>, \"abortable\">,\n): UseCachedPromiseReturnType<T extends unknown[] ? T : T[], U> {\n  const {\n    initialData,\n    execute,\n    keepPreviousData,\n    onError,\n    onData,\n    onWillExecute,\n    failureToastOptions,\n    dataPath,\n    filter,\n    transform,\n    pageSize = 20,\n    ...fetchOptions\n  } = options ?? {};\n  const previousUrl = useRef<RequestInfo>(null);\n  const previousDestination = useRef<string>(null);\n\n  const useCachedPromiseOptions: CachedPromiseOptions<FunctionReturningPaginatedPromise, U> = {\n    initialData,\n    execute,\n    keepPreviousData,\n    onError,\n    onData,\n    onWillExecute,\n    failureToastOptions,\n  };\n\n  const generatorRef = useRef<AsyncGenerator<T extends unknown[] ? T : T[]> | null>(null);\n  const controllerRef = useRef<AbortController | null>(null);\n  const hasMoreRef = useRef(false);\n\n  return useCachedPromise(\n    (\n      url: RequestInfo,\n      pageSize: number,\n      fetchOptions: RequestInit | undefined,\n      dataPath: string | RegExp | undefined,\n      filter: ((item: Flatten<T>) => boolean) | undefined,\n      transform: ((item: unknown) => T) | undefined,\n    ) =>\n      async ({ page }) => {\n        const fileName = hash(url) + \".json\";\n        const folder = environment.supportPath;\n        if (page === 0) {\n          controllerRef.current?.abort();\n          controllerRef.current = new AbortController();\n          const destination = join(folder, fileName);\n          /**\n           * Force update the cache when the URL changes but the cache destination does not.\n           */\n          const forceCacheUpdate = Boolean(\n            previousUrl.current &&\n              previousUrl.current !== url &&\n              previousDestination.current &&\n              previousDestination.current === destination,\n          );\n          previousUrl.current = url;\n          previousDestination.current = destination;\n          await cacheURLIfNecessary(url, folder, fileName, forceCacheUpdate, {\n            ...fetchOptions,\n            signal: controllerRef.current?.signal,\n          });\n          generatorRef.current = streamJsonFile(\n            destination,\n            pageSize,\n            controllerRef.current?.signal,\n            dataPath,\n            filter,\n            transform,\n          );\n        }\n        if (!generatorRef.current) {\n          return { hasMore: hasMoreRef.current, data: [] as T extends unknown[] ? T : T[] };\n        }\n        const { value: newData, done } = await generatorRef.current.next();\n        hasMoreRef.current = !done;\n        return { hasMore: hasMoreRef.current, data: (newData ?? []) as T extends unknown[] ? T : T[] };\n      },\n    [url, pageSize, fetchOptions, dataPath, filter, transform],\n    useCachedPromiseOptions,\n  );\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport { Readable, Writable, Duplex } from \"node:stream\";\n\nexport const none = /* #__PURE__ */ Symbol.for(\"object-stream.none\");\nconst stop = /* #__PURE__ */ Symbol.for(\"object-stream.stop\");\n\nconst finalSymbol = /* #__PURE__ */ Symbol.for(\"object-stream.final\");\nconst manySymbol = /* #__PURE__ */ Symbol.for(\"object-stream.many\");\nconst flushSymbol = /* #__PURE__ */ Symbol.for(\"object-stream.flush\");\nconst fListSymbol = /* #__PURE__ */ Symbol.for(\"object-stream.fList\");\n\nconst finalValue = (value: any) => ({ [finalSymbol]: 1, value });\nexport const many = (values: any) => ({ [manySymbol]: 1, values });\n\nconst isFinalValue = (o: any) => o && o[finalSymbol] === 1;\nconst isMany = (o: any) => o && o[manySymbol] === 1;\nconst isFlushable = (o: any) => o && o[flushSymbol] === 1;\nconst isFunctionList = (o: any) => o && o[fListSymbol] === 1;\n\nconst getFinalValue = (o: any) => o.value;\nconst getManyValues = (o: any) => o.values;\nconst getFunctionList = (o: any) => o.fList;\n\nexport const combineManyMut = (a: any, b: any) => {\n  const values = a === none ? [] : a?.[manySymbol] === 1 ? a.values : [a];\n  if (b === none) {\n    // do nothing\n  } else if (b?.[manySymbol] === 1) {\n    values.push(...b.values);\n  } else {\n    values.push(b);\n  }\n  return many(values);\n};\n\nexport const flushable = (write: (value: any) => any, final = null) => {\n  const fn = final ? (value: any) => (value === none ? finalValue(undefined) : write(value)) : write;\n  // @ts-ignore\n  fn[flushSymbol] = 1;\n  return fn;\n};\n\nconst setFunctionList = (o: any, fns: any) => {\n  o.fList = fns;\n  o[fListSymbol] = 1;\n  return o;\n};\n\n// is*NodeStream functions taken from https://github.com/nodejs/node/blob/master/lib/internal/streams/utils.js\nconst isReadableNodeStream = (obj: any) =>\n  obj &&\n  typeof obj.pipe === \"function\" &&\n  typeof obj.on === \"function\" &&\n  (!obj._writableState || (typeof obj._readableState === \"object\" ? obj._readableState.readable : null) !== false) && // Duplex\n  (!obj._writableState || obj._readableState); // Writable has .pipe.\n\nconst isWritableNodeStream = (obj: any) =>\n  obj &&\n  typeof obj.write === \"function\" &&\n  typeof obj.on === \"function\" &&\n  (!obj._readableState || (typeof obj._writableState === \"object\" ? obj._writableState.writable : null) !== false); // Duplex\n\nconst isDuplexNodeStream = (obj: any) =>\n  obj &&\n  typeof obj.pipe === \"function\" &&\n  obj._readableState &&\n  typeof obj.on === \"function\" &&\n  typeof obj.write === \"function\";\n\nconst isReadableWebStream = (obj: any) => obj && globalThis.ReadableStream && obj instanceof globalThis.ReadableStream;\n\nconst isWritableWebStream = (obj: any) => obj && globalThis.WritableStream && obj instanceof globalThis.WritableStream;\n\nconst isDuplexWebStream = (obj: any) =>\n  obj &&\n  globalThis.ReadableStream &&\n  obj.readable instanceof globalThis.ReadableStream &&\n  globalThis.WritableStream &&\n  obj.writable instanceof globalThis.WritableStream;\n\nconst groupFunctions = (output: any, fn: any, index: any, fns: any) => {\n  if (\n    isDuplexNodeStream(fn) ||\n    (!index && isReadableNodeStream(fn)) ||\n    (index === fns.length - 1 && isWritableNodeStream(fn))\n  ) {\n    output.push(fn);\n    return output;\n  }\n  if (isDuplexWebStream(fn)) {\n    output.push(Duplex.fromWeb(fn, { objectMode: true }));\n    return output;\n  }\n  if (!index && isReadableWebStream(fn)) {\n    output.push(Readable.fromWeb(fn, { objectMode: true }));\n    return output;\n  }\n  if (index === fns.length - 1 && isWritableWebStream(fn)) {\n    output.push(Writable.fromWeb(fn, { objectMode: true }));\n    return output;\n  }\n  if (typeof fn != \"function\") throw TypeError(\"Item #\" + index + \" is not a proper stream, nor a function.\");\n  if (!output.length) output.push([]);\n  const last = output[output.length - 1];\n  if (Array.isArray(last)) {\n    last.push(fn);\n  } else {\n    output.push([fn]);\n  }\n  return output;\n};\n\nclass Stop extends Error {}\n\nexport const asStream = (fn: any) => {\n  if (typeof fn != \"function\") throw TypeError(\"Only a function is accepted as the first argument\");\n\n  // pump variables\n  let paused = Promise.resolve();\n  let resolvePaused: ((value: void | PromiseLike<void>) => void) | null = null;\n  const queue: any[] = [];\n\n  // pause/resume\n  const resume: any = () => {\n    if (!resolvePaused) return;\n    resolvePaused();\n    resolvePaused = null;\n    paused = Promise.resolve();\n  };\n  const pause: any = () => {\n    if (resolvePaused) return;\n    paused = new Promise((resolve) => (resolvePaused = resolve));\n  };\n\n  // eslint-disable-next-line prefer-const\n  let stream: Duplex; // will be assigned later\n\n  // data processing\n  const pushResults: any = (values: any) => {\n    if (values && typeof values.next == \"function\") {\n      // generator\n      queue.push(values);\n      return;\n    }\n    // array\n    queue.push(values[Symbol.iterator]());\n  };\n  const pump: any = async () => {\n    while (queue.length) {\n      await paused;\n      const gen = queue[queue.length - 1];\n      let result = gen.next();\n      if (result && typeof result.then == \"function\") {\n        result = await result;\n      }\n      if (result.done) {\n        queue.pop();\n        continue;\n      }\n      let value = result.value;\n      if (value && typeof value.then == \"function\") {\n        value = await value;\n      }\n      await sanitize(value);\n    }\n  };\n  const sanitize: any = async (value: any) => {\n    if (value === undefined || value === null || value === none) return;\n    if (value === stop) throw new Stop();\n\n    if (isMany(value)) {\n      pushResults(getManyValues(value));\n      return pump();\n    }\n\n    if (isFinalValue(value)) {\n      // a final value is not supported, it is treated as a regular value\n      value = getFinalValue(value);\n      return processValue(value);\n    }\n\n    if (!stream.push(value)) {\n      pause();\n    }\n  };\n  const processChunk: any = async (chunk: any, encoding: any) => {\n    try {\n      const value = fn(chunk, encoding);\n      await processValue(value);\n    } catch (error) {\n      if (error instanceof Stop) {\n        stream.push(null);\n        stream.destroy();\n        return;\n      }\n      throw error;\n    }\n  };\n  const processValue: any = async (value: any) => {\n    if (value && typeof value.then == \"function\") {\n      // thenable\n      return value.then((value: any) => processValue(value));\n    }\n    if (value && typeof value.next == \"function\") {\n      // generator\n      pushResults(value);\n      return pump();\n    }\n    return sanitize(value);\n  };\n\n  stream = new Duplex(\n    Object.assign({ writableObjectMode: true, readableObjectMode: true }, undefined, {\n      write(chunk: any, encoding: any, callback: any) {\n        processChunk(chunk, encoding).then(\n          () => callback(null),\n          (error: any) => callback(error),\n        );\n      },\n      final(callback: any) {\n        if (!isFlushable(fn)) {\n          stream.push(null);\n          callback(null);\n          return;\n        }\n        processChunk(none, null).then(\n          () => (stream.push(null), callback(null)),\n          (error: any) => callback(error),\n        );\n      },\n      read() {\n        resume();\n      },\n    }),\n  );\n\n  return stream;\n};\n\nconst produceStreams = (item: any) => {\n  if (Array.isArray(item)) {\n    if (!item.length) return null;\n    if (item.length == 1) return item[0] && asStream(item[0]);\n    return asStream(gen(...item));\n  }\n  return item;\n};\n\nconst next: any = async function* (value: any, fns: any, index: any) {\n  for (let i = index; i <= fns.length; ++i) {\n    if (value && typeof value.then == \"function\") {\n      // thenable\n      value = await value;\n    }\n    if (value === none) break;\n    if (value === stop) throw new Stop();\n    if (isFinalValue(value)) {\n      yield getFinalValue(value);\n      break;\n    }\n    if (isMany(value)) {\n      const values = getManyValues(value);\n      if (i == fns.length) {\n        yield* values;\n      } else {\n        for (let j = 0; j < values.length; ++j) {\n          yield* next(values[j], fns, i);\n        }\n      }\n      break;\n    }\n    if (value && typeof value.next == \"function\") {\n      // generator\n      for (;;) {\n        let data = value.next();\n        if (data && typeof data.then == \"function\") {\n          data = await data;\n        }\n        if (data.done) break;\n        if (i == fns.length) {\n          yield data.value;\n        } else {\n          yield* next(data.value, fns, i);\n        }\n      }\n      break;\n    }\n    if (i == fns.length) {\n      yield value;\n      break;\n    }\n    const f = fns[i];\n    value = f(value);\n  }\n};\n\nexport const gen = (...fns: any) => {\n  fns = fns\n    .filter((fn: any) => fn)\n    .flat(Infinity)\n    .map((fn: any) => (isFunctionList(fn) ? getFunctionList(fn) : fn))\n    .flat(Infinity);\n  if (!fns.length) {\n    fns = [(x: any) => x];\n  }\n  let flushed = false;\n  let g = async function* (value: any) {\n    if (flushed) throw Error(\"Call to a flushed pipe.\");\n    if (value !== none) {\n      yield* next(value, fns, 0);\n    } else {\n      flushed = true;\n      for (let i = 0; i < fns.length; ++i) {\n        const f = fns[i];\n        if (isFlushable(f)) {\n          yield* next(f(none), fns, i + 1);\n        }\n      }\n    }\n  };\n  const needToFlush = fns.some((fn: any) => isFlushable(fn));\n  if (needToFlush) g = flushable(g);\n  return setFunctionList(g, fns);\n};\n\nconst write = (input: any, chunk: any, encoding: any, callback: any) => {\n  let error: any = null;\n  try {\n    input.write(chunk, encoding, (e: any) => callback(e || error));\n  } catch (e) {\n    error = e;\n  }\n};\n\nconst final = (input: any, callback: any) => {\n  let error: any = null;\n  try {\n    input.end(null, null, (e: any) => callback(e || error));\n  } catch (e) {\n    error = e;\n  }\n};\n\nconst read = (output: any) => {\n  output.resume();\n};\n\nexport default function chain(fns: any) {\n  fns = fns.flat(Infinity).filter((fn: any) => fn);\n\n  const streams = fns\n      .map((fn: any) => (isFunctionList(fn) ? getFunctionList(fn) : fn))\n      .flat(Infinity)\n      .reduce(groupFunctions, [])\n      .map(produceStreams)\n      .filter((s: any) => s),\n    input = streams[0],\n    output = streams.reduce((output: any, item: any) => (output && output.pipe(item)) || item);\n\n  // eslint-disable-next-line prefer-const\n  let stream: Duplex; // will be assigned later\n\n  let writeMethod = (chunk: any, encoding: any, callback: any) => write(input, chunk, encoding, callback),\n    finalMethod = (callback: any) => final(input, callback),\n    readMethod = () => read(output);\n\n  if (!isWritableNodeStream(input)) {\n    writeMethod = (_1, _2, callback) => callback(null);\n    finalMethod = (callback) => callback(null);\n    input.on(\"end\", () => stream.end());\n  }\n\n  if (isReadableNodeStream(output)) {\n    output.on(\"data\", (chunk: any) => !stream.push(chunk) && output.pause());\n    output.on(\"end\", () => stream.push(null));\n  } else {\n    readMethod = () => {}; // nop\n    output.on(\"finish\", () => stream.push(null));\n  }\n\n  stream = new Duplex(\n    Object.assign(\n      { writableObjectMode: true, readableObjectMode: true },\n      {\n        readable: isReadableNodeStream(output),\n        writable: isWritableNodeStream(input),\n        write: writeMethod,\n        final: finalMethod,\n        read: readMethod,\n      },\n    ),\n  );\n  // @ts-ignore\n  stream.streams = streams;\n  // @ts-ignore\n  stream.input = input;\n  // @ts-ignore\n  stream.output = output;\n\n  if (!isReadableNodeStream(output)) {\n    stream.resume();\n  }\n\n  // connect events\n  streams.forEach((item: any) => item.on(\"error\", (error: any) => stream.emit(\"error\", error)));\n\n  return stream;\n}\n", "/* eslint-disable @typescript-eslint/ban-ts-comment */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable no-control-regex */\n/* eslint-disable no-useless-escape */\nimport { flushable, gen, many, none, combineManyMut } from \"./stream-chain\";\nimport { StringDecoder } from \"node:string_decoder\";\nimport EventEmitter from \"node:events\";\n\nconst fixUtf8Stream = () => {\n  const stringDecoder = new StringDecoder();\n  let input = \"\";\n  return flushable((chunk: any) => {\n    if (chunk === none) {\n      const result = input + stringDecoder.end();\n      input = \"\";\n      return result;\n    }\n    if (typeof chunk == \"string\") {\n      if (!input) return chunk;\n      const result = input + chunk;\n      input = \"\";\n      return result;\n    }\n    if (chunk instanceof Buffer) {\n      const result = input + stringDecoder.write(chunk);\n      input = \"\";\n      return result;\n    }\n    throw new TypeError(\"Expected a string or a Buffer\");\n  });\n};\n\nconst patterns = {\n  value1: /[\\\"\\{\\[\\]\\-\\d]|true\\b|false\\b|null\\b|\\s{1,256}/y,\n  string: /[^\\x00-\\x1f\\\"\\\\]{1,256}|\\\\[bfnrt\\\"\\\\\\/]|\\\\u[\\da-fA-F]{4}|\\\"/y,\n  key1: /[\\\"\\}]|\\s{1,256}/y,\n  colon: /\\:|\\s{1,256}/y,\n  comma: /[\\,\\]\\}]|\\s{1,256}/y,\n  ws: /\\s{1,256}/y,\n  numberStart: /\\d/y,\n  numberDigit: /\\d{0,256}/y,\n  numberFraction: /[\\.eE]/y,\n  numberExponent: /[eE]/y,\n  numberExpSign: /[-+]/y,\n};\nconst MAX_PATTERN_SIZE = 16;\n\nconst values: { [key: string]: any } = { true: true, false: false, null: null },\n  expected: { [key: string]: string } = { object: \"objectStop\", array: \"arrayStop\", \"\": \"done\" };\n\n// long hexadecimal codes: \\uXXXX\nconst fromHex = (s: string) => String.fromCharCode(parseInt(s.slice(2), 16));\n\n// short codes: \\b \\f \\n \\r \\t \\\" \\\\ \\/\nconst codes: { [key: string]: string } = {\n  b: \"\\b\",\n  f: \"\\f\",\n  n: \"\\n\",\n  r: \"\\r\",\n  t: \"\\t\",\n  '\"': '\"',\n  \"\\\\\": \"\\\\\",\n  \"/\": \"/\",\n};\n\nconst jsonParser = (options?: any) => {\n  let packKeys = true,\n    packStrings = true,\n    packNumbers = true,\n    streamKeys = true,\n    streamStrings = true,\n    streamNumbers = true,\n    jsonStreaming = false;\n\n  if (options) {\n    \"packValues\" in options && (packKeys = packStrings = packNumbers = options.packValues);\n    \"packKeys\" in options && (packKeys = options.packKeys);\n    \"packStrings\" in options && (packStrings = options.packStrings);\n    \"packNumbers\" in options && (packNumbers = options.packNumbers);\n    \"streamValues\" in options && (streamKeys = streamStrings = streamNumbers = options.streamValues);\n    \"streamKeys\" in options && (streamKeys = options.streamKeys);\n    \"streamStrings\" in options && (streamStrings = options.streamStrings);\n    \"streamNumbers\" in options && (streamNumbers = options.streamNumbers);\n    jsonStreaming = options.jsonStreaming;\n  }\n\n  !packKeys && (streamKeys = true);\n  !packStrings && (streamStrings = true);\n  !packNumbers && (streamNumbers = true);\n\n  let done = false,\n    expect = jsonStreaming ? \"done\" : \"value\",\n    parent = \"\",\n    openNumber = false,\n    accumulator = \"\",\n    buffer = \"\";\n\n  const stack: any[] = [];\n\n  return flushable((buf: any) => {\n    const tokens: any[] = [];\n\n    if (buf === none) {\n      done = true;\n    } else {\n      buffer += buf;\n    }\n\n    let match: any;\n    let value: any;\n    let index = 0;\n\n    main: for (;;) {\n      switch (expect) {\n        case \"value1\":\n        case \"value\":\n          patterns.value1.lastIndex = index;\n          match = patterns.value1.exec(buffer);\n          if (!match) {\n            if (done || index + MAX_PATTERN_SIZE < buffer.length) {\n              if (index < buffer.length) throw new Error(\"Parser cannot parse input: expected a value\");\n              throw new Error(\"Parser has expected a value\");\n            }\n            break main; // wait for more input\n          }\n          value = match[0];\n          switch (value) {\n            case '\"':\n              if (streamStrings) tokens.push({ name: \"startString\" });\n              expect = \"string\";\n              break;\n            case \"{\":\n              tokens.push({ name: \"startObject\" });\n              stack.push(parent);\n              parent = \"object\";\n              expect = \"key1\";\n              break;\n            case \"[\":\n              tokens.push({ name: \"startArray\" });\n              stack.push(parent);\n              parent = \"array\";\n              expect = \"value1\";\n              break;\n            case \"]\":\n              if (expect !== \"value1\") throw new Error(\"Parser cannot parse input: unexpected token ']'\");\n              if (openNumber) {\n                if (streamNumbers) tokens.push({ name: \"endNumber\" });\n                openNumber = false;\n                if (packNumbers) {\n                  tokens.push({ name: \"numberValue\", value: accumulator });\n                  accumulator = \"\";\n                }\n              }\n              tokens.push({ name: \"endArray\" });\n              parent = stack.pop();\n              expect = expected[parent];\n              break;\n            case \"-\":\n              openNumber = true;\n              if (streamNumbers) {\n                tokens.push({ name: \"startNumber\" }, { name: \"numberChunk\", value: \"-\" });\n              }\n              packNumbers && (accumulator = \"-\");\n              expect = \"numberStart\";\n              break;\n            case \"0\":\n              openNumber = true;\n              if (streamNumbers) {\n                tokens.push({ name: \"startNumber\" }, { name: \"numberChunk\", value: \"0\" });\n              }\n              packNumbers && (accumulator = \"0\");\n              expect = \"numberFraction\";\n              break;\n            case \"1\":\n            case \"2\":\n            case \"3\":\n            case \"4\":\n            case \"5\":\n            case \"6\":\n            case \"7\":\n            case \"8\":\n            case \"9\":\n              openNumber = true;\n              if (streamNumbers) {\n                tokens.push({ name: \"startNumber\" }, { name: \"numberChunk\", value: value });\n              }\n              packNumbers && (accumulator = value);\n              expect = \"numberDigit\";\n              break;\n            case \"true\":\n            case \"false\":\n            case \"null\":\n              if (buffer.length - index === value.length && !done) break main; // wait for more input\n              tokens.push({ name: value + \"Value\", value: values[value] });\n              expect = expected[parent];\n              break;\n            // default: // ws\n          }\n          index += value.length;\n          break;\n        case \"keyVal\":\n        case \"string\":\n          patterns.string.lastIndex = index;\n          match = patterns.string.exec(buffer);\n          if (!match) {\n            if (index < buffer.length && (done || buffer.length - index >= 6))\n              throw new Error(\"Parser cannot parse input: escaped characters\");\n            if (done) throw new Error(\"Parser has expected a string value\");\n            break main; // wait for more input\n          }\n          value = match[0];\n          if (value === '\"') {\n            if (expect === \"keyVal\") {\n              if (streamKeys) tokens.push({ name: \"endKey\" });\n              if (packKeys) {\n                tokens.push({ name: \"keyValue\", value: accumulator });\n                accumulator = \"\";\n              }\n              expect = \"colon\";\n            } else {\n              if (streamStrings) tokens.push({ name: \"endString\" });\n              if (packStrings) {\n                tokens.push({ name: \"stringValue\", value: accumulator });\n                accumulator = \"\";\n              }\n              expect = expected[parent];\n            }\n          } else if (value.length > 1 && value.charAt(0) === \"\\\\\") {\n            const t = value.length == 2 ? codes[value.charAt(1)] : fromHex(value);\n            if (expect === \"keyVal\" ? streamKeys : streamStrings) {\n              tokens.push({ name: \"stringChunk\", value: t });\n            }\n            if (expect === \"keyVal\" ? packKeys : packStrings) {\n              accumulator += t;\n            }\n          } else {\n            if (expect === \"keyVal\" ? streamKeys : streamStrings) {\n              tokens.push({ name: \"stringChunk\", value: value });\n            }\n            if (expect === \"keyVal\" ? packKeys : packStrings) {\n              accumulator += value;\n            }\n          }\n          index += value.length;\n          break;\n        case \"key1\":\n        case \"key\":\n          patterns.key1.lastIndex = index;\n          match = patterns.key1.exec(buffer);\n          if (!match) {\n            if (index < buffer.length || done) throw new Error(\"Parser cannot parse input: expected an object key\");\n            break main; // wait for more input\n          }\n          value = match[0];\n          if (value === '\"') {\n            if (streamKeys) tokens.push({ name: \"startKey\" });\n            expect = \"keyVal\";\n          } else if (value === \"}\") {\n            if (expect !== \"key1\") throw new Error(\"Parser cannot parse input: unexpected token '}'\");\n            tokens.push({ name: \"endObject\" });\n            parent = stack.pop();\n            expect = expected[parent];\n          }\n          index += value.length;\n          break;\n        case \"colon\":\n          patterns.colon.lastIndex = index;\n          match = patterns.colon.exec(buffer);\n          if (!match) {\n            if (index < buffer.length || done) throw new Error(\"Parser cannot parse input: expected ':'\");\n            break main; // wait for more input\n          }\n          value = match[0];\n          value === \":\" && (expect = \"value\");\n          index += value.length;\n          break;\n        case \"arrayStop\":\n        case \"objectStop\":\n          patterns.comma.lastIndex = index;\n          match = patterns.comma.exec(buffer);\n          if (!match) {\n            if (index < buffer.length || done) throw new Error(\"Parser cannot parse input: expected ','\");\n            break main; // wait for more input\n          }\n          if (openNumber) {\n            if (streamNumbers) tokens.push({ name: \"endNumber\" });\n            openNumber = false;\n            if (packNumbers) {\n              tokens.push({ name: \"numberValue\", value: accumulator });\n              accumulator = \"\";\n            }\n          }\n          value = match[0];\n          if (value === \",\") {\n            expect = expect === \"arrayStop\" ? \"value\" : \"key\";\n          } else if (value === \"}\" || value === \"]\") {\n            if (value === \"}\" ? expect === \"arrayStop\" : expect !== \"arrayStop\") {\n              throw new Error(\"Parser cannot parse input: expected '\" + (expect === \"arrayStop\" ? \"]\" : \"}\") + \"'\");\n            }\n            tokens.push({ name: value === \"}\" ? \"endObject\" : \"endArray\" });\n            parent = stack.pop();\n            expect = expected[parent];\n          }\n          index += value.length;\n          break;\n        // number chunks\n        case \"numberStart\": // [0-9]\n          patterns.numberStart.lastIndex = index;\n          match = patterns.numberStart.exec(buffer);\n          if (!match) {\n            if (index < buffer.length || done) throw new Error(\"Parser cannot parse input: expected a starting digit\");\n            break main; // wait for more input\n          }\n          value = match[0];\n          if (streamNumbers) tokens.push({ name: \"numberChunk\", value: value });\n          packNumbers && (accumulator += value);\n          expect = value === \"0\" ? \"numberFraction\" : \"numberDigit\";\n          index += value.length;\n          break;\n        case \"numberDigit\": // [0-9]*\n          patterns.numberDigit.lastIndex = index;\n          match = patterns.numberDigit.exec(buffer);\n          if (!match) {\n            if (index < buffer.length || done) throw new Error(\"Parser cannot parse input: expected a digit\");\n            break main; // wait for more input\n          }\n          value = match[0];\n          if (value) {\n            if (streamNumbers) tokens.push({ name: \"numberChunk\", value: value });\n            packNumbers && (accumulator += value);\n            index += value.length;\n          } else {\n            if (index < buffer.length) {\n              expect = \"numberFraction\";\n              break;\n            }\n            if (done) {\n              expect = expected[parent];\n              break;\n            }\n            break main; // wait for more input\n          }\n          break;\n        case \"numberFraction\": // [\\.eE]?\n          patterns.numberFraction.lastIndex = index;\n          match = patterns.numberFraction.exec(buffer);\n          if (!match) {\n            if (index < buffer.length || done) {\n              expect = expected[parent];\n              break;\n            }\n            break main; // wait for more input\n          }\n          value = match[0];\n          if (streamNumbers) tokens.push({ name: \"numberChunk\", value: value });\n          packNumbers && (accumulator += value);\n          expect = value === \".\" ? \"numberFracStart\" : \"numberExpSign\";\n          index += value.length;\n          break;\n        case \"numberFracStart\": // [0-9]\n          patterns.numberStart.lastIndex = index;\n          match = patterns.numberStart.exec(buffer);\n          if (!match) {\n            if (index < buffer.length || done)\n              throw new Error(\"Parser cannot parse input: expected a fractional part of a number\");\n            break main; // wait for more input\n          }\n          value = match[0];\n          if (streamNumbers) tokens.push({ name: \"numberChunk\", value: value });\n          packNumbers && (accumulator += value);\n          expect = \"numberFracDigit\";\n          index += value.length;\n          break;\n        case \"numberFracDigit\": // [0-9]*\n          patterns.numberDigit.lastIndex = index;\n          match = patterns.numberDigit.exec(buffer);\n          value = match[0];\n          if (value) {\n            if (streamNumbers) tokens.push({ name: \"numberChunk\", value: value });\n            packNumbers && (accumulator += value);\n            index += value.length;\n          } else {\n            if (index < buffer.length) {\n              expect = \"numberExponent\";\n              break;\n            }\n            if (done) {\n              expect = expected[parent];\n              break;\n            }\n            break main; // wait for more input\n          }\n          break;\n        case \"numberExponent\": // [eE]?\n          patterns.numberExponent.lastIndex = index;\n          match = patterns.numberExponent.exec(buffer);\n          if (!match) {\n            if (index < buffer.length) {\n              expect = expected[parent];\n              break;\n            }\n            if (done) {\n              expect = \"done\";\n              break;\n            }\n            break main; // wait for more input\n          }\n          value = match[0];\n          if (streamNumbers) tokens.push({ name: \"numberChunk\", value: value });\n          packNumbers && (accumulator += value);\n          expect = \"numberExpSign\";\n          index += value.length;\n          break;\n        case \"numberExpSign\": // [-+]?\n          patterns.numberExpSign.lastIndex = index;\n          match = patterns.numberExpSign.exec(buffer);\n          if (!match) {\n            if (index < buffer.length) {\n              expect = \"numberExpStart\";\n              break;\n            }\n            if (done) throw new Error(\"Parser has expected an exponent value of a number\");\n            break main; // wait for more input\n          }\n          value = match[0];\n          if (streamNumbers) tokens.push({ name: \"numberChunk\", value: value });\n          packNumbers && (accumulator += value);\n          expect = \"numberExpStart\";\n          index += value.length;\n          break;\n        case \"numberExpStart\": // [0-9]\n          patterns.numberStart.lastIndex = index;\n          match = patterns.numberStart.exec(buffer);\n          if (!match) {\n            if (index < buffer.length || done)\n              throw new Error(\"Parser cannot parse input: expected an exponent part of a number\");\n            break main; // wait for more input\n          }\n          value = match[0];\n          if (streamNumbers) tokens.push({ name: \"numberChunk\", value: value });\n          packNumbers && (accumulator += value);\n          expect = \"numberExpDigit\";\n          index += value.length;\n          break;\n        case \"numberExpDigit\": // [0-9]*\n          patterns.numberDigit.lastIndex = index;\n          match = patterns.numberDigit.exec(buffer);\n          value = match[0];\n          if (value) {\n            if (streamNumbers) tokens.push({ name: \"numberChunk\", value: value });\n            packNumbers && (accumulator += value);\n            index += value.length;\n          } else {\n            if (index < buffer.length || done) {\n              expect = expected[parent];\n              break;\n            }\n            break main; // wait for more input\n          }\n          break;\n        case \"done\":\n          patterns.ws.lastIndex = index;\n          match = patterns.ws.exec(buffer);\n          if (!match) {\n            if (index < buffer.length) {\n              if (jsonStreaming) {\n                expect = \"value\";\n                break;\n              }\n              throw new Error(\"Parser cannot parse input: unexpected characters\");\n            }\n            break main; // wait for more input\n          }\n          value = match[0];\n          if (openNumber) {\n            if (streamNumbers) tokens.push({ name: \"endNumber\" });\n            openNumber = false;\n            if (packNumbers) {\n              tokens.push({ name: \"numberValue\", value: accumulator });\n              accumulator = \"\";\n            }\n          }\n          index += value.length;\n          break;\n      }\n    }\n    if (done && openNumber) {\n      if (streamNumbers) tokens.push({ name: \"endNumber\" });\n      openNumber = false;\n      if (packNumbers) {\n        tokens.push({ name: \"numberValue\", value: accumulator });\n        accumulator = \"\";\n      }\n    }\n    buffer = buffer.slice(index);\n    return tokens.length ? many(tokens) : none;\n  });\n};\n\nexport const parser = (options?: any) => gen(fixUtf8Stream(), jsonParser(options));\n\nconst withParser = (fn: any, options?: any) => gen(parser(options), fn(options));\n\nconst checkableTokens = {\n    startObject: 1,\n    startArray: 1,\n    startString: 1,\n    startNumber: 1,\n    nullValue: 1,\n    trueValue: 1,\n    falseValue: 1,\n    stringValue: 1,\n    numberValue: 1,\n  },\n  stopTokens = {\n    startObject: \"endObject\",\n    startArray: \"endArray\",\n    startString: \"endString\",\n    startNumber: \"endNumber\",\n  },\n  optionalTokens = { endString: \"stringValue\", endNumber: \"numberValue\" };\n\nconst defaultFilter = (_stack: string[], _a: any) => true;\n\nconst stringFilter = (string: string, separator: string) => {\n  const stringWithSeparator = string + separator;\n  return (stack: string[], _a: any) => {\n    const path = stack.join(separator);\n    return path === string || path.startsWith(stringWithSeparator);\n  };\n};\n\nconst regExpFilter = (regExp: RegExp, separator: string) => {\n  return (stack: string[], _a: any) => regExp.test(stack.join(separator));\n};\n\nconst filterBase =\n  ({\n    specialAction = \"accept\",\n    defaultAction = \"ignore\",\n    nonCheckableAction = \"process-key\",\n    transition = undefined as any,\n  } = {}) =>\n  (options: any) => {\n    const once = options?.once,\n      separator = options?.pathSeparator || \".\";\n    let filter = defaultFilter,\n      streamKeys = true;\n    if (options) {\n      if (typeof options.filter == \"function\") {\n        filter = options.filter;\n      } else if (typeof options.filter == \"string\") {\n        filter = stringFilter(options.filter, separator);\n      } else if (options.filter instanceof RegExp) {\n        filter = regExpFilter(options.filter, separator);\n      }\n      if (\"streamValues\" in options) streamKeys = options.streamValues;\n      if (\"streamKeys\" in options) streamKeys = options.streamKeys;\n    }\n    const sanitizedOptions = Object.assign({}, options, { filter, streamKeys, separator });\n    let state = \"check\";\n    const stack: any[] = [];\n    let depth = 0,\n      previousToken = \"\",\n      endToken = \"\",\n      optionalToken = \"\",\n      startTransition = false;\n    return flushable((chunk) => {\n      // the flush\n      if (chunk === none) return transition ? transition([], null, \"flush\", sanitizedOptions) : none;\n\n      // process the optional value token (unfinished)\n      if (optionalToken) {\n        if (optionalToken === chunk.name) {\n          let returnToken = none;\n          switch (state) {\n            case \"process-key\":\n              stack[stack.length - 1] = chunk.value;\n              state = \"check\";\n              break;\n            case \"accept-value\":\n              returnToken = chunk;\n              state = once ? \"pass\" : \"check\";\n              break;\n            default:\n              state = once ? \"all\" : \"check\";\n              break;\n          }\n          optionalToken = \"\";\n          return returnToken;\n        }\n        optionalToken = \"\";\n        state = once && state !== \"process-key\" ? \"pass\" : \"check\";\n      }\n\n      let returnToken: any = none;\n\n      recheck: for (;;) {\n        // accept/reject tokens\n        switch (state) {\n          case \"process-key\":\n            if (chunk.name === \"endKey\") optionalToken = \"keyValue\";\n            return none;\n          case \"pass\":\n            return none;\n          case \"all\":\n            return chunk;\n          case \"accept\":\n          case \"reject\":\n            if (startTransition) {\n              startTransition = false;\n              returnToken = transition(stack, chunk, state, sanitizedOptions) || none;\n            }\n            switch (chunk.name) {\n              case \"startObject\":\n              case \"startArray\":\n                ++depth;\n                break;\n              case \"endObject\":\n              case \"endArray\":\n                --depth;\n                break;\n            }\n            if (state === \"accept\") {\n              returnToken = combineManyMut(returnToken, chunk);\n            }\n            if (!depth) {\n              if (once) {\n                state = state === \"accept\" ? \"pass\" : \"all\";\n              } else {\n                state = \"check\";\n              }\n            }\n            return returnToken;\n          case \"accept-value\":\n          case \"reject-value\":\n            if (startTransition) {\n              startTransition = false;\n              returnToken = transition(stack, chunk, state, sanitizedOptions) || none;\n            }\n            if (state === \"accept-value\") {\n              returnToken = combineManyMut(returnToken, chunk);\n            }\n            if (chunk.name === endToken) {\n              // @ts-ignore\n              optionalToken = optionalTokens[endToken] || \"\";\n              endToken = \"\";\n              if (!optionalToken) {\n                if (once) {\n                  state = state === \"accept-value\" ? \"pass\" : \"all\";\n                } else {\n                  state = \"check\";\n                }\n              }\n            }\n            return returnToken;\n        }\n\n        // update the last index in the stack\n        if (typeof stack[stack.length - 1] == \"number\") {\n          // array\n          switch (chunk.name) {\n            case \"startObject\":\n            case \"startArray\":\n            case \"startString\":\n            case \"startNumber\":\n            case \"nullValue\":\n            case \"trueValue\":\n            case \"falseValue\":\n              ++stack[stack.length - 1];\n              break;\n            case \"numberValue\":\n              if (previousToken !== \"endNumber\") ++stack[stack.length - 1];\n              break;\n            case \"stringValue\":\n              if (previousToken !== \"endString\") ++stack[stack.length - 1];\n              break;\n          }\n        } else {\n          if (chunk.name === \"keyValue\") stack[stack.length - 1] = chunk.value;\n        }\n        previousToken = chunk.name;\n\n        // check the token\n        const action =\n          // @ts-ignore\n          checkableTokens[chunk.name] !== 1 ? nonCheckableAction : filter(stack, chunk) ? specialAction : defaultAction;\n\n        // @ts-ignore\n        endToken = stopTokens[chunk.name] || \"\";\n        switch (action) {\n          case \"process-key\":\n            if (chunk.name === \"startKey\") {\n              state = \"process-key\";\n              continue recheck;\n            }\n            break;\n          case \"accept-token\":\n            // @ts-ignore\n            if (endToken && optionalTokens[endToken]) {\n              state = \"accept-value\";\n              startTransition = !!transition;\n              continue recheck;\n            }\n            if (transition) returnToken = transition(stack, chunk, action, sanitizedOptions);\n            returnToken = combineManyMut(returnToken, chunk);\n            break;\n          case \"accept\":\n            if (endToken) {\n              // @ts-ignore\n              state = optionalTokens[endToken] ? \"accept-value\" : \"accept\";\n              startTransition = !!transition;\n              continue recheck;\n            }\n            if (transition) returnToken = transition(stack, chunk, action, sanitizedOptions);\n            returnToken = combineManyMut(returnToken, chunk);\n            break;\n          case \"reject\":\n            if (endToken) {\n              // @ts-ignore\n              state = optionalTokens[endToken] ? \"reject-value\" : \"reject\";\n              startTransition = !!transition;\n              continue recheck;\n            }\n            if (transition) returnToken = transition(stack, chunk, action, sanitizedOptions);\n            break;\n          case \"pass\":\n            state = \"pass\";\n            continue recheck;\n        }\n\n        break;\n      }\n\n      // update the stack\n      switch (chunk.name) {\n        case \"startObject\":\n          stack.push(null);\n          break;\n        case \"startArray\":\n          stack.push(-1);\n          break;\n        case \"endObject\":\n        case \"endArray\":\n          stack.pop();\n          break;\n      }\n\n      return returnToken;\n    });\n  };\n\nexport const PickParser = (options?: any) => withParser(filterBase(), Object.assign({ packKeys: true }, options));\n\nclass Counter {\n  depth: number;\n  constructor(initialDepth: number) {\n    this.depth = initialDepth;\n  }\n  startObject() {\n    ++this.depth;\n  }\n  endObject() {\n    --this.depth;\n  }\n  startArray() {\n    ++this.depth;\n  }\n  endArray() {\n    --this.depth;\n  }\n}\n\nclass Assembler extends EventEmitter {\n  static connectTo(stream: any, options: any) {\n    return new Assembler(options).connectTo(stream);\n  }\n\n  stack: any;\n  current: any;\n  key: any;\n  done: boolean;\n  reviver: any;\n  // @ts-ignore\n  stringValue: (value: string) => void;\n  tapChain: (chunk: any) => any;\n\n  constructor(options: any) {\n    super();\n    this.stack = [];\n    this.current = this.key = null;\n    this.done = true;\n    if (options) {\n      this.reviver = typeof options.reviver == \"function\" && options.reviver;\n      if (this.reviver) {\n        this.stringValue = this._saveValue = this._saveValueWithReviver;\n      }\n      if (options.numberAsString) {\n        // @ts-ignore\n        this.numberValue = this.stringValue;\n      }\n    }\n\n    this.tapChain = (chunk) => {\n      // @ts-ignore\n      if (this[chunk.name]) {\n        // @ts-ignore\n        this[chunk.name](chunk.value);\n        if (this.done) return this.current;\n      }\n      return none;\n    };\n\n    this.stringValue = this._saveValue;\n  }\n\n  connectTo(stream: any) {\n    stream.on(\"data\", (chunk: any) => {\n      // @ts-ignore\n      if (this[chunk.name]) {\n        // @ts-ignore\n        this[chunk.name](chunk.value);\n        // @ts-ignore\n        if (this.done) this.emit(\"done\", this);\n      }\n    });\n    return this;\n  }\n\n  get depth() {\n    return (this.stack.length >> 1) + (this.done ? 0 : 1);\n  }\n\n  get path() {\n    const path: any[] = [];\n    for (let i = 0; i < this.stack.length; i += 2) {\n      const key = this.stack[i + 1];\n      path.push(key === null ? this.stack[i].length : key);\n    }\n    return path;\n  }\n\n  dropToLevel(level: any) {\n    if (level < this.depth) {\n      if (level > 0) {\n        const index = (level - 1) << 1;\n        this.current = this.stack[index];\n        this.key = this.stack[index + 1];\n        this.stack.splice(index);\n      } else {\n        this.stack = [];\n        this.current = this.key = null;\n        this.done = true;\n      }\n    }\n    return this;\n  }\n\n  consume(chunk: any) {\n    // @ts-ignore\n    this[chunk.name] && this[chunk.name](chunk.value);\n    return this;\n  }\n\n  keyValue(value: any) {\n    this.key = value;\n  }\n\n  //stringValue() - aliased below to _saveValue()\n\n  numberValue(value: any) {\n    this._saveValue(parseFloat(value));\n  }\n  nullValue() {\n    this._saveValue(null);\n  }\n  trueValue() {\n    this._saveValue(true);\n  }\n  falseValue() {\n    this._saveValue(false);\n  }\n\n  startObject() {\n    if (this.done) {\n      this.done = false;\n    } else {\n      this.stack.push(this.current, this.key);\n    }\n    this.current = new Object();\n    this.key = null;\n  }\n\n  endObject() {\n    if (this.stack.length) {\n      const value = this.current;\n      this.key = this.stack.pop();\n      this.current = this.stack.pop();\n      this._saveValue(value);\n    } else {\n      this.done = true;\n    }\n  }\n\n  startArray() {\n    if (this.done) {\n      this.done = false;\n    } else {\n      this.stack.push(this.current, this.key);\n    }\n    this.current = [];\n    this.key = null;\n  }\n\n  endArray() {\n    if (this.stack.length) {\n      const value = this.current;\n      this.key = this.stack.pop();\n      this.current = this.stack.pop();\n      this._saveValue(value);\n    } else {\n      this.done = true;\n    }\n  }\n\n  _saveValue(value: any) {\n    if (this.done) {\n      this.current = value;\n    } else {\n      if (this.current instanceof Array) {\n        this.current.push(value);\n      } else {\n        this.current[this.key] = value;\n        this.key = null;\n      }\n    }\n  }\n  _saveValueWithReviver(value: any) {\n    if (this.done) {\n      this.current = this.reviver(\"\", value);\n    } else {\n      if (this.current instanceof Array) {\n        value = this.reviver(\"\" + this.current.length, value);\n        this.current.push(value);\n        if (value === undefined) {\n          delete this.current[this.current.length - 1];\n        }\n      } else {\n        value = this.reviver(this.key, value);\n        if (value !== undefined) {\n          this.current[this.key] = value;\n        }\n        this.key = null;\n      }\n    }\n  }\n}\n\nconst streamBase =\n  ({ push, first, level }: any) =>\n  (options = {} as any) => {\n    const { objectFilter, includeUndecided } = options;\n    let asm = new Assembler(options) as any,\n      state = first ? \"first\" : \"check\",\n      savedAsm = null as any;\n\n    if (typeof objectFilter != \"function\") {\n      // no object filter + no first check\n      if (state === \"check\")\n        return (chunk: any) => {\n          if (asm[chunk.name]) {\n            asm[chunk.name](chunk.value);\n            if (asm.depth === level) {\n              return push(asm);\n            }\n          }\n          return none;\n        };\n      // no object filter\n      return (chunk: any) => {\n        switch (state) {\n          case \"first\":\n            first(chunk);\n            state = \"accept\";\n          // fall through\n          case \"accept\":\n            if (asm[chunk.name]) {\n              asm[chunk.name](chunk.value);\n              if (asm.depth === level) {\n                return push(asm);\n              }\n            }\n            break;\n        }\n        return none;\n      };\n    }\n\n    // object filter + a possible first check\n    return (chunk: any) => {\n      switch (state) {\n        case \"first\":\n          first(chunk);\n          state = \"check\";\n        // fall through\n        case \"check\":\n          if (asm[chunk.name]) {\n            asm[chunk.name](chunk.value);\n            const result = objectFilter(asm);\n            if (result) {\n              state = \"accept\";\n              if (asm.depth === level) return push(asm);\n            } else if (result === false) {\n              if (asm.depth === level) return push(asm, true);\n              state = \"reject\";\n              savedAsm = asm;\n              asm = new Counter(savedAsm.depth);\n              savedAsm.dropToLevel(level);\n            } else {\n              if (asm.depth === level) return push(asm, !includeUndecided);\n            }\n          }\n          break;\n        case \"accept\":\n          if (asm[chunk.name]) {\n            asm[chunk.name](chunk.value);\n            if (asm.depth === level) {\n              state = \"check\";\n              return push(asm);\n            }\n          }\n          break;\n        case \"reject\":\n          if (asm[chunk.name]) {\n            asm[chunk.name](chunk.value);\n            if (asm.depth === level) {\n              state = \"check\";\n              asm = savedAsm;\n              savedAsm = null;\n              return push(asm, true);\n            }\n          }\n          break;\n      }\n      return none;\n    };\n  };\n\nexport const StreamArray = (options?: any) => {\n  let key = 0;\n  return streamBase({\n    level: 1,\n\n    first(chunk: any) {\n      if (chunk.name !== \"startArray\") throw new Error(\"Top-level object should be an array.\");\n    },\n\n    push(asm: any, discard: any) {\n      if (asm.current.length) {\n        if (discard) {\n          ++key;\n          asm.current.pop();\n        } else {\n          return { key: key++, value: asm.current.pop() };\n        }\n      }\n      return none;\n    },\n  })(options);\n};\n", "import { List, MenuBarExtra, Icon, open, LaunchType, environment, ActionPanel, Action } from \"@raycast/api\";\nimport { existsSync } from \"node:fs\";\nimport os from \"node:os\";\nimport { useRef, useState, useCallback, useMemo } from \"react\";\nimport { usePromise, PromiseOptions } from \"./usePromise\";\nimport { useLatest } from \"./useLatest\";\nimport { showFailureToast } from \"./showFailureToast\";\nimport { baseExecuteSQL, PermissionError, isPermissionError } from \"./sql-utils\";\n\n/**\n * Executes a query on a local SQL database and returns the {@link AsyncState} corresponding to the query of the command. The last value will be kept between command runs.\n *\n * @example\n * ```\n * import { useSQL } from \"@raycast/utils\";\n * import { resolve } from \"path\";\n * import { homedir } from \"os\";\n *\n * const NOTES_DB = resolve(homedir(), \"Library/Group Containers/group.com.apple.notes/NoteStore.sqlite\");\n * const notesQuery = `SELECT id, title FROM ...`;\n * type NoteItem = {\n *   id: string;\n *   title: string;\n * };\n *\n * export default function Command() {\n *   const { isLoading, data, permissionView } = useSQL<NoteItem>(NOTES_DB, notesQuery);\n *\n *   if (permissionView) {\n *     return permissionView;\n *   }\n *\n *   return (\n *     <List isLoading={isLoading}>\n *       {(data || []).map((item) => (\n *         <List.Item key={item.id} title={item.title} />\n *       ))}\n *     </List>\n *  );\n * };\n * ```\n */\nexport function useSQL<T = unknown>(\n  databasePath: string,\n  query: string,\n  options?: {\n    /** A string explaining why the extension needs full disk access. For example, the Apple Notes extension uses `\"This is required to search your Apple Notes.\"`. While it is optional, we recommend setting it to help users understand. */\n    permissionPriming?: string;\n  } & Omit<PromiseOptions<(database: string, query: string) => Promise<T[]>>, \"abortable\">,\n) {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { permissionPriming, ...usePromiseOptions } = options || {};\n\n  const [permissionView, setPermissionView] = useState<React.JSX.Element | null>(null);\n  const latestOptions = useLatest(options || {});\n  const abortable = useRef<AbortController>(null);\n\n  const handleError = useCallback(\n    (_error: Error) => {\n      console.error(_error);\n      const error =\n        _error instanceof Error && _error.message.includes(\"authorization denied\")\n          ? new PermissionError(\"You do not have permission to access the database.\")\n          : (_error as Error);\n\n      if (isPermissionError(error)) {\n        setPermissionView(<PermissionErrorScreen priming={latestOptions.current.permissionPriming} />);\n      } else {\n        if (latestOptions.current.onError) {\n          latestOptions.current.onError(error);\n        } else {\n          if (environment.launchType !== LaunchType.Background) {\n            showFailureToast(error, {\n              title: \"Cannot query the data\",\n            });\n          }\n        }\n      }\n    },\n    [latestOptions],\n  );\n\n  const fn = useMemo(() => {\n    if (!existsSync(databasePath)) {\n      throw new Error(\"The database does not exist\");\n    }\n\n    return async (databasePath: string, query: string) => {\n      const abortSignal = abortable.current?.signal;\n      return baseExecuteSQL<T>(databasePath, query, { signal: abortSignal });\n    };\n  }, [databasePath]);\n\n  return {\n    ...usePromise(fn, [databasePath, query], { ...usePromiseOptions, onError: handleError }),\n    permissionView,\n  };\n}\n\nfunction PermissionErrorScreen(props: { priming?: string }) {\n  const macosVenturaAndLater = parseInt(os.release().split(\".\")[0]) >= 22;\n  const preferencesString = macosVenturaAndLater ? \"Settings\" : \"Preferences\";\n\n  const action = macosVenturaAndLater\n    ? {\n        title: \"Open System Settings -> Privacy\",\n        target: \"x-apple.systempreferences:com.apple.preference.security?Privacy_AllFiles\",\n      }\n    : {\n        title: \"Open System Preferences -> Security\",\n        target: \"x-apple.systempreferences:com.apple.preference.security?Privacy_AllFiles\",\n      };\n\n  if (environment.commandMode === \"menu-bar\") {\n    return (\n      <MenuBarExtra icon={Icon.Warning} title={environment.commandName}>\n        <MenuBarExtra.Item\n          title=\"Raycast needs full disk access\"\n          tooltip={`You can revert this access in ${preferencesString} whenever you want`}\n        />\n        {props.priming ? (\n          <MenuBarExtra.Item\n            title={props.priming}\n            tooltip={`You can revert this access in ${preferencesString} whenever you want`}\n          />\n        ) : null}\n        <MenuBarExtra.Separator />\n        <MenuBarExtra.Item title={action.title} onAction={() => open(action.target)} />\n      </MenuBarExtra>\n    );\n  }\n\n  return (\n    <List>\n      <List.EmptyView\n        icon={{\n          source: {\n            light: \"https://raycast.com/uploads/extensions-utils-security-permissions-light.png\",\n            dark: \"https://raycast.com/uploads/extensions-utils-security-permissions-dark.png\",\n          },\n        }}\n        title=\"Raycast needs full disk access.\"\n        description={`${\n          props.priming ? props.priming + \"\\n\" : \"\"\n        }You can revert this access in ${preferencesString} whenever you want.`}\n        actions={\n          <ActionPanel>\n            <Action.Open {...action} />\n          </ActionPanel>\n        }\n      />\n    </List>\n  );\n}\n", "import { existsSync } from \"node:fs\";\nimport { copyFile, mkdir, writeFile } from \"node:fs/promises\";\nimport os from \"node:os\";\nimport childProcess from \"node:child_process\";\nimport path from \"node:path\";\nimport { getSpawnedPromise, getSpawnedResult } from \"./exec-utils\";\nimport { hash } from \"./helpers\";\n\nexport class PermissionError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"PermissionError\";\n  }\n}\n\nexport function isPermissionError(error: unknown): error is PermissionError {\n  return error instanceof Error && error.name === \"PermissionError\";\n}\n\nexport async function baseExecuteSQL<T = unknown>(\n  databasePath: string,\n  query: string,\n  options?: {\n    signal?: AbortSignal;\n  },\n): Promise<T[]> {\n  if (!existsSync(databasePath)) {\n    throw new Error(\"The database does not exist\");\n  }\n\n  let sqlite3: typeof import(\"node:sqlite\");\n  try {\n    sqlite3 = require(\"node:sqlite\");\n  } catch (error) {\n    // If sqlite3 is not available, we fallback to using the sqlite3 CLI (available on macOS and Linux by default).\n    return sqliteFallback<T>(databasePath, query, options);\n  }\n\n  let db = new sqlite3.DatabaseSync(databasePath, { open: false, readOnly: true });\n\n  const abortSignal = options?.signal;\n\n  try {\n    db.open();\n  } catch (error: any) {\n    console.log(error);\n    if (error.message.match(\"(5)\") || error.message.match(\"(14)\")) {\n      // That means that the DB is busy because of another app is locking it\n      // This happens when Chrome or Arc is opened: they lock the History db.\n      // As an ugly workaround, we duplicate the file and read that instead\n      // (with vfs unix - none to just not care about locks)\n      let workaroundCopiedDb: string | undefined;\n      if (!workaroundCopiedDb) {\n        const tempFolder = path.join(os.tmpdir(), \"useSQL\", hash(databasePath));\n        await mkdir(tempFolder, { recursive: true });\n        checkAborted(abortSignal);\n\n        workaroundCopiedDb = path.join(tempFolder, \"db.db\");\n        await copyFile(databasePath, workaroundCopiedDb);\n\n        await writeFile(workaroundCopiedDb + \"-shm\", \"\");\n        await writeFile(workaroundCopiedDb + \"-wal\", \"\");\n\n        checkAborted(abortSignal);\n      }\n\n      db = new sqlite3.DatabaseSync(workaroundCopiedDb, { open: false, readOnly: true });\n      db.open();\n      checkAborted(abortSignal);\n    }\n  }\n\n  const statement = db.prepare(query);\n  checkAborted(abortSignal);\n\n  const result = statement.all();\n\n  db.close();\n\n  return result as T[];\n}\n\nasync function sqliteFallback<T = unknown>(\n  databasePath: string,\n  query: string,\n  options?: {\n    signal?: AbortSignal;\n  },\n): Promise<T[]> {\n  const abortSignal = options?.signal;\n\n  let spawned = childProcess.spawn(\"sqlite3\", [\"--json\", \"--readonly\", databasePath, query], { signal: abortSignal });\n  let spawnedPromise = getSpawnedPromise(spawned);\n  let [{ error, exitCode, signal }, stdoutResult, stderrResult] = await getSpawnedResult<string>(\n    spawned,\n    { encoding: \"utf-8\" },\n    spawnedPromise,\n  );\n  checkAborted(abortSignal);\n\n  if (stderrResult.match(\"(5)\") || stderrResult.match(\"(14)\")) {\n    // That means that the DB is busy because of another app is locking it\n    // This happens when Chrome or Arc is opened: they lock the History db.\n    // As an ugly workaround, we duplicate the file and read that instead\n    // (with vfs unix - none to just not care about locks)\n    let workaroundCopiedDb: string | undefined;\n    if (!workaroundCopiedDb) {\n      const tempFolder = path.join(os.tmpdir(), \"useSQL\", hash(databasePath));\n      await mkdir(tempFolder, { recursive: true });\n      checkAborted(abortSignal);\n\n      workaroundCopiedDb = path.join(tempFolder, \"db.db\");\n      await copyFile(databasePath, workaroundCopiedDb);\n\n      await writeFile(workaroundCopiedDb + \"-shm\", \"\");\n      await writeFile(workaroundCopiedDb + \"-wal\", \"\");\n\n      checkAborted(abortSignal);\n    }\n\n    spawned = childProcess.spawn(\"sqlite3\", [\"--json\", \"--readonly\", \"--vfs\", \"unix-none\", workaroundCopiedDb, query], {\n      signal: abortSignal,\n    });\n    spawnedPromise = getSpawnedPromise(spawned);\n    [{ error, exitCode, signal }, stdoutResult, stderrResult] = await getSpawnedResult<string>(\n      spawned,\n      { encoding: \"utf-8\" },\n      spawnedPromise,\n    );\n    checkAborted(abortSignal);\n  }\n\n  if (error || exitCode !== 0 || signal !== null) {\n    if (stderrResult.includes(\"authorization denied\")) {\n      throw new PermissionError(\"You do not have permission to access the database.\");\n    } else {\n      throw new Error(stderrResult || \"Unknown error\");\n    }\n  }\n\n  return JSON.parse(stdoutResult.trim() || \"[]\") as T[];\n}\n\nfunction checkAborted(signal?: AbortSignal) {\n  if (signal?.aborted) {\n    const error = new Error(\"aborted\");\n    error.name = \"AbortError\";\n    throw error;\n  }\n}\n", "import { Form } from \"@raycast/api\";\nimport { useState, useCallback, useMemo, useRef, SetStateAction } from \"react\";\nimport { useLatest } from \"./useLatest\";\n\n/**\n * Shorthands for common validation cases\n */\nexport enum FormValidation {\n  /** Show an error when the value of the item is empty */\n  Required = \"required\",\n}\n\ntype ValidationError = string | undefined | null;\ntype Validator<ValueType> = ((value: ValueType | undefined) => ValidationError) | FormValidation;\n\nfunction validationError<ValueType>(\n  validation: Validator<ValueType> | undefined,\n  value: ValueType | undefined,\n): ValidationError {\n  if (validation) {\n    if (typeof validation === \"function\") {\n      return validation(value);\n    } else if (validation === FormValidation.Required) {\n      let valueIsValid = typeof value !== \"undefined\" && value !== null;\n      if (valueIsValid) {\n        switch (typeof value) {\n          case \"string\":\n            valueIsValid = value.length > 0;\n            break;\n          case \"object\":\n            if (Array.isArray(value)) {\n              valueIsValid = value.length > 0;\n            } else if (value instanceof Date) {\n              valueIsValid = value.getTime() > 0;\n            }\n            break;\n          default:\n            break;\n        }\n      }\n      if (!valueIsValid) {\n        return \"The item is required\";\n      }\n    }\n  }\n}\n\ntype Validation<T extends Form.Values> = { [id in keyof T]?: Validator<T[id]> };\n\ninterface FormProps<T extends Form.Values> {\n  /** Function to pass to the `onSubmit` prop of the `<Action.SubmitForm>` element. It wraps the initial `onSubmit` argument with some goodies related to the validation. */\n  handleSubmit: (values: T) => void | boolean | Promise<void | boolean>;\n  /** The props that must be passed to the `<Form.Item>` elements to handle the validations. */\n  itemProps: {\n    [id in keyof Required<T>]: Partial<Form.ItemProps<T[id]>> & {\n      id: string;\n    };\n  };\n  /** Function that can be used to programmatically set the validation of a specific field. */\n  setValidationError: (id: keyof T, error: ValidationError) => void;\n  /** Function that can be used to programmatically set the value of a specific field. */\n  setValue: <K extends keyof T>(id: K, value: SetStateAction<T[K]>) => void;\n  /** The current values of the form. */\n  values: T;\n  /** Function that can be used to programmatically focus a specific field. */\n  focus: (id: keyof T) => void;\n  /** Function that can be used to reset the values of the Form. */\n  reset: (initialValues?: Partial<T>) => void;\n}\n\n/**\n * Hook that provides a high-level interface to work with Forms, and more particularly, with Form validations. It incorporates all the good practices to provide a great User Experience for your Forms.\n *\n * @returns an object which contains the necessary methods and props to provide a good User Experience in your Form.\n *\n * @example\n * ```\n * import { Action, ActionPanel, Form, showToast, Toast } from \"@raycast/api\";\n * import { useForm, FormValidation } from \"@raycast/utils\";\n *\n * interface SignUpFormValues {\n *   nickname: string;\n *   password: string;\n * }\n *\n * export default function Command() {\n *   const { handleSubmit, itemProps } = useForm<SignUpFormValues>({\n *     onSubmit(values) {\n *       showToast(Toast.Style.Success, \"Yay!\", `${values.nickname} account created`);\n *     },\n *     validation: {\n *       nickname: FormValidation.Required,\n *       password: (value) => {\n *         if (value && value.length < 8) {\n *           return \"Password must be at least 8 symbols\";\n *         } else if (!value) {\n *           return \"The item is required\";\n *         }\n *       },\n *     },\n *   });\n *\n *   return (\n *     <Form\n *       actions={\n *         <ActionPanel>\n *           <Action.SubmitForm title=\"Submit\" onSubmit={handleSubmit} />\n *         </ActionPanel>\n *       }\n *     >\n *       <Form.TextField title=\"Nickname\" placeholder=\"Enter your nickname\" {...itemProps.nickname} />\n *       <Form.PasswordField\n *         title=\"Password\"\n *         placeholder=\"Enter password at least 8 characters long\"\n *         {...itemProps.password}\n *       />\n *     </Form>\n *   );\n * }\n * ```\n */\nexport function useForm<T extends Form.Values>(props: {\n  /** Callback that will be called when the form is submitted and all validations pass. */\n  onSubmit: (values: T) => void | boolean | Promise<void | boolean>;\n  /** The initial values to set when the Form is first rendered. */\n  initialValues?: Partial<T>;\n  /** The validation rules for the Form. A validation for a Form item is a function that takes the current value of the item as an argument and must return a string when the validation is failing.\n   *\n   * There are also some shorthands for common cases, see {@link FormValidation}.\n   * */\n  validation?: Validation<T>;\n}): FormProps<T> {\n  const { onSubmit: _onSubmit, validation, initialValues = {} } = props;\n\n  // @ts-expect-error it's fine if we don't specify all the values\n  const [values, setValues] = useState<T>(initialValues);\n  const [errors, setErrors] = useState<{ [id in keyof T]?: ValidationError }>({});\n  const refs = useRef<{ [id in keyof T]?: Form.ItemReference }>({});\n\n  const latestValidation = useLatest<Validation<T>>(validation || {});\n  const latestOnSubmit = useLatest(_onSubmit);\n\n  const focus = useCallback(\n    (id: keyof T) => {\n      refs.current[id]?.focus();\n    },\n    [refs],\n  );\n\n  const handleSubmit = useCallback(\n    async (values: T): Promise<boolean> => {\n      let validationErrors: false | { [key in keyof T]?: ValidationError } = false;\n      for (const [id, validation] of Object.entries(latestValidation.current)) {\n        const error = validationError(validation, values[id]);\n        if (error) {\n          if (!validationErrors) {\n            validationErrors = {};\n            // we focus the first item that has an error\n            focus(id);\n          }\n          validationErrors[id as keyof T] = error;\n        }\n      }\n      if (validationErrors) {\n        setErrors(validationErrors);\n        return false;\n      }\n      const result = await latestOnSubmit.current(values);\n      return typeof result === \"boolean\" ? result : true;\n    },\n    [latestValidation, latestOnSubmit, focus],\n  );\n\n  const setValidationError = useCallback(\n    (id: keyof T, error: ValidationError) => {\n      setErrors((errors) => ({ ...errors, [id]: error }));\n    },\n    [setErrors],\n  );\n\n  const setValue = useCallback(\n    function <K extends keyof T>(id: K, value: SetStateAction<T[K]>) {\n      // @ts-expect-error TS is always confused about SetStateAction, but it's fine here\n      setValues((values) => ({ ...values, [id]: typeof value === \"function\" ? value(values[id]) : value }));\n    },\n    [setValues],\n  );\n\n  const itemProps = useMemo<{ [id in keyof Required<T>]: Partial<Form.ItemProps<T[id]>> & { id: string } }>(() => {\n    // we have to use a proxy because we don't actually have any object to iterate through\n    // so instead we dynamically create the props when required\n    return new Proxy<{ [id in keyof Required<T>]: Partial<Form.ItemProps<T[id]>> & { id: string } }>(\n      // @ts-expect-error the whole point of a proxy...\n      {},\n      {\n        get(target, id: keyof T) {\n          const validation = latestValidation.current[id];\n          const value = values[id];\n          return {\n            onChange(value) {\n              if (errors[id]) {\n                const error = validationError(validation, value);\n                if (!error) {\n                  setValidationError(id, undefined);\n                }\n              }\n              setValue(id, value);\n            },\n            onBlur(event) {\n              const error = validationError(validation, event.target.value);\n              if (error) {\n                setValidationError(id, error);\n              }\n            },\n            error: errors[id],\n            id,\n            // we shouldn't return `undefined` otherwise it will be an uncontrolled component\n            value: typeof value === \"undefined\" ? null : value,\n            ref: (instance: Form.ItemReference) => {\n              refs.current[id] = instance;\n            },\n          } as Partial<Form.ItemProps<T[keyof T]>> & { id: string };\n        },\n      },\n    );\n  }, [errors, latestValidation, setValidationError, values, refs, setValue]);\n\n  const reset = useCallback(\n    (values?: Partial<T>) => {\n      setErrors({});\n      Object.entries(refs.current).forEach(([id, ref]) => {\n        if (!values?.[id]) {\n          ref?.reset();\n        }\n      });\n      if (values) {\n        // @ts-expect-error it's fine if we don't specify all the values\n        setValues(values);\n      }\n    },\n    [setValues, setErrors, refs],\n  );\n\n  return { handleSubmit, setValidationError, setValue, values, itemProps, focus, reset };\n}\n", "import { useRef, useState } from \"react\";\nimport { AI } from \"@raycast/api\";\nimport { PromiseOptions, usePromise } from \"./usePromise\";\nimport { FunctionReturningPromise } from \"./types\";\n\n/**\n * Stream a prompt completion.\n *\n * @example\n * ```typescript\n * import { Detail, LaunchProps } from \"@raycast/api\";\n * import { use AI } from \"@raycast/utils\";\n *\n * export default function Command(props: LaunchProps<{ arguments: { prompt: string } }>) {\n *   const { isLoading, data } = useAI(props.arguments.prompt);\n *\n *   return <Detail isLoading={isLoading} markdown={data} />;\n * }\n * ```\n */\nexport function useAI(\n  prompt: string,\n  options: {\n    /**\n     * Concrete tasks, such as fixing grammar, require less creativity while open-ended questions, such as generating ideas, require more.\n     * If a number is passed, it needs to be in the range 0-2. For larger values, 2 will be used. For lower values, 0 will be used.\n     */\n    creativity?: AI.Creativity;\n    /**\n     * The AI model to use to answer to the prompt.\n     */\n    model?: AI.Model;\n    /**\n     * Whether to stream the answer or only update the data when the entire answer has been received.\n     */\n    stream?: boolean;\n  } & Omit<PromiseOptions<FunctionReturningPromise>, \"abortable\"> = {},\n) {\n  const { creativity, stream, model, ...usePromiseOptions } = options;\n  const [data, setData] = useState(\"\");\n  const abortable = useRef<AbortController>(null);\n  const { isLoading, error, revalidate } = usePromise(\n    async (prompt: string, creativity?: AI.Creativity, shouldStream?: boolean) => {\n      setData(\"\");\n      const stream = AI.ask(prompt, { creativity, model, signal: abortable.current?.signal });\n      if (shouldStream === false) {\n        setData(await stream);\n      } else {\n        stream.on(\"data\", (data) => {\n          setData((x) => x + data);\n        });\n        await stream;\n      }\n    },\n    [prompt, creativity, stream],\n    { ...usePromiseOptions, abortable },\n  );\n\n  return { isLoading, data, error, revalidate };\n}\n", "import { useMemo, useCallback } from \"react\";\nimport { useLatest } from \"./useLatest\";\nimport { useCachedState } from \"./useCachedState\";\n\n// The algorithm below is inspired by the one used by Firefox:\n// https://wiki.mozilla.org/User:Jesse/NewFrecency\n\ntype Frecency = {\n  lastVisited: number;\n  frecency: number;\n};\n\nconst HALF_LIFE_DAYS = 10;\n\nconst MS_PER_DAY = 24 * 60 * 60 * 1000;\n\nconst VISIT_TYPE_POINTS = {\n  Default: 100,\n  Embed: 0,\n  Bookmark: 140,\n};\n\nfunction getNewFrecency(item?: Frecency): Frecency {\n  const now = Date.now();\n  const lastVisited = item ? item.lastVisited : 0;\n  const frecency = item ? item.frecency : 0;\n\n  const visitAgeInDays = (now - lastVisited) / MS_PER_DAY;\n  const DECAY_RATE_CONSTANT = Math.log(2) / (HALF_LIFE_DAYS * MS_PER_DAY);\n  const currentVisitValue = VISIT_TYPE_POINTS.Default * Math.exp(-DECAY_RATE_CONSTANT * visitAgeInDays);\n  const totalVisitValue = frecency + currentVisitValue;\n\n  return {\n    lastVisited: now,\n    frecency: totalVisitValue,\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst defaultKey = (item: any): string => {\n  if (\n    process.env.NODE_ENV !== \"production\" &&\n    (typeof item !== \"object\" || !item || !(\"id\" in item) || typeof item.id != \"string\")\n  ) {\n    throw new Error(\"Specify a key function or make sure your items have an 'id' property\");\n  }\n  return item.id;\n};\n\n/**\n * Sort an array by its frecency and provide methods to update the frecency of its items.\n * Frecency is a measure that combines frequency and recency. The more often an item is visited/used, and the more recently an item is visited/used, the higher it will rank.\n *\n * @example\n * ```\n * import { List, ActionPanel, Action, Icon } from \"@raycast/api\";\n * import { useFetch, useFrecencySorting } from \"@raycast/utils\";\n *\n * export default function Command() {\n *   const { isLoading, data } = useFetch(\"https://api.example\");\n *   const { data: sortedData, visitItem, resetRanking } = useFrecencySorting(data);\n *\n *   return (\n *     <List isLoading={isLoading}>\n *       {sortedData.map((item) => (\n *         <List.Item\n *           key={item.id}\n *           title={item.title}\n *           actions={\n *             <ActionPanel>\n *               <Action.OpenInBrowser url={item.url} onOpen={() => visitItem(item)} />\n *               <Action.CopyToClipboard title=\"Copy Link\" content={item.url} onCopy={() => visitItem(item)} />\n *               <Action title=\"Reset Ranking\" icon={Icon.ArrowCounterClockwise} onAction={() => resetRanking(item)} />\n *             </ActionPanel>\n *           }\n *         />\n *       ))}\n *     </List>\n *   );\n * };\n * ```\n */\nexport function useFrecencySorting<T extends { id: string }>(\n  data?: T[],\n  options?: { namespace?: string; key?: (item: T) => string; sortUnvisited?: (a: T, b: T) => number },\n): {\n  data: T[];\n  visitItem: (item: T) => Promise<void>;\n  resetRanking: (item: T) => Promise<void>;\n};\nexport function useFrecencySorting<T>(\n  data: T[] | undefined,\n  options: { namespace?: string; key: (item: T) => string; sortUnvisited?: (a: T, b: T) => number },\n): {\n  data: T[];\n  visitItem: (item: T) => Promise<void>;\n  resetRanking: (item: T) => Promise<void>;\n};\nexport function useFrecencySorting<T>(\n  data?: T[],\n  options?: { namespace?: string; key?: (item: T) => string; sortUnvisited?: (a: T, b: T) => number },\n): {\n  data: T[];\n  visitItem: (item: T) => Promise<void>;\n  resetRanking: (item: T) => Promise<void>;\n} {\n  const keyRef = useLatest(options?.key || defaultKey);\n  const sortUnvisitedRef = useLatest(options?.sortUnvisited);\n\n  const [storedFrecencies, setStoredFrecencies] = useCachedState<Record<string, Frecency | undefined>>(\n    `raycast_frecency_${options?.namespace}`,\n    {},\n  );\n\n  const visitItem = useCallback(\n    async function updateFrecency(item: T) {\n      const itemKey = keyRef.current(item);\n\n      setStoredFrecencies((storedFrecencies) => {\n        const frecency = storedFrecencies[itemKey];\n        const newFrecency = getNewFrecency(frecency);\n\n        return {\n          ...storedFrecencies,\n          [itemKey]: newFrecency,\n        };\n      });\n    },\n    [keyRef, setStoredFrecencies],\n  );\n\n  const resetRanking = useCallback(\n    async function removeFrecency(item: T) {\n      const itemKey = keyRef.current(item);\n\n      setStoredFrecencies((storedFrecencies) => {\n        const newFrencencies = { ...storedFrecencies };\n        delete newFrencencies[itemKey];\n\n        return newFrencencies;\n      });\n    },\n    [keyRef, setStoredFrecencies],\n  );\n\n  const sortedData = useMemo(() => {\n    if (!data) {\n      return [];\n    }\n\n    return data.sort((a, b) => {\n      const frecencyA = storedFrecencies[keyRef.current(a)];\n      const frecencyB = storedFrecencies[keyRef.current(b)];\n\n      // If a has a frecency, but b doesn't, a should come first\n      if (frecencyA && !frecencyB) {\n        return -1;\n      }\n\n      // If b has a frecency, but a doesn't, b should come first\n      if (!frecencyA && frecencyB) {\n        return 1;\n      }\n\n      // If both frecencies are defined,put the one with the higher frecency first\n      if (frecencyA && frecencyB) {\n        return frecencyB.frecency - frecencyA.frecency;\n      }\n\n      // If both frecencies are undefined, keep the original order\n      return sortUnvisitedRef.current ? sortUnvisitedRef.current(a, b) : 0;\n    });\n  }, [storedFrecencies, data, keyRef, sortUnvisitedRef]);\n\n  return { data: sortedData, visitItem, resetRanking };\n}\n", "import { LocalStorage } from \"@raycast/api\";\nimport { showFailureToast } from \"./showFailureToast\";\nimport { replacer, reviver } from \"./helpers\";\nimport { usePromise } from \"./usePromise\";\n\n/**\n * A hook to manage a value in the local storage.\n *\n * @remark The value is stored as a JSON string in the local storage.\n *\n * @param key - The key to use for the value in the local storage.\n * @param initialValue - The initial value to use if the key doesn't exist in the local storage.\n * @returns An object with the following properties:\n * - `value`: The value from the local storage or the initial value if the key doesn't exist.\n * - `setValue`: A function to update the value in the local storage.\n * - `removeValue`: A function to remove the value from the local storage.\n * - `isLoading`: A boolean indicating if the value is loading.\n *\n * @example\n * ```\n * const { value, setValue } = useLocalStorage<string>(\"my-key\");\n * const { value, setValue } = useLocalStorage<string>(\"my-key\", \"default value\");\n * ```\n */\nexport function useLocalStorage<T>(key: string, initialValue?: T) {\n  const {\n    data: value,\n    isLoading,\n    mutate,\n  } = usePromise(\n    async (storageKey: string) => {\n      const item = await LocalStorage.getItem<string>(storageKey);\n\n      return typeof item !== \"undefined\" ? (JSON.parse(item, reviver) as T) : initialValue;\n    },\n    [key],\n  );\n\n  async function setValue(value: T) {\n    try {\n      await mutate(LocalStorage.setItem(key, JSON.stringify(value, replacer)), {\n        optimisticUpdate(value) {\n          return value;\n        },\n      });\n    } catch (error) {\n      await showFailureToast(error, { title: \"Failed to set value in local storage\" });\n    }\n  }\n\n  async function removeValue() {\n    try {\n      await mutate(LocalStorage.removeItem(key), {\n        optimisticUpdate() {\n          return undefined;\n        },\n      });\n    } catch (error) {\n      await showFailureToast(error, { title: \"Failed to remove value from local storage\" });\n    }\n  }\n\n  return { value, setValue, removeValue, isLoading };\n}\n", "export { getAvatarIcon } from \"./avatar\";\nexport { getFavicon } from \"./favicon\";\nexport { getProgressIcon } from \"./progress\";\n", "import type { Image } from \"@raycast/api\";\nimport { slightlyLighterColor, slightlyDarkerColor } from \"./color\";\n\nfunction getWholeCharAndI(str: string, i: number): [string, number] {\n  const code = str.charCodeAt(i);\n\n  if (Number.isNaN(code)) {\n    return [\"\", i];\n  }\n  if (code < 0xd800 || code > 0xdfff) {\n    return [str.charAt(i), i]; // Normal character, keeping 'i' the same\n  }\n\n  // High surrogate (could change last hex to 0xDB7F to treat high private\n  // surrogates as single characters)\n  if (0xd800 <= code && code <= 0xdbff) {\n    if (str.length <= i + 1) {\n      throw new Error(\"High surrogate without following low surrogate\");\n    }\n    const next = str.charCodeAt(i + 1);\n    if (0xdc00 > next || next > 0xdfff) {\n      throw new Error(\"High surrogate without following low surrogate\");\n    }\n    return [str.charAt(i) + str.charAt(i + 1), i + 1];\n  }\n\n  // Low surrogate (0xDC00 <= code && code <= 0xDFFF)\n  if (i === 0) {\n    throw new Error(\"Low surrogate without preceding high surrogate\");\n  }\n\n  const prev = str.charCodeAt(i - 1);\n\n  // (could change last hex to 0xDB7F to treat high private surrogates\n  // as single characters)\n  if (0xd800 > prev || prev > 0xdbff) {\n    throw new Error(\"Low surrogate without preceding high surrogate\");\n  }\n\n  // Return the next character instead (and increment)\n  return [str.charAt(i + 1), i + 1];\n}\n\nconst avatarColorSet = [\n  \"#DC829A\", // Pink\n  \"#D64854\", // Red\n  \"#D47600\", // YellowOrange\n  \"#D36CDD\", // Magenta\n  \"#52A9E4\", // Aqua\n  \"#7871E8\", // Indigo\n  \"#70920F\", // YellowGreen\n  \"#43B93A\", // Green\n  \"#EB6B3E\", // Orange\n  \"#26B795\", // BlueGreen\n  \"#D85A9B\", // HotPink\n  \"#A067DC\", // Purple\n  \"#BD9500\", // Yellow\n  \"#5385D9\", // Blue\n];\n\n/**\n * Icon to represent an avatar when you don't have one. The generated avatar\n * will be generated from the initials of the name and have a colorful but consistent background.\n *\n * @returns an Image that can be used where Raycast expects them.\n *\n * @example\n * ```\n * <List.Item icon={getAvatarIcon('Mathieu Dutour')} title=\"Project\" />\n * ```\n */\nexport function getAvatarIcon(\n  name: string,\n  options?: {\n    /**\n     * Custom background color\n     */\n    background?: string;\n    /**\n     * Whether to use a gradient for the background or not.\n     * @default true\n     */\n    gradient?: boolean;\n  },\n): Image.Asset {\n  const words = name.trim().split(\" \");\n  let initials: string;\n  if (words.length == 1 && getWholeCharAndI(words[0], 0)[0]) {\n    initials = getWholeCharAndI(words[0], 0)[0];\n  } else if (words.length > 1) {\n    const firstWordFirstLetter = getWholeCharAndI(words[0], 0)[0] || \"\";\n    const lastWordFirstLetter = getWholeCharAndI(words[words.length - 1], 0)[0] ?? \"\";\n    initials = firstWordFirstLetter + lastWordFirstLetter;\n  } else {\n    initials = \"\";\n  }\n\n  let backgroundColor: string;\n\n  if (options?.background) {\n    backgroundColor = options?.background;\n  } else {\n    let initialsCharIndex = 0;\n    let [char, i] = getWholeCharAndI(initials, 0);\n    while (char) {\n      initialsCharIndex += char.charCodeAt(0);\n      [char, i] = getWholeCharAndI(initials, i + 1);\n    }\n\n    const colorIndex = initialsCharIndex % avatarColorSet.length;\n    backgroundColor = avatarColorSet[colorIndex];\n  }\n\n  const padding = 0;\n  const radius = 50 - padding;\n\n  const svg = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100px\" height=\"100px\">\n  ${\n    options?.gradient !== false\n      ? `<defs>\n      <linearGradient id=\"Gradient\" x1=\"0.25\" x2=\"0.75\" y1=\"0\" y2=\"1\">\n        <stop offset=\"0%\" stop-color=\"${slightlyLighterColor(backgroundColor)}\"/>\n        <stop offset=\"50%\" stop-color=\"${backgroundColor}\"/>\n        <stop offset=\"100%\" stop-color=\"${slightlyDarkerColor(backgroundColor)}\"/>\n      </linearGradient>\n  </defs>`\n      : \"\"\n  }\n      <circle cx=\"50\" cy=\"50\" r=\"${radius}\" fill=\"${\n        options?.gradient !== false ? \"url(#Gradient)\" : backgroundColor\n      }\" />\n      ${\n        initials\n          ? `<text x=\"50\" y=\"80\" font-size=\"${\n              radius - 1\n            }\" font-family=\"Inter, sans-serif\" text-anchor=\"middle\" fill=\"white\">${initials.toUpperCase()}</text>`\n          : \"\"\n      }\n    </svg>\n  `.replaceAll(\"\\n\", \"\");\n  return `data:image/svg+xml,${encodeURIComponent(svg)}`;\n}\n", "function hexToRGB(hex: string) {\n  let r = 0;\n  let g = 0;\n  let b = 0;\n\n  // 3 digits\n  if (hex.length === 4) {\n    r = parseInt(`${hex[1]}${hex[1]}`, 16);\n    g = parseInt(`${hex[2]}${hex[2]}`, 16);\n    b = parseInt(`${hex[3]}${hex[3]}`, 16);\n\n    // 6 digits\n  } else if (hex.length === 7) {\n    r = parseInt(`${hex[1]}${hex[2]}`, 16);\n    g = parseInt(`${hex[3]}${hex[4]}`, 16);\n    b = parseInt(`${hex[5]}${hex[6]}`, 16);\n  } else {\n    throw new Error(`Malformed hex color: ${hex}`);\n  }\n\n  return { r, g, b };\n}\n\nfunction rgbToHex({ r, g, b }: { r: number; g: number; b: number }) {\n  let rString = r.toString(16);\n  let gString = g.toString(16);\n  let bString = b.toString(16);\n\n  if (rString.length === 1) {\n    rString = `0${rString}`;\n  }\n  if (gString.length === 1) {\n    gString = `0${gString}`;\n  }\n  if (bString.length === 1) {\n    bString = `0${bString}`;\n  }\n\n  return `#${rString}${gString}${bString}`;\n}\n\nfunction rgbToHSL({ r, g, b }: { r: number; g: number; b: number }) {\n  // Make r, g, and b fractions of 1\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  // Find greatest and smallest channel values\n  const cmin = Math.min(r, g, b);\n  const cmax = Math.max(r, g, b);\n  const delta = cmax - cmin;\n  let h = 0;\n  let s = 0;\n  let l = 0;\n\n  // Calculate hue\n  // No difference\n  if (delta === 0) {\n    h = 0;\n  }\n  // Red is max\n  else if (cmax === r) {\n    h = ((g - b) / delta) % 6;\n  }\n  // Green is max\n  else if (cmax === g) {\n    h = (b - r) / delta + 2;\n  }\n  // Blue is max\n  else {\n    h = (r - g) / delta + 4;\n  }\n\n  h = Math.round(h * 60);\n\n  // Make negative hues positive behind 360°\n  if (h < 0) {\n    h += 360;\n  }\n\n  // Calculate lightness\n  l = (cmax + cmin) / 2;\n\n  // Calculate saturation\n  s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\n\n  // Multiply l and s by 100\n  s = +(s * 100).toFixed(1);\n  l = +(l * 100).toFixed(1);\n\n  return { h, s, l };\n}\n\nfunction hslToRGB({ h, s, l }: { h: number; s: number; l: number }) {\n  // Must be fractions of 1\n  s /= 100;\n  l /= 100;\n\n  const c = (1 - Math.abs(2 * l - 1)) * s;\n  const x = c * (1 - Math.abs(((h / 60) % 2) - 1));\n  const m = l - c / 2;\n  let r = 0;\n  let g = 0;\n  let b = 0;\n\n  if (h >= 0 && h < 60) {\n    r = c;\n    g = x;\n    b = 0;\n  } else if (h >= 60 && h < 120) {\n    r = x;\n    g = c;\n    b = 0;\n  } else if (h >= 120 && h < 180) {\n    r = 0;\n    g = c;\n    b = x;\n  } else if (h >= 180 && h < 240) {\n    r = 0;\n    g = x;\n    b = c;\n  } else if (h >= 240 && h < 300) {\n    r = x;\n    g = 0;\n    b = c;\n  } else if (h >= 300 && h < 360) {\n    r = c;\n    g = 0;\n    b = x;\n  }\n  r = Math.round((r + m) * 255);\n  g = Math.round((g + m) * 255);\n  b = Math.round((b + m) * 255);\n\n  return { r, g, b };\n}\n\nfunction hexToHSL(hex: string) {\n  return rgbToHSL(hexToRGB(hex));\n}\n\nfunction hslToHex(hsl: { h: number; s: number; l: number }) {\n  return rgbToHex(hslToRGB(hsl));\n}\n\nfunction clamp(value: number, min: number, max: number) {\n  return min < max ? (value < min ? min : value > max ? max : value) : value < max ? max : value > min ? min : value;\n}\n\nconst offset = 12;\n\nexport function slightlyDarkerColor(hex: string) {\n  const hsl = hexToHSL(hex);\n\n  return hslToHex({\n    h: hsl.h,\n    s: hsl.s,\n    l: clamp(hsl.l - offset, 0, 100),\n  });\n}\n\nexport function slightlyLighterColor(hex: string) {\n  const hsl = hexToHSL(hex);\n\n  return hslToHex({\n    h: hsl.h,\n    s: hsl.s,\n    l: clamp(hsl.l + offset, 0, 100),\n  });\n}\n", "import { Icon, Image } from \"@raycast/api\";\nimport { URL } from \"node:url\";\n\n/**\n * Icon showing the favicon of a website.\n *\n * A favicon (favorite icon) is a tiny icon included along with a website, which is displayed in places like the browser's address bar, page tabs, and bookmarks menu.\n *\n * @param url The URL of the website to represent.\n *\n * @returns an Image that can be used where Raycast expects them.\n *\n * @example\n * ```\n * <List.Item icon={getFavicon(\"https://raycast.com\")} title=\"Raycast Website\" />\n * ```\n */\nexport function getFavicon(\n  url: string | URL,\n  options?: {\n    /**\n     * Size of the Favicon\n     * @default 64\n     */\n    size?: number;\n    /**\n     * Fallback icon in case the Favicon is not found.\n     * @default Icon.Link\n     */\n    fallback?: Image.Fallback;\n    /**\n     * A {@link Image.Mask} to apply to the Favicon.\n     */\n    mask?: Image.Mask;\n  },\n): Image.ImageLike {\n  // a func adding https:// to the URL\n  // for cases where the URL is not a full URL\n  // e.g. \"raycast.com\"\n  const withHttps = (url: string) => {\n    if (!url.startsWith(\"http\")) {\n      return `https://${url}`;\n    }\n    return url;\n  };\n\n  try {\n    const sanitize = (url: string) => {\n      if (!url.startsWith(\"http\")) {\n        return `https://${url}`;\n      }\n      return url;\n    };\n\n    const urlObj = typeof url === \"string\" ? new URL(sanitize(url)) : url;\n    const hostname = urlObj.hostname;\n\n    const faviconProvider: \"none\" | \"raycast\" | \"apple\" | \"google\" | \"duckDuckGo\" | \"duckduckgo\" | \"legacy\" =\n      (process.env.FAVICON_PROVIDER as any) ?? \"raycast\";\n\n    switch (faviconProvider) {\n      case \"none\":\n        return {\n          source: options?.fallback ?? Icon.Link,\n          mask: options?.mask,\n        };\n      case \"apple\":\n        // we can't support apple favicons as it's a native API\n        return {\n          source: options?.fallback ?? Icon.Link,\n          mask: options?.mask,\n        };\n      case \"duckduckgo\":\n      case \"duckDuckGo\":\n        return {\n          source: `https://icons.duckduckgo.com/ip3/${hostname}.ico`,\n          fallback: options?.fallback ?? Icon.Link,\n          mask: options?.mask,\n        };\n      case \"google\":\n        return {\n          source: `https://www.google.com/s2/favicons?sz=${options?.size ?? 64}&domain=${hostname}`,\n          fallback: options?.fallback ?? Icon.Link,\n          mask: options?.mask,\n        };\n      case \"legacy\":\n      case \"raycast\":\n      default:\n        return {\n          source: `https://api.ray.so/favicon?url=${hostname}&size=${options?.size ?? 64}`,\n          fallback: options?.fallback ?? Icon.Link,\n          mask: options?.mask,\n        };\n    }\n  } catch (e) {\n    console.error(e);\n    return Icon.Link;\n  }\n}\n", "import { environment, Color } from \"@raycast/api\";\nimport type { Image } from \"@raycast/api\";\n\nfunction polarToCartesian(centerX: number, centerY: number, radius: number, angleInDegrees: number) {\n  const angleInRadians = ((angleInDegrees - 90) * Math.PI) / 180.0;\n\n  return {\n    x: centerX + radius * Math.cos(angleInRadians),\n    y: centerY + radius * Math.sin(angleInRadians),\n  };\n}\n\nfunction describeArc(x: number, y: number, radius: number, startAngle: number, endAngle: number) {\n  const start = polarToCartesian(x, y, radius, endAngle);\n  const end = polarToCartesian(x, y, radius, startAngle);\n\n  const largeArcFlag = endAngle - startAngle <= 180 ? \"0\" : \"1\";\n\n  const d = [\"M\", start.x, start.y, \"A\", radius, radius, 0, largeArcFlag, 0, end.x, end.y].join(\" \");\n\n  return d;\n}\n\n/**\n * Icon to represent the progress of _something_.\n *\n * @param progress Number between 0 and 1.\n * @param color Hex color (default `\"#FF6363\"`) or Color.\n *\n * @returns an Image that can be used where Raycast expects them.\n *\n * @example\n * ```\n * <List.Item icon={getProgressIcon(0.1)} title=\"Project\" />\n * ```\n */\nexport function getProgressIcon(\n  progress: number,\n  color: Color | string = Color.Red,\n  options?: { background?: Color | string; backgroundOpacity?: number },\n): Image.Asset {\n  const background = options?.background || (environment.appearance === \"light\" ? \"black\" : \"white\");\n  const backgroundOpacity = options?.backgroundOpacity || 0.1;\n\n  const stroke = 10;\n  const padding = 5;\n  const radius = 50 - padding - stroke / 2;\n\n  const svg = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100px\" height=\"100px\">\n      <circle cx=\"50\" cy=\"50\" r=\"${radius}\" stroke-width=\"${stroke}\" stroke=\"${\n        progress < 1 ? background : color\n      }\" opacity=\"${progress < 1 ? backgroundOpacity : \"1\"}\" fill=\"none\" />\n      ${\n        progress > 0 && progress < 1\n          ? `<path d=\"${describeArc(\n              50,\n              50,\n              radius,\n              0,\n              progress * 360,\n            )}\" stroke=\"${color}\" stroke-width=\"${stroke}\" fill=\"none\" />`\n          : \"\"\n      }\n    </svg>\n  `.replaceAll(\"\\n\", \"\");\n  return `data:image/svg+xml,${encodeURIComponent(svg)}`;\n}\n", "export { OAuthService } from \"./OAuthService\";\nexport { withAccessToken, getAccessToken } from \"./withAccessToken\";\n\nexport type { WithAccessTokenComponentOrFn } from \"./withAccessToken\";\nexport type {\n  OnAuthorizeParams,\n  OAuthServiceOptions,\n  ProviderWithDefaultClientOptions,\n  ProviderOptions,\n} from \"./types\";\n", "import { Color, OAuth } from \"@raycast/api\";\nimport { PROVIDER_CLIENT_IDS } from \"./providers\";\nimport type {\n  OAuthServiceOptions,\n  OnAuthorizeParams,\n  ProviderOptions,\n  ProviderWithDefaultClientOptions,\n} from \"./types\";\n\n/**\n * Class allowing to create an OAuth service using the the PKCE (Proof Key for Code Exchange) flow.\n *\n * This service is capable of starting the authorization process, fetching and refreshing tokens,\n * as well as managing the authentication state.\n *\n * @example\n * ```typescript\n * const oauthClient = new OAuth.PKCEClient({ ... });\n * const oauthService = new OAuthService({\n *   client: oauthClient,\n *   clientId: 'your-client-id',\n *   scope: 'required scopes',\n *   authorizeUrl: 'https://provider.com/oauth/authorize',\n *   tokenUrl: 'https://provider.com/oauth/token',\n *   refreshTokenUrl: 'https://provider.com/oauth/token',\n *   extraParameters: { 'additional_param': 'value' }\n * });\n * ```\n */\nexport class OAuthService implements OAuthServiceOptions {\n  public clientId: string;\n  public scope: string;\n  public client: OAuth.PKCEClient;\n  public extraParameters?: Record<string, string>;\n  public authorizeUrl: string;\n  public tokenUrl: string;\n  public refreshTokenUrl?: string;\n  public bodyEncoding?: \"json\" | \"url-encoded\";\n  public personalAccessToken?: string;\n  onAuthorize?: (params: OnAuthorizeParams) => void;\n  tokenResponseParser: (response: unknown) => OAuth.TokenResponse;\n  tokenRefreshResponseParser: (response: unknown) => OAuth.TokenResponse;\n\n  constructor(options: OAuthServiceOptions) {\n    this.clientId = options.clientId;\n    this.scope = Array.isArray(options.scope) ? options.scope.join(\" \") : options.scope;\n    this.personalAccessToken = options.personalAccessToken;\n    this.bodyEncoding = options.bodyEncoding;\n    this.client = options.client;\n    this.extraParameters = options.extraParameters;\n    this.authorizeUrl = options.authorizeUrl;\n    this.tokenUrl = options.tokenUrl;\n    this.refreshTokenUrl = options.refreshTokenUrl;\n    this.onAuthorize = options.onAuthorize;\n    this.tokenResponseParser = options.tokenResponseParser ?? ((x) => x as OAuth.TokenResponse);\n    this.tokenRefreshResponseParser = options.tokenRefreshResponseParser ?? ((x) => x as OAuth.TokenResponse);\n    this.authorize = this.authorize.bind(this);\n  }\n\n  /**\n   * Asana OAuth service provided out of the box.\n   *\n   * @example\n   * ```typescript\n   * const asana = OAuthService.asana({ scope: 'default' })\n   * ```\n   */\n  public static asana(options: ProviderWithDefaultClientOptions) {\n    return new OAuthService({\n      client: new OAuth.PKCEClient({\n        redirectMethod: OAuth.RedirectMethod.Web,\n        providerName: \"Asana\",\n        providerIcon: `data:image/svg+xml,${encodeURIComponent(\n          `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"251\" height=\"232\" fill=\"none\"><path fill=\"#F06A6A\" d=\"M179.383 54.373c0 30.017-24.337 54.374-54.354 54.374-30.035 0-54.373-24.338-54.373-54.374C70.656 24.338 94.993 0 125.029 0c30.017 0 54.354 24.338 54.354 54.373ZM54.393 122.33C24.376 122.33.02 146.668.02 176.685c0 30.017 24.337 54.373 54.373 54.373 30.035 0 54.373-24.338 54.373-54.373 0-30.017-24.338-54.355-54.373-54.355Zm141.253 0c-30.035 0-54.373 24.338-54.373 54.374 0 30.035 24.338 54.373 54.373 54.373 30.017 0 54.374-24.338 54.374-54.373 0-30.036-24.338-54.374-54.374-54.374Z\"/></svg>`,\n        )}`,\n        providerId: \"asana\",\n        description: \"Connect your Asana account\",\n      }),\n      clientId: options.clientId ?? PROVIDER_CLIENT_IDS.asana,\n      authorizeUrl: options.authorizeUrl ?? \"https://asana.oauth.raycast.com/authorize\",\n      tokenUrl: options.tokenUrl ?? \"https://asana.oauth.raycast.com/token\",\n      refreshTokenUrl: options.refreshTokenUrl ?? \"https://asana.oauth.raycast.com/refresh-token\",\n      scope: options.scope,\n      personalAccessToken: options.personalAccessToken,\n      onAuthorize: options.onAuthorize,\n      bodyEncoding: options.bodyEncoding,\n      tokenRefreshResponseParser: options.tokenRefreshResponseParser,\n      tokenResponseParser: options.tokenResponseParser,\n    });\n  }\n\n  /**\n   * GitHub OAuth service provided out of the box.\n   *\n   * @example\n   * ```typescript\n   * const github = OAuthService.github({ scope: 'repo user' })\n   * ```\n   */\n  public static github(options: ProviderWithDefaultClientOptions) {\n    return new OAuthService({\n      client: new OAuth.PKCEClient({\n        redirectMethod: OAuth.RedirectMethod.Web,\n        providerName: \"GitHub\",\n        providerIcon: {\n          source: `data:image/svg+xml,${encodeURIComponent(\n            `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"64\" height=\"64\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z\"/></svg>`,\n          )}`,\n\n          tintColor: Color.PrimaryText,\n        },\n        providerId: \"github\",\n        description: \"Connect your GitHub account\",\n      }),\n      clientId: options.clientId ?? PROVIDER_CLIENT_IDS.github,\n      authorizeUrl: options.authorizeUrl ?? \"https://github.oauth.raycast.com/authorize\",\n      tokenUrl: options.tokenUrl ?? \"https://github.oauth.raycast.com/token\",\n      refreshTokenUrl: options.refreshTokenUrl ?? \"https://github.oauth.raycast.com/refresh-token\",\n      scope: options.scope,\n      personalAccessToken: options.personalAccessToken,\n      onAuthorize: options.onAuthorize,\n      bodyEncoding: options.bodyEncoding,\n      tokenRefreshResponseParser: options.tokenRefreshResponseParser,\n      tokenResponseParser: options.tokenResponseParser,\n    });\n  }\n\n  /**\n   * Google OAuth service provided out of the box.\n   *\n   * @example\n   * ```typescript\n   * const google = OAuthService.google({\n   *   clientId: 'custom-client-id',\n   *   authorizeUrl: 'https://accounts.google.com/o/oauth2/v2/auth',\n   *   tokenUrl: 'https://oauth2.googleapis.com/token',\n   *   scope: 'https://www.googleapis.com/auth/drive.readonly',\n   * });\n   * ```\n   */\n  public static google(options: ProviderOptions) {\n    return new OAuthService({\n      client: new OAuth.PKCEClient({\n        redirectMethod: OAuth.RedirectMethod.AppURI,\n        providerName: \"Google\",\n        providerIcon: `data:image/svg+xml,${encodeURIComponent(\n          `<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display:block\" viewBox=\"0 0 48 48\"><path fill=\"#EA4335\" d=\"M24 9.5c3.54 0 6.71 1.22 9.21 3.6l6.85-6.85C35.9 2.38 30.47 0 24 0 14.62 0 6.51 5.38 2.56 13.22l7.98 6.19C12.43 13.72 17.74 9.5 24 9.5z\"/><path fill=\"#4285F4\" d=\"M46.98 24.55c0-1.57-.15-3.09-.38-4.55H24v9.02h12.94c-.58 2.96-2.26 5.48-4.78 7.18l7.73 6c4.51-4.18 7.09-10.36 7.09-17.65z\"/><path fill=\"#FBBC05\" d=\"M10.53 28.59c-.48-1.45-.76-2.99-.76-4.59s.27-3.14.76-4.59l-7.98-6.19C.92 16.46 0 20.12 0 24c0 3.88.92 7.54 2.56 10.78l7.97-6.19z\"/><path fill=\"#34A853\" d=\"M24 48c6.48 0 11.93-2.13 15.89-5.81l-7.73-6c-2.15 1.45-4.92 2.3-8.16 2.3-6.26 0-11.57-4.22-13.47-9.91l-7.98 6.19C6.51 42.62 14.62 48 24 48z\"/><path fill=\"none\" d=\"M0 0h48v48H0z\"/></svg>`,\n        )}`,\n        providerId: \"google\",\n        description: \"Connect your Google account\",\n      }),\n      clientId: options.clientId,\n      authorizeUrl: options.authorizeUrl ?? \"https://accounts.google.com/o/oauth2/v2/auth\",\n      tokenUrl: options.tokenUrl ?? \"https://oauth2.googleapis.com/token\",\n      refreshTokenUrl: options.tokenUrl,\n      scope: options.scope,\n      personalAccessToken: options.personalAccessToken,\n      bodyEncoding: options.bodyEncoding ?? \"url-encoded\",\n      onAuthorize: options.onAuthorize,\n      tokenRefreshResponseParser: options.tokenRefreshResponseParser,\n      tokenResponseParser: options.tokenResponseParser,\n    });\n  }\n\n  /**\n   * Jira OAuth service provided out of the box.\n   *\n   * @example\n   * ```typescript\n   * const jira = OAuthService.jira({\n   *   clientId: 'custom-client-id',\n   *   authorizeUrl: 'https://auth.atlassian.com/authorize',\n   *   tokenUrl: 'https://api.atlassian.com/oauth/token',\n   *   scope: 'read:jira-user read:jira-work offline_access'\n   * });\n   * ```\n   */\n  public static jira(options: ProviderOptions) {\n    return new OAuthService({\n      client: new OAuth.PKCEClient({\n        redirectMethod: OAuth.RedirectMethod.Web,\n        providerName: \"Jira\",\n        providerIcon: `data:image/svg+xml,${encodeURIComponent(\n          `<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"2361\" height=\"2500\" viewBox=\"2.59 0 214.091 224\"><linearGradient id=\"a\" x1=\"102.4\" x2=\"56.15\" y1=\"218.63\" y2=\"172.39\" gradientTransform=\"matrix(1 0 0 -1 0 264)\" gradientUnits=\"userSpaceOnUse\"><stop offset=\".18\" stop-color=\"#0052cc\"/><stop offset=\"1\" stop-color=\"#2684ff\"/></linearGradient><linearGradient xlink:href=\"#a\" id=\"b\" x1=\"114.65\" x2=\"160.81\" y1=\"85.77\" y2=\"131.92\"/><path fill=\"#2684ff\" d=\"M214.06 105.73 117.67 9.34 108.33 0 35.77 72.56 2.59 105.73a8.89 8.89 0 0 0 0 12.54l66.29 66.29L108.33 224l72.55-72.56 1.13-1.12 32.05-32a8.87 8.87 0 0 0 0-12.59zm-105.73 39.39L75.21 112l33.12-33.12L141.44 112z\"/><path fill=\"url(#a)\" d=\"M108.33 78.88a55.75 55.75 0 0 1-.24-78.61L35.62 72.71l39.44 39.44z\"/><path fill=\"url(#b)\" d=\"m141.53 111.91-33.2 33.21a55.77 55.77 0 0 1 0 78.86L181 151.35z\"/></svg>`,\n        )}`,\n        providerId: \"jira\",\n        description: \"Connect your Jira account\",\n      }),\n      clientId: options.clientId,\n      authorizeUrl: options.authorizeUrl ?? \"https://auth.atlassian.com/authorize\",\n      tokenUrl: options.tokenUrl ?? \"https://auth.atlassian.com/oauth/token\",\n      refreshTokenUrl: options.refreshTokenUrl,\n      scope: options.scope,\n      personalAccessToken: options.personalAccessToken,\n      onAuthorize: options.onAuthorize,\n      bodyEncoding: options.bodyEncoding,\n      tokenRefreshResponseParser: options.tokenRefreshResponseParser,\n      tokenResponseParser: options.tokenResponseParser,\n    });\n  }\n\n  /**\n   * Linear OAuth service provided out of the box.\n   *\n   * @example\n   * ```typescript\n   * const linear = OAuthService.linear({ scope: 'read write' })\n   * ```\n   */\n  public static linear(options: ProviderWithDefaultClientOptions) {\n    return new OAuthService({\n      client: new OAuth.PKCEClient({\n        redirectMethod: OAuth.RedirectMethod.Web,\n        providerName: \"Linear\",\n        providerIcon: {\n          source: {\n            light: `data:image/svg+xml,${encodeURIComponent(\n              `<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"#222326\" width=\"200\" height=\"200\" viewBox=\"0 0 100 100\"><path d=\"M1.22541 61.5228c-.2225-.9485.90748-1.5459 1.59638-.857L39.3342 97.1782c.6889.6889.0915 1.8189-.857 1.5964C20.0515 94.4522 5.54779 79.9485 1.22541 61.5228ZM.00189135 46.8891c-.01764375.2833.08887215.5599.28957165.7606L52.3503 99.7085c.2007.2007.4773.3075.7606.2896 2.3692-.1476 4.6938-.46 6.9624-.9259.7645-.157 1.0301-1.0963.4782-1.6481L2.57595 39.4485c-.55186-.5519-1.49117-.2863-1.648174.4782-.465915 2.2686-.77832 4.5932-.92588465 6.9624ZM4.21093 29.7054c-.16649.3738-.08169.8106.20765 1.1l64.77602 64.776c.2894.2894.7262.3742 1.1.2077 1.7861-.7956 3.5171-1.6927 5.1855-2.684.5521-.328.6373-1.0867.1832-1.5407L8.43566 24.3367c-.45409-.4541-1.21271-.3689-1.54074.1832-.99132 1.6684-1.88843 3.3994-2.68399 5.1855ZM12.6587 18.074c-.3701-.3701-.393-.9637-.0443-1.3541C21.7795 6.45931 35.1114 0 49.9519 0 77.5927 0 100 22.4073 100 50.0481c0 14.8405-6.4593 28.1724-16.7199 37.3375-.3903.3487-.984.3258-1.3542-.0443L12.6587 18.074Z\"/></svg>`,\n            )}`,\n            dark: `data:image/svg+xml,${encodeURIComponent(\n              `<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"#fff\" width=\"200\" height=\"200\" viewBox=\"0 0 100 100\"><path d=\"M1.22541 61.5228c-.2225-.9485.90748-1.5459 1.59638-.857L39.3342 97.1782c.6889.6889.0915 1.8189-.857 1.5964C20.0515 94.4522 5.54779 79.9485 1.22541 61.5228ZM.00189135 46.8891c-.01764375.2833.08887215.5599.28957165.7606L52.3503 99.7085c.2007.2007.4773.3075.7606.2896 2.3692-.1476 4.6938-.46 6.9624-.9259.7645-.157 1.0301-1.0963.4782-1.6481L2.57595 39.4485c-.55186-.5519-1.49117-.2863-1.648174.4782-.465915 2.2686-.77832 4.5932-.92588465 6.9624ZM4.21093 29.7054c-.16649.3738-.08169.8106.20765 1.1l64.77602 64.776c.2894.2894.7262.3742 1.1.2077 1.7861-.7956 3.5171-1.6927 5.1855-2.684.5521-.328.6373-1.0867.1832-1.5407L8.43566 24.3367c-.45409-.4541-1.21271-.3689-1.54074.1832-.99132 1.6684-1.88843 3.3994-2.68399 5.1855ZM12.6587 18.074c-.3701-.3701-.393-.9637-.0443-1.3541C21.7795 6.45931 35.1114 0 49.9519 0 77.5927 0 100 22.4073 100 50.0481c0 14.8405-6.4593 28.1724-16.7199 37.3375-.3903.3487-.984.3258-1.3542-.0443L12.6587 18.074Z\" /></svg>`,\n            )}`,\n          },\n        },\n        providerId: \"linear\",\n        description: \"Connect your Linear account\",\n      }),\n      clientId: options.clientId ?? PROVIDER_CLIENT_IDS.linear,\n      authorizeUrl: options.authorizeUrl ?? \"https://linear.oauth.raycast.com/authorize\",\n      tokenUrl: options.tokenUrl ?? \"https://linear.oauth.raycast.com/token\",\n      refreshTokenUrl: options.refreshTokenUrl ?? \"https://linear.oauth.raycast.com/refresh-token\",\n      scope: options.scope,\n      extraParameters: {\n        actor: \"user\",\n      },\n      onAuthorize: options.onAuthorize,\n      bodyEncoding: options.bodyEncoding,\n      tokenRefreshResponseParser: options.tokenRefreshResponseParser,\n      tokenResponseParser: options.tokenResponseParser,\n    });\n  }\n\n  /**\n   * Slack OAuth service provided out of the box.\n   *\n   * @example\n   * ```typescript\n   * const slack = OAuthService.slack({ scope: 'emoji:read' })\n   * ```\n   */\n  public static slack(options: ProviderWithDefaultClientOptions) {\n    return new OAuthService({\n      client: new OAuth.PKCEClient({\n        redirectMethod: OAuth.RedirectMethod.Web,\n        providerName: \"Slack\",\n        providerIcon: `data:image/svg+xml,${encodeURIComponent(\n          `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"73 73 124 124\"><style>.st0{fill:#e01e5a}.st1{fill:#36c5f0}.st2{fill:#2eb67d}.st3{fill:#ecb22e}</style><path d=\"M99.4 151.2c0 7.1-5.8 12.9-12.9 12.9-7.1 0-12.9-5.8-12.9-12.9 0-7.1 5.8-12.9 12.9-12.9h12.9v12.9zM105.9 151.2c0-7.1 5.8-12.9 12.9-12.9s12.9 5.8 12.9 12.9v32.3c0 7.1-5.8 12.9-12.9 12.9s-12.9-5.8-12.9-12.9v-32.3z\" class=\"st0\"/><path d=\"M118.8 99.4c-7.1 0-12.9-5.8-12.9-12.9 0-7.1 5.8-12.9 12.9-12.9s12.9 5.8 12.9 12.9v12.9h-12.9zM118.8 105.9c7.1 0 12.9 5.8 12.9 12.9s-5.8 12.9-12.9 12.9H86.5c-7.1 0-12.9-5.8-12.9-12.9s5.8-12.9 12.9-12.9h32.3z\" class=\"st1\"/><path d=\"M170.6 118.8c0-7.1 5.8-12.9 12.9-12.9 7.1 0 12.9 5.8 12.9 12.9s-5.8 12.9-12.9 12.9h-12.9v-12.9zM164.1 118.8c0 7.1-5.8 12.9-12.9 12.9-7.1 0-12.9-5.8-12.9-12.9V86.5c0-7.1 5.8-12.9 12.9-12.9 7.1 0 12.9 5.8 12.9 12.9v32.3z\" class=\"st2\"/><path d=\"M151.2 170.6c7.1 0 12.9 5.8 12.9 12.9 0 7.1-5.8 12.9-12.9 12.9-7.1 0-12.9-5.8-12.9-12.9v-12.9h12.9zM151.2 164.1c-7.1 0-12.9-5.8-12.9-12.9 0-7.1 5.8-12.9 12.9-12.9h32.3c7.1 0 12.9 5.8 12.9 12.9 0 7.1-5.8 12.9-12.9 12.9h-32.3z\" class=\"st3\"/></svg>`,\n        )}`,\n        providerId: \"slack\",\n        description: \"Connect your Slack account\",\n      }),\n      clientId: options.clientId ?? PROVIDER_CLIENT_IDS.slack,\n      authorizeUrl: options.authorizeUrl ?? \"https://slack.oauth.raycast.com/authorize\",\n      tokenUrl: options.tokenUrl ?? \"https://slack.oauth.raycast.com/token\",\n      refreshTokenUrl: options.tokenUrl ?? \"https://slack.oauth.raycast.com/refresh-token\",\n      scope: \"\",\n      extraParameters: {\n        user_scope: options.scope,\n      },\n      personalAccessToken: options.personalAccessToken,\n      bodyEncoding: options.tokenUrl ? options.bodyEncoding ?? \"url-encoded\" : \"json\",\n      onAuthorize: options.onAuthorize,\n      tokenRefreshResponseParser: options.tokenRefreshResponseParser,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      tokenResponseParser:\n        options.tokenResponseParser ??\n        ((response: any) => {\n          return {\n            access_token: response.authed_user.access_token,\n            scope: response.authed_user.scope,\n          };\n        }),\n    });\n  }\n\n  /**\n   * Zoom OAuth service provided out of the box.\n   *\n   * @example\n   * ```typescript\n   * const zoom = OAuthService.zoom({\n   *   clientId: 'custom-client-id',\n   *   authorizeUrl: 'https://zoom.us/oauth/authorize',\n   *   tokenUrl: 'https://zoom.us/oauth/token',\n   *   scope: 'meeting:write',\n   *   personalAccessToken: 'personal-access-token',\n   * });\n   * ```\n   */\n  public static zoom(options: ProviderOptions) {\n    return new OAuthService({\n      client: new OAuth.PKCEClient({\n        redirectMethod: OAuth.RedirectMethod.Web,\n        providerName: \"Zoom\",\n        providerIcon: `data:image/svg+xml,${encodeURIComponent(\n          `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 351.845 80\"><path d=\"M73.786 78.835H10.88A10.842 10.842 0 0 1 .833 72.122a10.841 10.841 0 0 1 2.357-11.85L46.764 16.7h-31.23C6.954 16.699 0 9.744 0 1.165h58.014c4.414 0 8.357 2.634 10.046 6.712a10.843 10.843 0 0 1-2.356 11.85L22.13 63.302h36.122c8.58 0 15.534 6.955 15.534 15.534Zm278.059-48.544C351.845 13.588 338.256 0 321.553 0c-8.934 0-16.975 3.89-22.524 10.063C293.48 3.89 285.44 0 276.505 0c-16.703 0-30.291 13.588-30.291 30.291v48.544c8.579 0 15.534-6.955 15.534-15.534v-33.01c0-8.137 6.62-14.757 14.757-14.757s14.757 6.62 14.757 14.757v33.01c0 8.58 6.955 15.534 15.534 15.534V30.291c0-8.137 6.62-14.757 14.757-14.757s14.758 6.62 14.758 14.757v33.01c0 8.58 6.954 15.534 15.534 15.534V30.291ZM238.447 40c0 22.091-17.909 40-40 40s-40-17.909-40-40 17.908-40 40-40 40 17.909 40 40Zm-15.534 0c0-13.512-10.954-24.466-24.466-24.466S173.98 26.488 173.98 40s10.953 24.466 24.466 24.466S222.913 53.512 222.913 40Zm-70.68 0c0 22.091-17.909 40-40 40s-40-17.909-40-40 17.909-40 40-40 40 17.909 40 40Zm-15.534 0c0-13.512-10.954-24.466-24.466-24.466S87.767 26.488 87.767 40s10.954 24.466 24.466 24.466S136.699 53.512 136.699 40Z\" style=\"fill:#0b5cff\"/></svg>`,\n        )}`,\n        providerId: \"zoom\",\n        description: \"Connect your Zoom account\",\n      }),\n      clientId: options.clientId,\n      authorizeUrl: options.authorizeUrl ?? \"https://zoom.us/oauth/authorize\",\n      tokenUrl: options.tokenUrl ?? \"https://zoom.us/oauth/token\",\n      refreshTokenUrl: options.refreshTokenUrl,\n      scope: options.scope,\n      personalAccessToken: options.personalAccessToken,\n      bodyEncoding: options.bodyEncoding ?? \"url-encoded\",\n      onAuthorize: options.onAuthorize,\n      tokenRefreshResponseParser: options.tokenRefreshResponseParser,\n      tokenResponseParser: options.tokenResponseParser,\n    });\n  }\n\n  /**\n   * Initiates the OAuth authorization process or refreshes existing tokens if necessary.\n   * If the current token set has a refresh token and it is expired, then the function will refresh the tokens.\n   * If no tokens exist, it will initiate the OAuth authorization process and fetch the tokens.\n   *\n   * @returns {Promise<string>} A promise that resolves with the access token obtained from the authorization flow, or null if the token could not be obtained.\n   */\n  async authorize() {\n    const currentTokenSet = await this.client.getTokens();\n    if (currentTokenSet?.accessToken) {\n      if (currentTokenSet.refreshToken && currentTokenSet.isExpired()) {\n        const tokens = await this.refreshTokens({\n          token: currentTokenSet.refreshToken,\n        });\n\n        // In the case where the refresh token flows fails, nothing is returned and the authorize function is called again.\n        if (tokens) {\n          await this.client.setTokens(tokens);\n          return tokens.access_token;\n        }\n      }\n      return currentTokenSet.accessToken;\n    }\n\n    const authRequest = await this.client.authorizationRequest({\n      endpoint: this.authorizeUrl,\n      clientId: this.clientId,\n      scope: this.scope,\n      extraParameters: this.extraParameters,\n    });\n\n    const { authorizationCode } = await this.client.authorize(authRequest);\n    const tokens = await this.fetchTokens({\n      authRequest,\n      authorizationCode,\n    });\n\n    await this.client.setTokens(tokens);\n\n    return tokens.access_token;\n  }\n\n  private async fetchTokens({\n    authRequest,\n    authorizationCode,\n  }: {\n    authRequest: OAuth.AuthorizationRequest;\n    authorizationCode: string;\n  }) {\n    let options;\n    if (this.bodyEncoding === \"url-encoded\") {\n      const params = new URLSearchParams();\n      params.append(\"client_id\", this.clientId);\n      params.append(\"code\", authorizationCode);\n      params.append(\"code_verifier\", authRequest.codeVerifier);\n      params.append(\"grant_type\", \"authorization_code\");\n      params.append(\"redirect_uri\", authRequest.redirectURI);\n\n      options = { body: params };\n    } else {\n      options = {\n        body: JSON.stringify({\n          client_id: this.clientId,\n          code: authorizationCode,\n          code_verifier: authRequest.codeVerifier,\n          grant_type: \"authorization_code\",\n          redirect_uri: authRequest.redirectURI,\n        }),\n        headers: { \"Content-Type\": \"application/json\" },\n      };\n    }\n\n    const response = await fetch(this.tokenUrl, { method: \"POST\", ...options });\n    if (!response.ok) {\n      const responseText = await response.text();\n      console.error(\"fetch tokens error:\", responseText);\n      throw new Error(`Error while fetching tokens: ${response.status} (${response.statusText})\\n${responseText}`);\n    }\n    const tokens = this.tokenResponseParser(await response.json());\n\n    // Some clients such as Linear can return a scope array instead of a string\n    return Array.isArray(tokens.scope) ? { ...tokens, scope: tokens.scope.join(\" \") } : tokens;\n  }\n\n  private async refreshTokens({ token }: { token: string }) {\n    let options;\n    if (this.bodyEncoding === \"url-encoded\") {\n      const params = new URLSearchParams();\n      params.append(\"client_id\", this.clientId);\n      params.append(\"refresh_token\", token);\n      params.append(\"grant_type\", \"refresh_token\");\n\n      options = { body: params };\n    } else {\n      options = {\n        body: JSON.stringify({\n          client_id: this.clientId,\n          refresh_token: token,\n          grant_type: \"refresh_token\",\n        }),\n        headers: { \"Content-Type\": \"application/json\" },\n      };\n    }\n\n    const response = await fetch(this.refreshTokenUrl ?? this.tokenUrl, { method: \"POST\", ...options });\n    if (!response.ok) {\n      const responseText = await response.text();\n      console.error(\"refresh tokens error:\", responseText);\n      // If the refresh token is invalid, stop the flow here, log out the user and prompt them to re-authorize.\n      this.client.description = `${this.client.providerName} needs you to sign-in again. Press ⏎ or click the button below to continue.`;\n      await this.client.removeTokens();\n      await this.authorize();\n    } else {\n      const tokenResponse = this.tokenRefreshResponseParser(await response.json());\n      tokenResponse.refresh_token = tokenResponse.refresh_token ?? token;\n      return tokenResponse;\n    }\n  }\n}\n", "export const PROVIDER_CLIENT_IDS = {\n  asana: \"1191201745684312\",\n  github: \"7235fe8d42157f1f38c0\",\n  linear: \"c8ff37b9225c3c9aefd7d66ea0e5b6f1\",\n  slack: \"851756884692.5546927290212\",\n};\n", "import React from \"react\";\nimport { environment, OAuth } from \"@raycast/api\";\nimport type { OAuthType, OnAuthorizeParams } from \"./types\";\n\nlet token: string | null = null;\nlet type: OAuthType | null = null;\nlet authorize: Promise<string> | null = null;\nlet getIdToken: Promise<string | undefined> | null = null;\nlet onAuthorize: Promise<void> | null = null;\n\ntype WithAccessTokenParameters = {\n  /**\n   * An optional instance of a PKCE Client that you can create using Raycast API.\n   * This client is used to return the `idToken` as part of the `onAuthorize` callback.\n   */\n  client?: OAuth.PKCEClient;\n  /**\n   * A function that initiates the OAuth token retrieval process\n   * @returns a promise that resolves to an access token.\n   */\n  authorize: () => Promise<string>;\n  /**\n   * An optional string that represents an already obtained personal access token\n   */\n  personalAccessToken?: string;\n  /**\n   * An optional callback function that is called once the user has been properly logged in through OAuth.\n   * @param {object} params - Parameters of the callback\n   * @param {string} options.token - The retrieved access token\n   * @param {string} options.type - The access token's type (either `oauth` or `personal`)\n   * @param {string} options.idToken - The optional id token. The `idToken` is returned if `options.client` is provided and if it's returned in the initial token set.\n   */\n  onAuthorize?: (params: OnAuthorizeParams) => void;\n};\n\n/**\n * The component (for a view/menu-bar commands) or function (for a no-view command) that is passed to withAccessToken.\n */\nexport type WithAccessTokenComponentOrFn<T = any, U = any> = ((params: T) => Promise<U> | U) | React.ComponentType<T>;\n\n/**\n * Higher-order component to wrap a given component or function and set an access token in a shared global variable.\n *\n * The function intercepts the component rendering process to either fetch an OAuth token asynchronously\n * or use a provided personal access token. A global variable will be then set with the received token\n * that you can get with the `getAccessToken` function.\n *\n * @example\n * ```typescript\n * import { Detail } from \"@raycast/api\";\n * import { OAuthService, getAccessToken, withAccessToken } from \"@raycast/utils\";\n *\n * const github = OAuthService.github({ scope: \"notifications repo read:org read:user read:project\" });\n *\n * function AuthorizedComponent() {\n *  const { token } = getAccessToken();\n *  ...\n * }\n *\n * export default withAccessToken(github)(AuthorizedComponent);\n * ```\n *\n * @returns {React.ComponentType<T>} The wrapped component.\n */\nexport function withAccessToken<T = any, U = any>(\n  options: WithAccessTokenParameters,\n): <V extends WithAccessTokenComponentOrFn<T, U>>(\n  fnOrComponent: V,\n) => V extends React.ComponentType<T> ? React.FunctionComponent<T> : (props: T) => Promise<U>;\nexport function withAccessToken<T>(options: WithAccessTokenParameters) {\n  if (environment.commandMode === \"no-view\") {\n    return (fn: (props: T) => Promise<void> | (() => void)) => {\n      const noViewFn = async (props: T) => {\n        if (!token) {\n          token = options.personalAccessToken ?? (await options.authorize());\n          type = options.personalAccessToken ? \"personal\" : \"oauth\";\n          const idToken = (await options.client?.getTokens())?.idToken;\n\n          if (options.onAuthorize) {\n            await Promise.resolve(options.onAuthorize({ token, type, idToken }));\n          }\n        }\n\n        return fn(props);\n      };\n\n      return noViewFn;\n    };\n  }\n\n  return (Component: React.ComponentType<T>) => {\n    const WrappedComponent: React.ComponentType<T> = (props) => {\n      if (options.personalAccessToken) {\n        token = options.personalAccessToken;\n        type = \"personal\";\n      } else {\n        if (!authorize) {\n          authorize = options.authorize();\n        }\n        token = React.use(authorize);\n        type = \"oauth\";\n      }\n\n      let idToken: string | undefined;\n      if (options.client) {\n        if (!getIdToken) {\n          getIdToken = options.client?.getTokens().then((tokens) => tokens?.idToken);\n        }\n        idToken = React.use(getIdToken);\n      }\n\n      if (options.onAuthorize) {\n        if (!onAuthorize) {\n          onAuthorize = Promise.resolve(options.onAuthorize({ token: token!, type, idToken }));\n        }\n        React.use(onAuthorize);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore too complicated for TS\n      return <Component {...props} />;\n    };\n\n    WrappedComponent.displayName = `withAccessToken(${Component.displayName || Component.name})`;\n\n    return WrappedComponent;\n  };\n}\n\n/**\n * Returns the access token and its type. Note that this function must be called in a component wrapped with `withAccessToken`.\n *\n * Will throw an Error if called outside of a function or component wrapped with `withAccessToken`\n *\n * @returns {{ token: string, type: \"oauth\" | \"personal\" }} An object containing the `token`\n * and its `type`, where type can be either 'oauth' for OAuth tokens or 'personal' for a\n * personal access token.\n */\nexport function getAccessToken(): {\n  token: string;\n  /** `oauth` for OAuth tokens or `personal` for personal access token */\n  type: \"oauth\" | \"personal\";\n} {\n  if (!token || !type) {\n    throw new Error(\"getAccessToken must be used when authenticated (eg. used inside `withAccessToken`)\");\n  }\n\n  return { token, type };\n}\n", "import { environment, LaunchProps, LaunchType } from \"@raycast/api\";\nimport fs from \"node:fs\";\nimport path from \"node:path\";\n\nexport enum DeeplinkType {\n  /** A script command */\n  ScriptCommand = \"script-command\",\n  /** An extension command */\n  Extension = \"extension\",\n}\n\n/**\n * Options for creating a deeplink to a script command.\n */\nexport type CreateScriptCommandDeeplinkOptions = {\n  /**\n   * The type of deeplink, which should be \"script-command\".\n   */\n  type: DeeplinkType.ScriptCommand;\n  /**\n   * The name of the command.\n   */\n  command: string;\n  /**\n   * If the command accepts arguments, they can be passed using this query parameter.\n   */\n  arguments?: string[];\n};\n\n/**\n * Base options for creating a deeplink to an extension.\n */\nexport type CreateExtensionDeeplinkBaseOptions = {\n  /**\n   * The type of deeplink, which should be \"extension\".\n   */\n  type?: DeeplinkType.Extension;\n  /**\n   * The command associated with the extension.\n   */\n  command: string;\n  /**\n   * Either \"userInitiated\", which runs the command in the foreground, or \"background\", which skips bringing Raycast to the front.\n   */\n  launchType?: LaunchType;\n  /**\n   * If the command accepts arguments, they can be passed using this query parameter.\n   */\n  arguments?: LaunchProps[\"arguments\"];\n  /**\n   * If the command make use of LaunchContext, it can be passed using this query parameter.\n   */\n  context?: LaunchProps[\"launchContext\"];\n  /**\n   * Some text to prefill the search bar or first text input of the command\n   */\n  fallbackText?: string;\n};\n\n/**\n * Options for creating a deeplink to an extension from another extension.\n * Requires both the ownerOrAuthorName and extensionName.\n */\nexport type CreateInterExtensionDeeplinkOptions = CreateExtensionDeeplinkBaseOptions & {\n  /**\n   * The name of the owner or author of the extension.\n   */\n  ownerOrAuthorName: string;\n  /**\n   * The name of the extension.\n   */\n  extensionName: string;\n};\n\n/**\n * Options for creating a deeplink to an extension.\n */\nexport type CreateExtensionDeeplinkOptions = CreateInterExtensionDeeplinkOptions | CreateExtensionDeeplinkBaseOptions;\n\n/**\n * Options for creating a deeplink.\n */\nexport type CreateDeeplinkOptions = CreateScriptCommandDeeplinkOptions | CreateExtensionDeeplinkOptions;\n\nfunction getProtocol() {\n  return environment.raycastVersion.includes(\"alpha\") ? \"raycastinternal://\" : \"raycast://\";\n}\n\nfunction getOwnerOrAuthorName() {\n  const packageJSON = JSON.parse(fs.readFileSync(path.join(environment.assetsPath, \"..\", \"package.json\"), \"utf8\"));\n  return packageJSON.owner || packageJSON.author;\n}\n\nexport function createScriptCommandDeeplink(options: CreateScriptCommandDeeplinkOptions): string {\n  let url = `${getProtocol()}script-commands/${options.command}`;\n\n  if (options.arguments) {\n    let params = \"\";\n    for (const arg of options.arguments) {\n      params += \"&arguments=\" + encodeURIComponent(arg);\n    }\n    url += \"?\" + params.substring(1);\n  }\n\n  return url;\n}\n\nexport function createExtensionDeeplink(options: CreateExtensionDeeplinkOptions): string {\n  let ownerOrAuthorName = getOwnerOrAuthorName();\n  let extensionName = environment.extensionName;\n\n  if (\"ownerOrAuthorName\" in options && \"extensionName\" in options) {\n    ownerOrAuthorName = options.ownerOrAuthorName;\n    extensionName = options.extensionName;\n  }\n\n  let url = `${getProtocol()}extensions/${ownerOrAuthorName}/${extensionName}/${options.command}`;\n\n  let params = \"\";\n  if (options.launchType) {\n    params += \"&launchType=\" + encodeURIComponent(options.launchType);\n  }\n\n  if (options.arguments) {\n    params += \"&arguments=\" + encodeURIComponent(JSON.stringify(options.arguments));\n  }\n\n  if (options.context) {\n    params += \"&context=\" + encodeURIComponent(JSON.stringify(options.context));\n  }\n\n  if (options.fallbackText) {\n    params += \"&fallbackText=\" + encodeURIComponent(options.fallbackText);\n  }\n\n  if (params) {\n    url += \"?\" + params.substring(1);\n  }\n\n  return url;\n}\n\n/**\n * Creates a deeplink to a script command or extension.\n */\nexport function createDeeplink(options: CreateDeeplinkOptions): string {\n  if (options.type === DeeplinkType.ScriptCommand) {\n    return createScriptCommandDeeplink(options);\n  } else {\n    return createExtensionDeeplink(options);\n  }\n}\n", "import { baseExecuteSQL } from \"./sql-utils\";\n\n/**\n * Executes a SQL query on a local SQLite database and returns the query result in JSON format.\n *\n * @param databasePath - The path to the SQLite database file.\n * @param query - The SQL query to execute.\n * @returns A Promise that resolves to an array of objects representing the query results.\n *\n * @example\n * ```typescript\n * import { closeMainWindow, Clipboard } from \"@raycast/api\";\n * import { executeSQL } from \"@raycast/utils\";\n *\n * type Message = { body: string; code: string };\n *\n * const DB_PATH = \"/path/to/chat.db\";\n *\n * export default async function Command() {\n *   const query = `SELECT body, code FROM ...`\n *\n *   const messages = await executeSQL<Message>(DB_PATH, query);\n *\n *   if (messages.length > 0) {\n *     const latestCode = messages[0].code;\n *     await Clipboard.paste(latestCode);\n *     await closeMainWindow();\n *   }\n * }\n * ```\n */\nexport function executeSQL<T = unknown>(databasePath: string, query: string) {\n  return baseExecuteSQL<T>(databasePath, query);\n}\n", "import childProcess from \"node:child_process\";\nimport {\n  defaultParsing,\n  getSpawnedPromise,\n  getSpawnedResult,\n  handleOutput,\n  ParseExecOutputHandler,\n} from \"./exec-utils\";\n\ntype AppleScriptOptions = {\n  /**\n   * By default, `runAppleScript` returns its results in human-readable form: strings do not have quotes around them, characters are not escaped, braces for lists and records are omitted, etc. This is generally more useful, but can introduce ambiguities. For example, the lists `{\"foo\", \"bar\"}` and `{{\"foo\", {\"bar\"}}}` would both be displayed as ‘foo, bar’. To see the results in an unambiguous form that could be recompiled into the same value, set `humanReadableOutput` to `false`.\n   *\n   * @default true\n   */\n  humanReadableOutput?: boolean;\n  /**\n   * Whether the script is using [`AppleScript`](https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html#//apple_ref/doc/uid/TP40000983) or [`JavaScript`](https://developer.apple.com/library/archive/releasenotes/InterapplicationCommunication/RN-JavaScriptForAutomation/Articles/Introduction.html#//apple_ref/doc/uid/TP40014508-CH111-SW1).\n   *\n   * @default \"AppleScript\"\n   */\n  language?: \"AppleScript\" | \"JavaScript\";\n  /**\n   * A Signal object that allows you to abort the request if required via an AbortController object.\n   */\n  signal?: AbortSignal;\n  /** If timeout is greater than `0`, the parent will send the signal `SIGTERM` if the child runs longer than timeout milliseconds.\n   *\n   * @default 10000\n   */\n  timeout?: number;\n};\n\n/**\n * Executes an AppleScript script.\n *\n * @example\n * ```typescript\n * import { showHUD } from \"@raycast/api\";\n * import { runAppleScript, showFailureToast } from \"@raycast/utils\";\n *\n * export default async function () {\n *   try {\n *     const res = await runAppleScript(\n *       `\n *       on run argv\n *         return \"hello, \" & item 1 of argv & \".\"\n *       end run\n *       `,\n *       [\"world\"]\n *     );\n *     await showHUD(res);\n *   } catch (error) {\n *     showFailureToast(error, { title: \"Could not run AppleScript\" });\n *   }\n * }\n * ```\n */\nexport async function runAppleScript<T = string>(\n  script: string,\n  options?: AppleScriptOptions & {\n    parseOutput?: ParseExecOutputHandler<T, string, AppleScriptOptions>;\n  },\n): Promise<string>;\nexport async function runAppleScript<T = string>(\n  script: string,\n  /**\n   * The arguments to pass to the script.\n   */\n  args: string[],\n  options?: AppleScriptOptions & {\n    parseOutput?: ParseExecOutputHandler<T, string, AppleScriptOptions>;\n  },\n): Promise<string>;\nexport async function runAppleScript<T = string>(\n  script: string,\n  optionsOrArgs?:\n    | string[]\n    | (AppleScriptOptions & {\n        parseOutput?: ParseExecOutputHandler<T, string, AppleScriptOptions>;\n      }),\n  options?: AppleScriptOptions & {\n    parseOutput?: ParseExecOutputHandler<T, string, AppleScriptOptions>;\n  },\n): Promise<string> {\n  if (process.platform !== \"darwin\") {\n    throw new Error(\"AppleScript is only supported on macOS\");\n  }\n\n  const { humanReadableOutput, language, timeout, ...execOptions } = Array.isArray(optionsOrArgs)\n    ? options || {}\n    : optionsOrArgs || {};\n\n  const outputArguments = humanReadableOutput !== false ? [] : [\"-ss\"];\n  if (language === \"JavaScript\") {\n    outputArguments.push(\"-l\", \"JavaScript\");\n  }\n  if (Array.isArray(optionsOrArgs)) {\n    outputArguments.push(\"-\", ...optionsOrArgs);\n  }\n\n  const spawned = childProcess.spawn(\"osascript\", outputArguments, {\n    ...execOptions,\n    env: { PATH: \"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\" },\n  });\n  const spawnedPromise = getSpawnedPromise(spawned, { timeout: timeout ?? 10000 });\n\n  spawned.stdin.end(script);\n\n  const [{ error, exitCode, signal, timedOut }, stdoutResult, stderrResult] = await getSpawnedResult<string>(\n    spawned,\n    { encoding: \"utf8\" },\n    spawnedPromise,\n  );\n  const stdout = handleOutput({ stripFinalNewline: true }, stdoutResult);\n  const stderr = handleOutput({ stripFinalNewline: true }, stderrResult);\n\n  return defaultParsing({\n    stdout,\n    stderr,\n    error,\n    exitCode,\n    signal,\n    timedOut,\n    command: \"osascript\",\n    options,\n    parentError: new Error(),\n  });\n}\n", "import childProcess from \"node:child_process\";\nimport {\n  defaultParsing,\n  getSpawnedPromise,\n  getSpawnedResult,\n  handleOutput,\n  ParseExecOutputHandler,\n} from \"./exec-utils\";\n\ntype PowerShellScriptOptions = {\n  /**\n   * A Signal object that allows you to abort the request if required via an AbortController object.\n   */\n  signal?: AbortSignal;\n  /** If timeout is greater than `0`, the parent will send the signal `SIGTERM` if the child runs longer than timeout milliseconds.\n   *\n   * @default 10000\n   */\n  timeout?: number;\n};\n\n/**\n * Executes a PowerShell script.\n *\n * @example\n * ```typescript\n * import { showHUD } from \"@raycast/api\";\n * import { runPowerShellScript, showFailureToast } from \"@raycast/utils\";\n *\n * export default async function () {\n *   try {\n *     const res = await runPowerShellScript(\n *       `\n *       Write-Host \"hello, world.\"\n *       `,\n *     );\n *     await showHUD(res);\n *   } catch (error) {\n *     showFailureToast(error, { title: \"Could not run PowerShell\" });\n *   }\n * }\n * ```\n */\nexport async function runPowerShellScript<T = string>(\n  script: string,\n  options?: PowerShellScriptOptions & {\n    parseOutput?: ParseExecOutputHandler<T, string, PowerShellScriptOptions>;\n  },\n): Promise<string> {\n  if (process.platform !== \"win32\") {\n    throw new Error(\"PowerShell is only supported on Windows\");\n  }\n\n  const { timeout, ...execOptions } = options || {};\n\n  const outputArguments = [\"-NoLogo\", \"-NoProfile\", \"-NonInteractive\", \"-Command\", \"-\"];\n\n  const spawned = childProcess.spawn(\"powershell.exe\", outputArguments, {\n    ...execOptions,\n  });\n  const spawnedPromise = getSpawnedPromise(spawned, { timeout: timeout ?? 10000 });\n\n  spawned.stdin.end(script);\n\n  const [{ error, exitCode, signal, timedOut }, stdoutResult, stderrResult] = await getSpawnedResult<string>(\n    spawned,\n    { encoding: \"utf8\" },\n    spawnedPromise,\n  );\n  const stdout = handleOutput({ stripFinalNewline: true }, stdoutResult);\n  const stderr = handleOutput({ stripFinalNewline: true }, stderrResult);\n\n  return defaultParsing({\n    stdout,\n    stderr,\n    error,\n    exitCode,\n    signal,\n    timedOut,\n    command: \"powershell.exe\",\n    options,\n    parentError: new Error(),\n  });\n}\n", "import { Cache } from \"@raycast/api\";\nimport { hash, replacer, reviver } from \"./helpers\";\n\n/**\n * Wraps a function with caching functionality using Raycast's Cache API.\n * Allows for caching of expensive functions like paginated API calls that rarely change.\n *\n * @param fn - The async function to cache results from\n * @param options - Optional configuration for the cache behavior\n * @param options.validate - Optional validation function for cached data\n * @param options.maxAge - Maximum age of cached data in milliseconds\n * @returns An async function that returns the result of the function, either from cache or fresh execution\n *\n * @example\n * ```ts\n * const cachedFunction = withCache(fetchExpensiveData, {\n *   maxAge: 5 * 60 * 1000 // Cache for 5 minutes\n * });\n *\n * const result = await cachedFunction(query);\n * ```\n */\nexport function withCache<Fn extends (...args: any) => Promise<any>>(\n  fn: Fn,\n  options?: {\n    /** function that receives the cached data and returns a boolean depending on whether the data is still valid or not. */\n    validate?: (data: Awaited<ReturnType<Fn>>) => boolean;\n    /** Maximum age of cached data in milliseconds after which the data will be considered invalid */\n    maxAge?: number;\n  },\n): Fn & { clearCache: () => void } {\n  const cache = new Cache({ namespace: hash(fn) });\n\n  const wrappedFn = async (...args: Parameters<Fn>) => {\n    const key =\n      hash(args || []) + (options as unknown as { internal_cacheKeySuffix?: string })?.internal_cacheKeySuffix;\n    const cached = cache.get(key);\n    if (cached) {\n      const { data, timestamp } = JSON.parse(cached, reviver);\n      const isExpired = options?.maxAge && Date.now() - timestamp > options.maxAge;\n      if (!isExpired && (!options?.validate || options.validate(data))) {\n        return data;\n      }\n    }\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const result = await fn(...args);\n    cache.set(\n      key,\n      JSON.stringify(\n        {\n          data: result,\n          timestamp: Date.now(),\n        },\n        replacer,\n      ),\n    );\n    return result;\n  };\n\n  wrappedFn.clearCache = () => {\n    cache.clear();\n  };\n\n  // @ts-expect-error too complex for TS\n  return wrappedFn;\n}\n", "import { Icon, Detail, ActionPanel, Action, showToast, Color } from \"@raycast/api\";\nimport { useEffect, useState } from \"react\";\nimport getProjectMarkdown from \"../markdown/get-deployment-markdown\";\nimport fromNow from \"../utils/time\";\nimport { Build, Deployment, Team, User } from \"../types\";\nimport { useFetch } from \"@raycast/utils\";\nimport { FetchHeaders, getDeploymentURL, getFetchDeploymentBuildsURL } from \"../vercel\";\n\ntype Props = {\n  deployment: Deployment;\n  selectedTeam?: Team;\n  username?: User[\"username\"];\n};\n\nconst InspectDeployment = ({ deployment, selectedTeam, username }: Props) => {\n  // const [build, setMostRecentBuild] = useState<Build>();\n  const [markdown, setMarkdown] = useState<string>();\n\n  useEffect(() => {\n    if (!markdown) {\n      getProjectMarkdown(deployment, selectedTeam).then(setMarkdown);\n    }\n  }, [markdown, deployment, selectedTeam]);\n\n  // useEffect(() => {\n  //   async function fetchBuilds() {\n  //     // @ts-expect-error Property 'id' does not exist on type 'Deployment'.\n  //     const fetchedBuilds = await fetchDeploymentBuildsByDeploymentId(deployment.uid || deployment.id);\n  //     setMostRecentBuild(fetchedBuilds ? fetchedBuilds[0] : undefined);\n  //   }\n  //   fetchBuilds();\n  // }, [deployment]);\n\n  // @ts-expect-error Property 'id' does not exist on type 'Deployment'.\n  const url = getFetchDeploymentBuildsURL(deployment.uid || deployment.id, selectedTeam?.id, 1);\n\n  const { isLoading, data } = useFetch<{\n    builds: Build[];\n  }>(url, {\n    headers: FetchHeaders,\n  });\n\n  const mostRecentBuild = data?.builds?.[0];\n\n  const getCommitMessage = (deployment: Deployment) => {\n    // TODO: determine others\n    if (deployment.meta.githubCommitMessage) {\n      return deployment.meta.githubCommitMessage;\n    }\n    return \"No commit message\";\n  };\n\n  const getCommitDeploymentBranch = (deployment: Deployment) => {\n    // TODO: support other providers beside GitHub\n    return deployment.meta.githubCommitRef ?? null;\n  };\n  const branchName = getCommitDeploymentBranch(deployment);\n\n  const getStateText = () => {\n    return mostRecentBuild?.readyState\n      ? mostRecentBuild.readyState.toLowerCase().replace(/\\b[a-z]/g, (letter) => letter.toUpperCase())\n      : \"\";\n  };\n\n  // latestDeployment Deployments do not have an inspectorURL\n  const deploymentURL = () => {\n    // @ts-expect-error Property 'inspectorURL' does not exist on type 'Deployment'.\n    if (deployment.inspectorURL) return deployment.inspectorURL;\n\n    const teamSlug = selectedTeam?.slug || username;\n\n    if (!teamSlug) {\n      showToast({\n        title: \"Error\",\n        message: \"Could not determine team or user name\",\n      });\n      return \"\";\n    }\n    // @ts-expect-error Property 'id' does not exist on type 'Deployment'.\n    return getDeploymentURL(teamSlug, deployment.name, deployment.uid || deployment.id);\n  };\n\n  return (\n    <Detail\n      navigationTitle={getCommitMessage(deployment)}\n      isLoading={isLoading || !markdown || !username}\n      markdown={markdown}\n      actions={\n        <ActionPanel>\n          <Action.OpenInBrowser title={`Visit on Vercel`} url={deploymentURL()} icon={Icon.Link} />\n          <Action.OpenInBrowser title={`Visit in Browser`} url={`https://${deployment.url}`} icon={Icon.Link} />\n        </ActionPanel>\n      }\n      metadata={\n        <Detail.Metadata>\n          <Detail.Metadata.Label title={\"State\"} text={getStateText()} />\n          <Detail.Metadata.Label title=\"Name\" text={deployment.name} />\n          <Detail.Metadata.Link title={\"Preview URL\"} text={deployment.url} target={`https://${deployment.url}`} />\n          {/* eslint-disable-next-line @typescript-eslint/ban-ts-comment */}\n          {/* @ts-ignore */}\n          {deployment.inspectorURL && (\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            <Detail.Metadata.Link title={\"Visit on Vercel\"} text={deployment.url} target={deploymentURL()} />\n          )}\n          {branchName && (\n            <Detail.Metadata.Label\n              title=\"Git Branch\"\n              text={branchName}\n              icon={{ source: \"boxicon-git-branch.svg\", tintColor: Color.SecondaryText }}\n            />\n          )}\n          <Detail.Metadata.Label title={\"Commit Message\"} text={getCommitMessage(deployment)} />\n          <Detail.Metadata.Separator />\n          <Detail.Metadata.Label\n            title={\"Created\"}\n            text={deployment.createdAt ? fromNow(deployment.createdAt, new Date()) : \"\"}\n          />\n          <Detail.Metadata.Label title={\"Creator\"} text={deployment.creator?.username || \"Unknown\"} />\n          <Detail.Metadata.Separator />\n          <Detail.Metadata.Link title={\"\"} text={\"Inspect on Vercel\"} target={deploymentURL()} />\n        </Detail.Metadata>\n      }\n    />\n  );\n};\n\nexport default InspectDeployment;\n", "import { Deployment, Team } from \"../types\";\nimport { getScreenshotImageURL } from \"../vercel\";\n\nconst getDeploymentMarkdown = async (deployment: Deployment, team?: Team) => {\n  let intro, body, footer;\n  intro = `# ${deployment.name}\\n`;\n  body = footer = \"\";\n\n  const state = deployment.readyState || deployment.state;\n\n  const bold = (text: TemplateStringsArray | string) => `**${text}**`;\n  // const italic = (text: TemplateStringsArray | string) => `*${text}*`;\n\n  switch (state) {\n    case \"READY\": {\n      // @ts-expect-error Property 'id' does not exist on type 'Deployment'.\n      const imageURL = await getScreenshotImageURL(deployment.uid || deployment.id, team?.id);\n      if (imageURL) {\n        body += `[![A screenshot of the deployment](${imageURL})](https://${deployment.url})`;\n      } else {\n        body += `No screenshot available`;\n      }\n      break;\n    }\n    case \"BUILDING\":\n    case \"INITIALIZING\":\n      intro += bold`Deployment is still building...`;\n      break;\n    case \"FAILED\":\n      intro += bold`Deployment failed.`;\n      break;\n    case \"CANCELED\":\n      intro += bold`Deployment was canceled.`;\n      break;\n    case \"ERROR\": {\n      intro += bold`Deployment had an error.`;\n      break;\n    }\n    default:\n      intro += bold`Deployment is in an unknown state...`;\n  }\n\n  return `${intro}\\n\\n${body}\\n\\n${footer}`;\n};\n\nexport default getDeploymentMarkdown;\n", "import { Icon, Color, List, ActionPanel, Action } from \"@raycast/api\";\nimport useVercel from \"../../hooks/use-vercel-info\";\nimport fromNow from \"../../utils/time\";\nimport { Deployment, DeploymentState, Team } from \"../../types\";\nimport InspectDeployment from \"../inspect-deployment\";\nimport SearchBarAccessory from \"../search-projects/team-switch-search-accessory\";\nimport { FetchHeaders, getDeploymentURL, getFetchDeploymentsURL } from \"../../vercel\";\nimport { useFetch } from \"@raycast/utils\";\n\nconst DeploymentsList = ({ projectId }: { projectId?: string }) => {\n  const { user, teams, selectedTeam } = useVercel();\n  const url = getFetchDeploymentsURL(selectedTeam, projectId);\n\n  const {\n    isLoading,\n    data: deployments,\n    revalidate,\n  } = useFetch(url, {\n    headers: FetchHeaders,\n    mapResult(result: { deployments: Deployment[] }) {\n      return {\n        data: result.deployments,\n      };\n    },\n    initialData: [],\n  });\n\n  const onTeamChange = () => {\n    revalidate();\n  };\n\n  const team = teams?.find((team: Team) => team.id === selectedTeam);\n  return (\n    <List\n      throttle\n      searchBarPlaceholder=\"Search Deployments...\"\n      navigationTitle=\"Results\"\n      isLoading={isLoading || !user}\n      searchBarAccessory={<>{user && <SearchBarAccessory onTeamChange={onTeamChange} />}</>}\n    >\n      {deployments.map((deployment) => {\n        const branchName = getCommitDeploymentBranch(deployment);\n        return (\n          <List.Item\n            title={`${getCommitMessage(deployment)}`}\n            icon={StateIcon(deployment.readyState ? deployment.readyState : deployment.state)}\n            subtitle={`${!projectId ? ` ${deployment.name}` : \"\"}`}\n            keywords={[deployment.name, getCommitMessage(deployment) || \"\", branchName || \"\"]}\n            key={deployment.uid}\n            actions={\n              <ActionPanel>\n                <Action.Push\n                  title=\"Show Details\"\n                  icon={Icon.Binoculars}\n                  target={<InspectDeployment username={user?.username} deployment={deployment} selectedTeam={team} />}\n                />\n                <Action.OpenInBrowser title={`Visit in Browser`} url={`https://${deployment.url}`} icon={Icon.Link} />\n                {user && (\n                  <Action.OpenInBrowser\n                    title={`Visit on Vercel`}\n                    url={getDeploymentURL(\n                      team?.slug || user.username,\n                      deployment.name,\n                      /* @ts-expect-error Property id does not exist on type Deployment */\n                      deployment.id || deployment.uid,\n                    )}\n                    icon={Icon.Link}\n                    shortcut={{ modifiers: [\"cmd\", \"opt\"], key: \"v\" }}\n                  />\n                )}\n                <Action.CopyToClipboard\n                  title={`Copy URL`}\n                  content={`https://${deployment.url}`}\n                  icon={Icon.CopyClipboard}\n                  shortcut={{ modifiers: [\"cmd\", \"opt\"], key: \"c\" }}\n                />\n              </ActionPanel>\n            }\n            accessories={[\n              {\n                text: branchName,\n                icon: branchName ? { source: \"boxicon-git-branch.svg\", tintColor: Color.SecondaryText } : null,\n              },\n              {\n                text: deployment.createdAt ? fromNow(deployment.createdAt, new Date()) : \"\",\n                tooltip: deployment.createdAt ? new Date(deployment.createdAt).toLocaleString() : \"\",\n              },\n            ]}\n          />\n        );\n      })}\n    </List>\n  );\n};\n\nexport default DeploymentsList;\n\nconst getCommitMessage = (deployment: Deployment) => {\n  // TODO: determine others\n  if (deployment.meta.githubCommitMessage) {\n    return deployment.meta.githubCommitMessage;\n  }\n  return \"No commit message\";\n};\n\nconst getCommitDeploymentBranch = (deployment: Deployment) => {\n  // TODO: support other providers beside GitHub\n  return deployment.meta.githubCommitRef ?? null;\n};\n\nconst StateIcon = (state?: DeploymentState) => {\n  switch (state) {\n    case \"READY\":\n      return { source: Icon.Dot, tintColor: Color.Green };\n    case \"BUILDING\":\n    case \"INITIALIZING\":\n      return { source: Icon.Dot, tintColor: Color.Blue };\n    case \"FAILED\":\n      return { source: Icon.Dot, tintColor: Color.Red };\n    case \"CANCELED\":\n      return { source: Icon.Dot, tintColor: Color.PrimaryText };\n    case \"ERROR\":\n      return { source: Icon.ExclamationMark, tintColor: Color.Red };\n    case \"QUEUED\":\n      return { source: Icon.Dot, tintColor: Color.SecondaryText };\n    default:\n      return Icon.QuestionMark;\n  }\n};\n", "import { ActionPanel, confirmAlert, Icon, List, showToast, useNavigation, Action, Toast } from \"@raycast/api\";\nimport { useEffect, useState } from \"react\";\nimport { CreateEnvironment, Environment, Project } from \"../../types\";\nimport {\n  createEnvironmentVariable,\n  deleteEnvironmentVariableById,\n  fetchEnvironmentVariables,\n  updateEnvironmentVariable,\n} from \"../../vercel\";\nimport EditEnvironmentVariable from \"../forms/edit-env-var\";\nimport NewEnvironmentVariable from \"../forms/new-env-var\";\n\ntype Props = {\n  project: Project;\n  team?: string;\n};\n\nconst EnvironmentVariables = ({ project, team }: Props) => {\n  const [systemVars, setSystemVars] = useState<Environment[]>();\n  const [plainVars, setPlainVars] = useState<Environment[]>();\n  const [encryptedVars, setEncryptedVars] = useState<Environment[]>();\n  const [secretVars, setSecretVars] = useState<Environment[]>();\n\n  const { push, pop } = useNavigation();\n\n  async function fetchAndSetVars() {\n    const vars = await fetchEnvironmentVariables(project.id, team);\n    const systemVars: Environment[] = [];\n    const plainVars: Environment[] = [];\n    const encryptedVars: Environment[] = [];\n    const secretVars: Environment[] = [];\n\n    vars.forEach((variable) => {\n      if (variable.type === \"system\") {\n        systemVars.push(variable);\n      } else if (variable.type === \"plain\") {\n        plainVars.push(variable);\n      } else if (variable.type === \"encrypted\") {\n        encryptedVars.push(variable);\n      } else if (variable.type === \"secret\") {\n        secretVars.push(variable);\n      }\n    });\n\n    setSystemVars(systemVars);\n    setPlainVars(plainVars);\n    setEncryptedVars(encryptedVars);\n    setSecretVars(secretVars);\n  }\n\n  useEffect(() => {\n    fetchAndSetVars();\n  }, []);\n\n  const updateEnvVar = async (id: string, envVar: Partial<Environment>) => {\n    const updatedEnvVariable = await updateEnvironmentVariable(project.id, id, envVar);\n    if (updatedEnvVariable.key) {\n      showToast({\n        style: Toast.Style.Success,\n        title: \"Environment variable updated\",\n      });\n      pop();\n      await fetchAndSetVars();\n    } else {\n      showToast({\n        style: Toast.Style.Failure,\n        title: \"Failed to update environment variable\",\n      });\n    }\n  };\n\n  const createEnvVar = async (envVar: CreateEnvironment) => {\n    const addedVar = await createEnvironmentVariable(project.id, envVar, team);\n    if (addedVar.error) {\n      showToast({\n        style: Toast.Style.Failure,\n        title: \"Failed to create environment variable\",\n      });\n    } else if (addedVar) {\n      await fetchAndSetVars();\n      showToast({\n        style: Toast.Style.Success,\n        title: \"Environment variable created\",\n      });\n      pop();\n    }\n  };\n\n  const anyVarsLoaded = !!(systemVars && plainVars && encryptedVars && secretVars);\n  const systemVarsPresent = !!systemVars && systemVars.length > 0;\n  const plainVarsPresent = !!plainVars && plainVars.length > 0;\n  const encryptedVarsPresent = !!encryptedVars && encryptedVars.length > 0;\n  const secretVarsPresent = !!secretVars && secretVars.length > 0;\n\n  const itemActions = (v: Environment) => (\n    <ActionPanel>\n      <Action.Push\n        title=\"Edit\"\n        icon={Icon.Pencil}\n        target={<EditEnvironmentVariable envVar={v} updateEnvVar={updateEnvVar} />}\n      />\n      <Action\n        title=\"Delete\"\n        onAction={async () => {\n          if (await confirmAlert({ title: `Are you sure you want to delete ${v.key}?` })) {\n            Promise.all([deleteEnvironmentVariableById(project.id, v.id), fetchAndSetVars()]);\n          }\n        }}\n        icon={Icon.Trash}\n      />\n    </ActionPanel>\n  );\n\n  return (\n    <List navigationTitle={`Environment variables for ${project.name}`} isLoading={!anyVarsLoaded}>\n      <List.Item\n        title=\"New Environment Variable\"\n        icon={Icon.Plus}\n        actions={\n          <ActionPanel>\n            <Action\n              title=\"Add\"\n              onAction={() => {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                push(<NewEnvironmentVariable createEnvVar={createEnvVar as any} />);\n              }}\n            />\n          </ActionPanel>\n        }\n      />\n      {systemVarsPresent && <List.Section title=\"System Environment Variables\" />}\n      {systemVarsPresent &&\n        systemVars.map((v) => <EnvironmentVariableItem type={v.type} envVar={v} key={v.id} actions={itemActions(v)} />)}\n      {plainVarsPresent && <List.Section title=\"Plain Environment Variables\" />}\n      {plainVarsPresent &&\n        plainVars.map((v) => <EnvironmentVariableItem type={v.type} envVar={v} key={v.id} actions={itemActions(v)} />)}\n      {encryptedVarsPresent && <List.Section title=\"Encrypted Environment Variables\" />}\n      {encryptedVarsPresent &&\n        encryptedVars.map((v) => (\n          <EnvironmentVariableItem type={v.type} envVar={v} key={v.id} actions={itemActions(v)} />\n        ))}\n      {secretVarsPresent && <List.Section title=\"Secret Environment Variables\" />}\n      {secretVarsPresent &&\n        secretVars.map((v) => <EnvironmentVariableItem type={v.type} envVar={v} key={v.id} actions={itemActions(v)} />)}\n    </List>\n  );\n};\nconst EnvironmentVariableItem = ({\n  envVar,\n  actions,\n}: {\n  icon?: string;\n  envVar: Environment;\n  type: Environment[\"type\"];\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  actions: any;\n}) => {\n  const getIcon = (type: string) => {\n    switch (type) {\n      case \"system\":\n        return Icon.Desktop;\n      case \"secret\":\n        return Icon.EyeDisabled;\n      case \"encrypted\":\n        return Icon.BlankDocument;\n      case \"plain\":\n        return Icon.BlankDocument;\n      default:\n        return Icon.BlankDocument;\n    }\n  };\n\n  return (\n    <List.Item\n      title={envVar.key}\n      subtitle={envVar.value}\n      icon={getIcon(envVar.type)}\n      actions={actions}\n      key={envVar.id}\n      id={envVar.id}\n    />\n  );\n};\n\nexport default EnvironmentVariables;\n", "import { ActionPanel, Form, Action } from \"@raycast/api\";\nimport type { Environment } from \"../../types\";\n\ntype Props = {\n  envVar: Environment;\n  updateEnvVar: (id: string, envVar: Partial<Environment>) => Promise<void>;\n};\n\nconst EditEnvironmentVariable = ({ updateEnvVar, envVar }: Props) => {\n  const onSubmit = (values: Form.Values) => {\n    const targets = () => {\n      const target = [];\n      if (values[\"edit-form-development\"]) target.push(\"development\");\n      if (values[\"edit-form-preview\"]) target.push(\"preview\");\n      if (values[\"edit-form-production\"]) target.push(\"production\");\n      return target;\n    };\n\n    const formedValues: Pick<Environment, \"target\" | \"key\" | \"value\"> = {\n      target: targets() as Environment[\"target\"],\n      key: values.key,\n      value: values.value,\n    };\n\n    updateEnvVar(envVar.id, formedValues);\n  };\n\n  return (\n    <Form\n      actions={\n        <ActionPanel>\n          <Action.SubmitForm title=\"Submit\" onSubmit={onSubmit} />\n        </ActionPanel>\n      }\n    >\n      <Form.TextField id=\"key\" defaultValue={envVar.key} title=\"Environment variable key\" />\n      <Form.TextField id=\"value\" defaultValue={envVar.value} title=\"Environment variable value\" />\n      <Form.Separator />\n      <Form.Checkbox\n        id=\"edit-form-production\"\n        label=\"Production\"\n        defaultValue={envVar.target?.includes(\"production\")}\n      />\n      <Form.Checkbox id=\"edit-form-preview\" label=\"Preview\" defaultValue={envVar.target?.includes(\"preview\")} />\n      <Form.Checkbox\n        id=\"edit-form-development\"\n        label=\"Development\"\n        defaultValue={envVar.target?.includes(\"development\")}\n      />\n    </Form>\n  );\n};\n\nexport default EditEnvironmentVariable;\n", "import { ActionPanel, Form, Action } from \"@raycast/api\";\nimport type { Environment } from \"../../types\";\n\ntype Props = {\n  createEnvVar: (envVar: Partial<Environment>) => Promise<void>;\n};\n\nconst NewEnvironmentVariable = ({ createEnvVar }: Props) => {\n  const onSubmit = (values: Form.Values) => {\n    const targets = () => {\n      const target = [];\n      if (values[\"edit-form-development\"]) target.push(\"development\");\n      if (values[\"edit-form-preview\"]) target.push(\"preview\");\n      if (values[\"edit-form-production\"]) target.push(\"production\");\n      return target;\n    };\n\n    const formedValues: Partial<Environment> = {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      target: targets() as any,\n      key: values.key,\n      value: values.value,\n    };\n    createEnvVar(formedValues);\n  };\n\n  return (\n    <Form\n      navigationTitle=\"New Environment Variable\"\n      actions={\n        <ActionPanel>\n          <Action.SubmitForm title=\"Submit\" onSubmit={onSubmit} />\n        </ActionPanel>\n      }\n    >\n      <Form.TextField id=\"key\" title=\"Environment variable key\" placeholder=\"YOUR_KEY\" />\n      <Form.TextField id=\"value\" title=\"Environment variable value\" placeholder=\"your_value\" />\n      <Form.Separator />\n      <Form.Checkbox id=\"edit-form-production\" label=\"Production\" />\n      <Form.Checkbox id=\"edit-form-preview\" label=\"Preview\" />\n      <Form.Checkbox id=\"edit-form-development\" label=\"Development\" />\n    </Form>\n  );\n};\n\nexport default NewEnvironmentVariable;\n", "import { getPreferenceValues } from \"@raycast/api\";\nimport { fetchUser } from \"../vercel\";\n\nconst isValidToken = async () => {\n  const token = getPreferenceValues<Preferences>().accessToken;\n  if (token.length !== 24) throw new Error(\"Invalid token length. Expected 24 characters.\");\n  const user = await fetchUser();\n  if (!user) throw new Error(\"Failed to fetch user data. Token may be invalid.\");\n  return true;\n};\n\nexport default isValidToken;\n", "import { Action, ActionPanel, Detail, Icon, openExtensionPreferences } from \"@raycast/api\";\n\nconst InvalidTokenView = () => {\n  return (\n    <Detail\n      markdown={`# ERROR \\n\\n Invalid token detected. Please set one in the settings.`}\n      actions={\n        <ActionPanel>\n          <Action icon={Icon.Gear} title=\"Open Extension Preferences\" onAction={openExtensionPreferences} />\n        </ActionPanel>\n      }\n    />\n  );\n};\n\nexport default InvalidTokenView;\n", "import type { FC, PropsWithChildren } from \"react\";\nimport isValidToken from \"../utils/is-valid-token\";\nimport InvalidTokenView from \"./details/invalid-token-view\";\nimport { usePromise } from \"@raycast/utils\";\nimport { Detail } from \"@raycast/api\";\n\nconst WithValidToken: FC<PropsWithChildren<object>> = ({ children }) => {\n  const { isLoading, error } = usePromise(isValidToken, [], {\n    failureToastOptions: {\n      title: \"Invalid token detected. Please set one in the settings.\",\n    },\n  });\n\n  if (isLoading) return <Detail isLoading />;\n\n  if (error) {\n    return <InvalidTokenView />;\n  }\n\n  return <>{children}</>;\n};\n\nexport default WithValidToken;\n"],
  "mappings": "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",
  "names": ["require_use_sync_external_store_shim_production", "__commonJSMin", "exports", "React", "is", "x", "y", "objectIs", "useState", "useEffect", "useLayoutEffect", "useDebugValue", "useSyncExternalStore$2", "subscribe", "getSnapshot", "value", "_useState", "inst", "forceUpdate", "checkIfSnapshotChanged", "latestGetSnapshot", "nextValue", "useSyncExternalStore$1", "shim", "require_use_sync_external_store_shim_development", "__commonJSMin", "exports", "is", "x", "y", "useSyncExternalStore$2", "subscribe", "getSnapshot", "didWarnOld18Alpha", "React", "value", "didWarnUncachedGetSnapshot", "cachedValue", "objectIs", "useState", "inst", "forceUpdate", "useLayoutEffect", "checkIfSnapshotChanged", "useEffect", "useDebugValue", "latestGetSnapshot", "nextValue", "useSyncExternalStore$1", "shim", "require_shim", "__commonJSMin", "exports", "module", "search_projects_exports", "__export", "search_projects_default", "__toCommonJS", "import_api", "ordinalizeNumber", "n", "rule", "suffix", "getTimeSince", "_fromDate", "_toDate", "dateStringCap", "throwError", "toPresent", "fromDate", "toDate", "formatTimeSince", "diff", "weekday", "month", "dateNumStr", "year", "unit", "value", "sign", "floor", "ceil", "result", "time_default", "import_api", "import_react", "import_api", "import_api", "token", "headers", "FetchHeaders", "apiURL", "fetchUser", "err", "fetchTeams", "json", "teams", "team", "deleteEnvironmentVariableById", "projectId", "envId", "apiURL", "headers", "e", "getFetchDeploymentsURL", "teamId", "limit", "url", "query", "getFetchDeploymentBuildsURL", "deploymentId", "teamId", "limit", "apiURL", "fetchEnvironmentVariables", "projectId", "teamId", "_rawFetchProjectEnvironmentVariables", "a", "b", "getFetchProjectsURL", "limit", "apiURL", "_rawFetchProjectEnvironmentVariables", "projectId", "teamId", "apiURL", "headers", "err", "updateEnvironmentVariable", "envId", "envVar", "_rawUpdateProjectEnvironmentVariable", "createEnvironmentVariable", "e", "arrayBufferToBase64", "buffer", "binary", "b", "getScreenshotImageURL", "deploymentId", "theme", "response", "arrayBuffer", "getDeploymentURL", "userOrTeamSlug", "projectName", "import_react", "import_shim", "import_react", "events_exports", "__export", "ERROR_REVALIDATE_EVENT", "FOCUS_EVENT", "MUTATE_EVENT", "RECONNECT_EVENT", "has", "dequal", "foo", "bar", "ctor", "len", "SWRGlobalState", "noop", "UNDEFINED", "OBJECT", "isUndefined", "v", "isFunction", "mergeObjects", "a", "b", "isPromiseLike", "x", "EMPTY_CACHE", "INITIAL_CACHE", "STR_UNDEFINED", "isWindowDefined", "isDocumentDefined", "isLegacyDeno", "hasRequestAnimationFrame", "createCacheHelper", "cache", "key", "state", "info", "prev", "online", "isOnline", "onWindowEvent", "offWindowEvent", "isVisible", "visibilityState", "initFocus", "callback", "initReconnect", "onOnline", "onOffline", "preset", "defaultConfigOptions", "IS_REACT_LEGACY", "React", "IS_SERVER", "rAF", "f", "useIsomorphicLayoutEffect", "navigatorConnection", "slowConnection", "table", "getTypeName", "value", "isObjectTypeName", "typeName", "type", "counter", "stableHash", "arg", "isDate", "isRegex", "isPlainObject", "result", "index", "keys", "serialize", "args", "__timestamp", "getTimestamp", "internalMutate", "_key", "_data", "_opts", "options", "populateCache", "rollbackOnErrorOption", "optimisticData", "rollbackOnError", "error", "throwOnError", "keyFilter", "matchedKeys", "it", "mutateByKey", "_k", "get", "set", "EVENT_REVALIDATORS", "MUTATION", "FETCH", "PRELOAD", "startRevalidate", "revalidators", "data", "isError", "beforeMutationTs", "hasOptimisticData", "displayedData", "currentData", "committedData", "err", "populateCachedData", "revalidateAllKeys", "initCache", "provider", "opts", "mutate", "unmount", "subscriptions", "subscribe", "subs", "setter", "fn", "initProvider", "releaseFocus", "releaseReconnect", "onErrorRetry", "_", "__", "config", "revalidate", "maxRetryCount", "currentRetryCount", "timeout", "compare", "dequal", "defaultConfig", "mergeConfigs", "u1", "f1", "u2", "f2", "SWRConfigContext", "SWRConfig", "props", "parentConfig", "isFunctionalConfig", "extendedConfig", "cacheContextRef", "cacheContext", "INFINITE_PREFIX", "import_react", "enableDevtools", "isWindowDefined", "use", "setupDevTools", "React", "normalize", "args", "isFunction", "useSWRConfig", "mergeObjects", "defaultConfig", "SWRConfigContext", "middleware", "useSWRNext", "key_", "fetcher_", "config", "args", "key", "serialize", "PRELOAD", "SWRGlobalState", "cache", "INFINITE_PREFIX", "req", "isUndefined", "BUILT_IN_MIDDLEWARE", "use", "withArgs", "hook", "fallbackConfig", "useSWRConfig", "fn", "_config", "normalize", "mergeConfigs", "next", "i", "subscribeCallback", "callbacks", "callback", "keyedRevalidators", "index", "setupDevTools", "noop", "UNDEFINED", "use", "React", "thenable", "v", "e", "WITH_DEDUPE", "useSWRHandler", "_key", "fetcher", "config", "cache", "compare", "suspense", "fallbackData", "revalidateOnMount", "revalidateIfStale", "refreshInterval", "refreshWhenHidden", "refreshWhenOffline", "keepPreviousData", "EVENT_REVALIDATORS", "MUTATION", "FETCH", "PRELOAD", "SWRGlobalState", "key", "fnArg", "serialize", "initialMountedRef", "unmountedRef", "keyRef", "fetcherRef", "configRef", "getConfig", "isActive", "getCache", "setCache", "subscribeCache", "getInitialCache", "createCacheHelper", "stateDependencies", "fallback", "isUndefined", "UNDEFINED", "isEqual", "prev", "current", "_", "t", "returnedData", "getSnapshot", "shouldStartRequest", "getSelectedCache", "state", "snapshot", "mergeObjects", "cachedData", "initialData", "clientSnapshot", "serverSnapshot", "memorizedSnapshot", "newSnapshot", "cached", "callback", "isInitialMount", "hasRevalidator", "data", "isPromiseLike", "error", "laggyDataRef", "shouldDoInitialRevalidation", "defaultValidatingState", "isValidating", "isLoading", "revalidate", "revalidateOpts", "currentFetcher", "newData", "startAt", "loading", "opts", "shouldStartNewRequest", "callbackSafeguard", "IS_REACT_LEGACY", "finalState", "finishRequestAndUpdateState", "cleanupState", "requestInfo", "initialState", "getTimestamp", "mutationInfo", "cacheData", "err", "currentConfig", "shouldRetryOnError", "isFunction", "_opts", "revalidators", "events_exports", "boundMutate", "args", "internalMutate", "useIsomorphicLayoutEffect", "softRevalidate", "nextFocusRevalidatedAt", "unsubEvents", "subscribeCallback", "type", "now", "IS_SERVER", "rAF", "timer", "next", "interval", "execute", "req", "promise", "SWRConfig", "OBJECT", "defaultConfig", "useSWR", "withArgs", "useSharedState", "key", "initial", "state", "setState", "useSWR", "use_shared_state_default", "useVercel", "user", "setUser", "use_shared_state_default", "teams", "setTeams", "selectedTeamId", "setSelectedTeamId", "fetchedUser", "fetchedTeams", "fetchUser", "fetchTeams", "team", "teamIdOrUsername", "teamIfExists", "use_vercel_info_default", "import_jsx_runtime", "searchBarAccessory", "onTeamChange", "selectedTeam", "teams", "updateSelectedTeam", "use_vercel_info_default", "onChange", "teamIdOrUsername", "team", "x", "newValue", "team_switch_search_accessory_default", "$a57ed8effbd797c7$export$722debc0e56fea39", "value", "ref", "$hgUW1$useRef", "signalRef", "dequal", "$hgUW1$useMemo", "$bfcf6ee368b3bd9f$export$d4b699e2c1148419", "$c718fd03aba6111c$export$80e5033e369189f3", "error", "options", "message", "$hgUW1$showToast", "$hgUW1$Toast", "$c718fd03aba6111c$var$handleErrorToastAction", "privateExtension", "title", "extensionURL", "packageJSON", "$hgUW1$readFileSync", "$hgUW1$join", "$hgUW1$environment", "fallback", "stack", "toast", "$hgUW1$Clipboard", "$hgUW1$open", "$cefc05764ce5eacd$export$dd6b79aaabe7bc37", "fn", "args", "lastCallId", "state", "set", "$hgUW1$useState", "fnRef", "latestAbortable", "latestArgs", "latestOnError", "latestOnData", "latestOnWillExecute", "latestFailureToast", "latestValue", "latestCallback", "paginationArgsRef", "usePaginationRef", "hasMoreRef", "pageSizeRef", "abort", "$hgUW1$useCallback", "callback", "callId", "prevState", "promiseOrPaginatedPromise", "$cefc05764ce5eacd$var$bindPromiseIfNeeded", "handleError", "$hgUW1$LaunchType", "data", "hasMore", "cursor", "previousData", "revalidate", "mutate", "asyncUpdate", "dataBeforeOptimisticUpdate", "update", "err", "onLoadMore", "$hgUW1$useEffect", "isLoading", "stateWithLoadingFixed", "pagination", "$93381684554307cb$var$isNativeFunction", "f", "$93381684554307cb$var$hashReplacer", "$93381684554307cb$export$fe386877a696ae78", "writeTo", "context", "write", "str", "object", "pattern", "objString", "objType", "objectNumber", "keys", "self", "key", "arr", "unordered", "entry", "contextAdditions", "entries", "strm", "$93381684554307cb$var$PassThrough", "localContext", "date", "sym", "bool", "string", "number", "xml", "regex", "url", "map", "file", "b", "$e2e1ea6dd3b7d2e1$export$b644b65666fe0c18", "_value", "$e2e1ea6dd3b7d2e1$export$63698c10df99509c", "_key", "$e2e1ea6dd3b7d2e1$export$d6af199866bfb566", "hashingStream", "$hgUW1$nodecrypto", "$c40d7eded38ca69c$var$rootCache", "$c40d7eded38ca69c$var$cacheMap", "$c40d7eded38ca69c$export$14afb9e4c16377d3", "initialState", "config", "cacheKey", "cache", "$hgUW1$Cache", "keyRef", "initialValueRef", "cachedState", "$hgUW1$useSyncExternalStore", "stateRef", "setStateAndCache", "updater", "newValue", "stringifiedValue", "$a7f3824c7be647eb$var$emptyCache", "$a7f3824c7be647eb$export$b15740c74e256244", "initialData", "keepPreviousData", "internal_cacheKeySuffix", "usePromiseOptions", "lastUpdateFrom", "cachedData", "mutateCache", "laggyDataRef", "_mutate", "returnedData", "latestData", "$57d824a69312cff2$export$3427e80ee71d60ba", "contentTypeHeader", "mediaType", "$57d824a69312cff2$var$parseContentType", "$57d824a69312cff2$var$MEDIA_TYPE_REGEXP", "header", "headerDelimitationindex", "contentType", "match", "type", "subtype", "suffix", "index", "$07de1abb43355e7b$var$defaultParsing", "response", "$07de1abb43355e7b$var$defaultMapping", "result", "$07de1abb43355e7b$export$d852f5f778460fa4", "parseResponse", "mapResult", "execute", "onError", "onData", "onWillExecute", "failureToastOptions", "fetchOptions", "useCachedPromiseOptions", "parseResponseRef", "mapResultRef", "urlRef", "firstPageUrlRef", "firstPageUrl", "abortable", "paginatedFn", "res", "parsed", "promise", "import_api", "import_react", "getDeploymentMarkdown", "deployment", "team", "intro", "body", "footer", "state", "bold", "text", "imageURL", "getScreenshotImageURL", "get_deployment_markdown_default", "import_jsx_runtime", "InspectDeployment", "deployment", "selectedTeam", "username", "markdown", "setMarkdown", "get_deployment_markdown_default", "url", "getFetchDeploymentBuildsURL", "isLoading", "data", "$07de1abb43355e7b$export$d852f5f778460fa4", "FetchHeaders", "mostRecentBuild", "getCommitMessage", "branchName", "getStateText", "letter", "deploymentURL", "teamSlug", "getDeploymentURL", "time_default", "inspect_deployment_default", "import_api", "import_jsx_runtime", "DeploymentsList", "projectId", "user", "teams", "selectedTeam", "use_vercel_info_default", "url", "getFetchDeploymentsURL", "isLoading", "deployments", "revalidate", "$07de1abb43355e7b$export$d852f5f778460fa4", "FetchHeaders", "result", "onTeamChange", "team", "team_switch_search_accessory_default", "deployment", "branchName", "getCommitDeploymentBranch", "getCommitMessage", "StateIcon", "inspect_deployment_default", "getDeploymentURL", "time_default", "deployments_list_default", "state", "import_api", "import_react", "import_api", "import_jsx_runtime", "EditEnvironmentVariable", "updateEnvVar", "envVar", "onSubmit", "values", "formedValues", "target", "edit_env_var_default", "import_api", "import_jsx_runtime", "NewEnvironmentVariable", "createEnvVar", "onSubmit", "values", "formedValues", "target", "new_env_var_default", "import_jsx_runtime", "EnvironmentVariables", "project", "team", "systemVars", "setSystemVars", "plainVars", "setPlainVars", "encryptedVars", "setEncryptedVars", "secretVars", "setSecretVars", "push", "pop", "fetchAndSetVars", "vars", "fetchEnvironmentVariables", "variable", "updateEnvVar", "id", "envVar", "updateEnvironmentVariable", "createEnvVar", "addedVar", "createEnvironmentVariable", "anyVarsLoaded", "systemVarsPresent", "plainVarsPresent", "encryptedVarsPresent", "secretVarsPresent", "itemActions", "v", "edit_env_var_default", "deleteEnvironmentVariableById", "new_env_var_default", "EnvironmentVariableItem", "actions", "getIcon", "type", "environment_variables_list_default", "import_jsx_runtime", "ProjectListSection", "selectedTeam", "teams", "user", "use_vercel_info_default", "url", "getFetchProjectsURL", "isLoading", "projects", "revalidate", "$07de1abb43355e7b$export$d852f5f778460fa4", "FetchHeaders", "result", "onTeamChange", "push", "team_switch_search_accessory_default", "project", "deployments_list_default", "inspect_deployment_default", "team", "environment_variables_list_default", "time_default", "projects_list_default", "import_api", "isValidToken", "fetchUser", "is_valid_token_default", "import_api", "import_jsx_runtime", "InvalidTokenView", "invalid_token_view_default", "import_api", "import_jsx_runtime", "WithValidToken", "children", "isLoading", "error", "$cefc05764ce5eacd$export$dd6b79aaabe7bc37", "is_valid_token_default", "invalid_token_view_default", "with_valid_token_default", "import_jsx_runtime", "Main", "with_valid_token_default", "projects_list_default", "search_projects_default"]
}
